;;=============================================================================
;;
;; Program:     MakeShare
;;
;; Description: A utuility program which analyses the content of an OpenVMS
;;              object library and creates a DCL command procedure which can
;;              be used to link a shared image from the library. This utility
;;              replaces an older and similar DCL command file which was called
;;              MAKE_SHARE.COM.
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;
;; Requires:    Synergy/DE V9.5 on OpenVMS (Alpha or IA64)
;;
;; Revision:    2.0     7th October 2015
;;
;;=============================================================================
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code. This text
;; must remain unaltered in this file at all times. Possession or use of this
;; code, or any modified version of this code, indicates your acceptance of
;; these conditions.
;;=============================================================================
;;
;; To use this utility:
;;
;; 1. Build it
;;
;;    $ DIB/OPT MAKESHARE
;;    $ LINK MAKESHARE,SYS$SHARE:SYNRTL/OPT
;;
;; 2. Assign a global symbol:
;;
;;    $ MAKESHARE:==$<disk>:[<directory>]MAKESHARE.EXE
;;
;; 3. Use it, to get started view the usage information, like this:
;;
;;    $ MAKESHARE -h
;;
;;=============================================================================
;;
import System.Collections

main makeshare

    record
        tt              ,i4 ,1          ;;Terminal channel
        pipe            ,i4 ,2          ;;Pipe channel for DCL command
        comfile         ,i4 ,3          ;;Output command file channel
        ix              ,i4             ;;Generic loop counter
        spare_data      ,i4             ;;Number of spare data slots in symbol vector
        spare_routines  ,i4             ;;Number of spare procedure slots in symbol vector
        ok              ,boolean, true  ;;OK to continue?
        mapFile         ,boolean        ;;Should the link generate a map file?
        linksql         ,boolean        ;;Should the image link against SSQLRTL?
        linktk          ,boolean        ;;Should the image link against UI Toolkit?
        quiet           ,boolean        ;;Quiet mode is active
        debugSupport    ,boolean        ;;Add debugging support in the symbol vector
        buff            ,a128           ;;Input buffer
        ClBuffer        ,[10]a80        ;;Command line parameters buffer
        ClCount         ,d4             ;;Number of command line parameters in buffer
        libspec         ,@String        ;;Object library name (from command line)
        libfullspec     ,@String        ;;Object library name (from command line)
        libname         ,@String        ;;Base name of object library
        exelocation     ,@String        ;;Location for shared image (from command line)
        exesuffix       ,@String        ;;Suffix for shared image name (from command line)
        imagespec       ,@String        ;;Full spec for shared image
        datasections    ,@ArrayList     ;;Collection of data sections for the symbol vector
        routines        ,@ArrayList     ;;Collection of procedures for the symbol vector
        otherImages     ,@ArrayList     ;;Collection of other shared images to link against
    endrecord

proc

    ;;Open the terminal
    xcall flags(7004020,1)
    open(tt,i,"tt:")

    ;;Make sure we're on OpenVMS, and not on VAX
    begin
        data system     ,i4
        data machine    ,i4
        xcall envrn(system,machine)
        if ((system!=6)||(machine==201))
        begin
            writes(tt,"This utility can only be used on OpenVMS Alpha or IA64 systems.")
            ok = false
        end
    end

    ;;Are we being asked for help?
    if (ok)
    begin
        if (CommandLine("h ")||CommandLine("? "))
        begin
            call usage
            ok = false
        end
    end

    ;;Get the object library spec from the command line (-l libspec)
    if (ok)
    begin
        if (CommandLine("l ",1,ClBuffer,ClCount)) then
        begin
            if (ClCount) then
                libspec = %atrim(ClBuffer[1])
            else
            begin
                ;;No library specified after -l
                call usage
                ok = false
            end
        end
        else
        begin
            ;;No -l option specified
            call usage
            ok = false
        end
    end

    ;;Do we have a location for the shared image executable (-e option)
    if (ok)
    begin
        if (CommandLine("e ",1,ClBuffer,ClCount)) then
        begin
            if (ClCount) then
                exelocation = %atrim(ClBuffer[1])
            else
            begin
                ;;No location specified after -e
                writes(tt,"Specify executable location after the -e option!")
                ok = false
            end
        end
        else
        begin
            ;;No -e option, shared image will be in current directory
            exelocation=""
        end
    end

    ;;Do we have a suffix for the shared image executable (-s option)
    if (ok)
    begin
        if (CommandLine("s ",1,ClBuffer,ClCount)) then
        begin
            if (ClCount) then
                exesuffix = %atrim(ClBuffer[1])
            else
            begin
                ;;No suffix specified after -s
                writes(tt,"Specify executable suffix after the -s option!")
                ok = false
            end
        end
        else
        begin
            ;;No -s option, no shared image suffix will be used
            exesuffix = ""
        end
    end

    ;;Are we being asked to link against other shared images (-si option)
    if (ok)
    begin
        otherImages = new ArrayList()
        if (CommandLine("si ",10,ClBuffer,ClCount))
        begin
            if (ClCount) then
            begin
                for ix from 1 thru ClCount
                begin
                    data sharedImage, string, %atrim(ClBuffer[ix])
                    sharedImage = sharedImage.ToUpper()
                    if (!sharedImage.EndsWith("/SHARE"))
                        sharedImage = sharedImage + "/SHARE"
                    otherImages.Add(sharedImage)
                end
            end
            else
            begin
                ;;No shared images specified after -si
                writes(tt,"Specify one or more shared images after the -si option!")
                ok = false
            end
        end
    end

    ;;Are we being asked for spare space for data in the symbol vector  (-sd option)
    if (ok)
    begin
        if (CommandLine("sd ",1,ClBuffer,ClCount)) then
        begin
            if (ClCount) then
                spare_data = %integer(%atrim(ClBuffer[1]))
            else
            begin
                ;;No number specified after -sd
                writes(tt,"Specify a number after the -sd option!")
                ok = false
            end
        end
        else
        begin
            ;;No -sd option, no spare data slots in symbol vector
            spare_data = 0
        end
    end

    ;;Are we being asked for spare space for procedures in the symbol vector  (-sp option)
    if (ok)
    begin
        if (CommandLine("sp ",1,ClBuffer,ClCount)) then
        begin
            if (ClCount) then
                spare_routines = %integer(%atrim(ClBuffer[1]))
            else
            begin
                ;;No number specified after -sp
                writes(tt,"Specify a number after the -sp option!")
                ok = false
            end
        end
        else
        begin
            ;;No -sp option, no spare procedure slots in symbol vector
            spare_routines = 0
        end
    end

    ;;Are we being asked to support xfServerPlus debugging?
    if (ok)
        debugSupport = (CommandLine("xd ",1,ClBuffer,ClCount))

    ;;Should the link create a map file? (-m option)
    if (ok)
        mapFile = CommandLine("m ")

    ;;Should we link against the SQL Connection library? (-sql option)
    if (ok)
        linksql = CommandLine("sql ")

    ;;Should we link against the UI Toolkit library? (-tk option)
    if (ok)
        linktk = CommandLine("tk ")

    ;;Are we in quiet mode? (-q option)
    if (ok)
        quiet = CommandLine("q ")

    ;;Make sure we can open the library with the path provided
    if (ok)
    begin
        try
        begin
            data lfs, a128
            data basename, a64
            open(pipe,i:s,libspec)
            xcall filnm(pipe,lfs)                   ;;Get full expanded file spec
            xcall parse(lfs,,,,,basename)           ;;Get base file name only
            libfullspec = %atrim(lfs)               ;;Store full spec for later
            libname = %atrim(basename)              ;;Store base name for later

            close pipe
        end
        catch (ex, @Exception)
        begin
            writes(tt,"Failed to open library " + libspec)
            writes(tt,ex.Message)
            ok = false
        end
        endtry
    end

    ;;Get a listing of the contents of the object library
    if (ok)
    begin
        data firstrecord, boolean, true

        datasections = new ArrayList()
        routines = new ArrayList()

        open(pipe,i,"|LIBRARIAN/LIST/NAME "+libfullspec)

        repeat
        begin
            reads(pipe,buff,eof)

            if (firstrecord)
            begin
                ;;If we get an error the most likely reason is that the
                ;;file specified on the command line is not an object library
                if (buff=="%LIBRAR-F-OPENIN")
                begin
                    ok = false
                    writes(tt,"Not an object library!")
                    exitloop
                end
            end

            ;;Did we find a new module in the object library?
            if (buff=="Module ")
                call process_module
        end
    eof,
        close 2

        if (ok)
        begin
            ;;Did we find anything?
            if (routines.Count) then
                call write_comfile
            else
                writes(tt,'No routines in library!')
        end
    end

    close tt

    stop

;;-----------------------------------------------------------------------------
;;Process a module in the object library
;;
process_module,

    ;;Extract the module name

    ;;Process the module
    repeat
    begin
        reads(pipe,buff)

        ;;Are we done with this module?
        if (!buff)
            exitloop

        ;;Is it a global data section?
        if (buff(1:2)=="$$") then
        begin
            ;;Yes, it's a global data section
            datasections.Add((@a)%atrim(buff))
        end
        else
        begin
            ;;Is it a common?
            if (buff(%trim(buff):1)=="$") then
            begin
                ;;Yes, it's a common
                datasections.Add((@a)%atrim(buff))
            end
            else
            begin
                ;;Make sure it's not a static record
                if (buff!="$SR_")
                begin
                    ;;It's a routine
                    routines.Add((@a)%atrim(buff))
                end
            end
        end
    end

    return

;;-----------------------------------------------------------------------------
;;Create the DCL command procedure
;;
write_comfile,


    if (exelocation.Length) then
        imagespec = exelocation
    else
        imagespec = ""
    imagespec = imagespec + libname
    if (exesuffix.Length)
        imagespec = imagespec + exesuffix
    imagespec = imagespec + '.EXE'

    open(comfile,o,libname+".COM",OPTIONS:"/STREAM")

    ;;Header section

    writes(comfile,'$ !============================================================================')
    writes(comfile,'$ !')
    writes(comfile,'$ ! Title:       '+libname+'.COM')
    writes(comfile,'$ !')
    writes(comfile,'$ ! Description: Links '+imagespec+' from '+libspec)
    writes(comfile,'$ !')
    writes(comfile,'$ !============================================================================')

    ;;Make sure required logicals are present

    writes(comfile,'$ !')
    writes(comfile,'$ IF (F$TRNLNM("SYNRTL").EQS."")   THEN DEFINE/NOLOG SYNRTL   SYS$SHARE:SYNRTL.EXE')
    writes(comfile,'$ IF (F$TRNLNM("DBLTLIB").EQS."")  THEN DEFINE/NOLOG DBLTLIB  SYS$SHARE:DBLTLIB.OLB')
    if (linksql)
        writes(comfile,'$ IF (F$TRNLNM("SSQLRTL").EQS."")  THEN DEFINE/NOLOG SSQLRTL  CONNECTDIR:SSQLRTL.EXE')
    if (linktk)
        writes(comfile,'$ IF (F$TRNLNM("TKLIB_SH").EQS."") THEN DEFINE/NOLOG TKLIB_SH WND:TKLIB_SH.EXE')
    writes(comfile,'$ !')
    writes(comfile,'$ !----------------------------------------------------------------------------')
    writes(comfile,'$ !')

    ;;Display what we're doing

    writes(comfile,'$ WRITE SYS$OUTPUT "Linking shared image '+imagespec+'"')
    writes(comfile,'$ !')

    ;;Link command

    display(comfile,'$ LINK/SHARE='+imagespec)

    ;;Map file?

    if (mapFile)
    begin
        display(comfile,'/MAP='+libname)
        if (exesuffix.Length)
            display(comfile,exesuffix)
        display(comfile,'.MAP')
    end

    ;;Input items

    writes(comfile,' SYS$INPUT/OPTION')

    writes(comfile,'!')
    writes(comfile,libspec+'/LIBRARY')

    if (otherImages.Count)
    begin
        for ix from 0 thru otherImages.Count -1
            writes(comfile,(string)otherImages[ix])
    end

    if (debugSupport)
        writes(comfile,'DBLDIR:elb.obj')

    if (linksql)
        writes(comfile,'SSQLRTL/SHARE')

    if (linktk)
        writes(comfile,'TKLIB_SH/SHARE')

    writes(comfile,'SYNRTL/SHARE')
    writes(comfile,'DBLTLIB/LIBRARY')
    writes(comfile,'!')

    ;;Collects and clusters

    writes(comfile,'CLUSTER = ' + libname + '_STATIC_RECORDS')
    writes(comfile,'COLLECT = ' + libname + '_STATIC_RECORDS, $DBL_STCREC')
    writes(comfile,'CLUSTER = ' + libname + '_LOCAL_DATA')
    writes(comfile,'COLLECT = ' + libname + '_LOCAL DATA,$DBL_DATA,$LOCAL,$DATA')
    writes(comfile,'CLUSTER = ' + libname + '_ADDRESS')
    writes(comfile,'COLLECT = ' + libname + '_ADDRESS,$DBL_DESCR,$DBL_FXDCTL,$EXT$,$LINK$')
    writes(comfile,'CLUSTER = ' + libname + '$$READONLY')
    writes(comfile,'COLLECT = ' + libname + '$$READONLY,$CODE$,$DBLTRNSF_CODE')
    writes(comfile,'CLUSTER = ' + libname + '$$CODE')
    writes(comfile,'COLLECT = ' + libname + '$$CODE,$DBG$,$DBL_ADDR,$DBL_CODE,$DBL_LINCTL,$DBL_LITERAL')
    writes(comfile,'!')

    if (datasections.Count)
    begin
        writes(comfile,'! Collect shared data')
        writes(comfile,'!')
        writes(comfile,'CLUSTER = ' + libname + '_SHARED_DATA')
        writes(comfile,'COLLECT = ' + libname + '_SHARED_DATA, -')
        for ix from 0 thru datasections.Count-1
        begin
            display(comfile,'   ' + (a)datasections[ix])
            if (ix<datasections.Count-1) then
                writes(comfile,",-")
            else
                writes(comfile,"")
        end
        writes(comfile,'!')
    end

    ;;Symbol vector

    writes(comfile,'symbol_vector=(-')

    if (debugSupport)
    begin
        writes(comfile,'    !')
        writes(comfile,'    ! Debugging support')
        writes(comfile,'    !')
        writes(comfile,"    $ELB_DBG=data, -")
    end

    if (datasections.Count)
    begin
        writes(comfile,'    !')
        writes(comfile,'    ! Shared data')
        writes(comfile,'    !')

        for ix from 0 thru datasections.Count-1
            writes(comfile,'    ' + (a)datasections[ix] + ' = data,-')

        if (spare_data)
            for ix from 1 thru spare_data
                writes(comfile,'    SPARE,-')
    end

    writes(comfile,'    !')
    writes(comfile,'    ! Procedures')
    writes(comfile,'    !')

    for ix from 0 thru routines.Count-1
    begin
        display(comfile,'    '+(a)routines[ix]+' = procedure')
        if (ix<routines.Count-1) then
            writes(comfile,',-')
        else
        begin
            if (spare_routines) then
                writes(comfile,',-')
            else
                writes(comfile,')')
        end
    end

    if (spare_routines)
    begin
        for ix from 1 thru spare_routines
        begin
            display(comfile,'    SPARE')
            if (ix<spare_routines) then
                writes(comfile,',-')
            else
                writes(comfile,')')
        end
    end

    ;;All done

    writes(comfile,'$ !')
    writes(comfile,'$ EXIT')
    writes(comfile,'$ !')

    close comfile

    if (!quiet)
        writes(tt,"Created "+libname+".COM")

    return

;;-----------------------------------------------------------------------------
;;Report utility usage information
;;
usage,
    writes(tt,"MAKESHARE")
    writes(tt,"")
    writes(tt,"  This utility must be executed via a global symbol:")
    writes(tt,"    $ MAKESHARE:==$DISK:[DIRECTORY]MAKESHARE.EXE")
    writes(tt,"")
    writes(tt,"  Usage:")
    writes(tt,"    $ MAKESHARE -l <library> [-e <location>] [-s <suffix>] [-q]")
    writes(tt,"                             [-m] [-sql] [-sd <n>] [-sp <n>]")
    writes(tt,"")
    writes(tt,"    -l <library>     The name of the object library to create a shared image")
    writes(tt,"                     from. Disk and directory names, and logical names may be")
    writes(tt,"                     used.")
    writes(tt,"")
    writes(tt,"    -e <location>    Specifies a location in which to create the shared image")
    writes(tt,"                     executable. Specify a directory or logical name including")
    writes(tt,"                     a colon.")
    writes(tt,"")
    writes(tt,"    -s <suffix>      Specifies a suffix for the shared image executable name")
    writes(tt,"")
    writes(tt,"    -xd              Add support for xfServerPlus debugging")
    writes(tt,"")
    writes(tt,"    -m               Generate a linker map file")
    writes(tt,"")
    writes(tt,"    -sql             Link against the SQL Connection shared image")
    writes(tt,"")
    writes(tt,"    -tk              Link against the UI Toolkit shared image")
    writes(tt,"")
    writes(tt,"    -si <image> ...  Link against other shared image(s)")
    writes(tt,"")
    writes(tt,"    -sd <n>          Include n spare symbol vector positions for data")
    writes(tt,"")
    writes(tt,"    -sp <n>          Include n spare symbol vector positions for procedures")
    writes(tt,"")
    writes(tt,"    -q               Quiet mode, don't display file created message")
    writes(tt,"")
    writes(tt,"  Examples:")
    writes(tt,"")
    writes(tt,"    $ makeshare -l MYLIB.OLB")
    writes(tt,"")
    writes(tt,"         Creates a command procedure named MYLIB.COM which can be used to link")
    writes(tt,"         a shared image named MYLIB.EXE. The object library must be in the")
    writes(tt,"         current directory, and the resulting command procedure and shared image")
    writes(tt,"         will also be created in the current directory. No linker map file will")
    writes(tt,"         be created, and there will be no spare slots in the symbol vector for")
    writes(tt,"         either data or procedures.")
    writes(tt,"")
    writes(tt,"    $ makeshare -l LIB:MYLIB.OLB -e EXE: -s _SH -sql -sd 10 -sp 100 -m")
    writes(tt,"")
    writes(tt,"         Creates a command procedure named MYLIB.COM which can be used to link")
    writes(tt,"         a shared image named EXE:MYLIB_SH.EXE. The object library will be")
    writes(tt,"         located in the directory referenced by the LIB: logical name. The")
    writes(tt,"         shared image will be created in the directory referenced by the EXE:")
    writes(tt,"         logical name, and its name will be suffixed with _SH. The resulting")
    writes(tt,"         shared image will be linked against the SQL Connection API shared image")
    writes(tt,"         and will have 10 spare slots in the symbol vector for additional data")
    writes(tt,"         items and 100 spare slots for additional procedures. A linker map file")
    writes(tt,"         named MYLIB_SH.MAP will be created in the current directory.")

    return

endmain

;;=============================================================================
;;Command-line parameter processing
;;
function CommandLine, boolean

    required in  a_opt          ,a      ;;Option string
    optional in  a_maxoptvals   ,n      ;;Maximum argument to return
    optional out a_optvals      ,[*]a   ;;Option arguments
    optional out a_numoptvals   ,n      ;;Number of argument
    endparams

    .define MAXARGS 128

    record local_data
        fstatus         ,boolean, false ;;Function return status
        maxopts         ,i4             ;;Maximum number of options
        maxoptvals      ,i4             ;;Maximum number of options requested
        numoptvals      ,i4             ;;Number of options found
        ctr             ,i4             ;;Counter
        length          ,i4             ;;Length
        num_args        ,i4
        arg_pos         ,[MAXARGS] i4
        arg_len         ,[MAXARGS] i4
        command         ,a1024
        opt_char        ,a1
        option          ,a255
    endrecord

proc

    init local_data

    if (^passed(a_maxoptvals)&&^passed(a_optvals))
        maxoptvals = a_maxoptvals

    if (%option(34)) then
        opt_char = '/'
    else
        opt_char = '-'

    cmdln(command, maxopts, arg_pos, arg_len)

    for ctr from 1 thru maxopts
    begin
        if (arg_pos[ctr]&&arg_len[ctr]) then
            option = command(arg_pos[ctr]:arg_len[ctr])
        else
            clear option

        ;;Is this the requested option?
        .ifdef OS_VMS
        ;;On OpenVMS prior to V7.2, command lines were parsed as upper case.
        ;;After 7.2 they can be optionally parsed case-preserved.  This is
        ;;based on a process setting $SET PROCESS/PARSE_STYLE=TRADITIONAL|EXTENDED.
        ;;CodeGen required TRADITIONAL command-line parsing to be used.
        if (option==opt_char+UpperCase(a_opt))
        .else
        if (option==opt_char+a_opt)
        .endc
            call process_argument
    end

    if (^passed(a_numoptvals))
        a_numoptvals = num_args

    freturn fstatus


process_argument,

        ;;Found requested option
        fstatus = true

        ;;Process next argument
        ctr += 1

        if (arg_pos[ctr]&&arg_len[ctr]) then
            option = command(arg_pos[ctr]:arg_len[ctr])
        else
            option = opt_char

        while(option!=opt_char)
        begin
            num_args+=1
            if (num_args<=maxoptvals)
            begin
                ;;Strip leading and trailing quote characters
                using option select
                ("'", '"'),
                begin
                    length = trimz(option)
                    if ((length>1)&&(option(length:1)==option(1:1)))
                    begin
                        if (length>2) then
                            option = option(2, length-1)
                        else
                            clear option
                    end
                end
                endusing
                a_optvals[num_args] = option
            end

            ;;Process next argument
            ctr+=1

            if (arg_pos[ctr]&&arg_len[ctr]) then
                option = command(arg_pos[ctr]:arg_len[ctr])
            else
                option = opt_char
          end

        ;;Adjust counter to stay in correct position in loop
        ctr -= 1
        return

endfunction

;;=============================================================================
;;Return an uppercase version of a string
;;
function UpperCase, @String

    required in a_string, a
    endparams

    stack record
        outstring, i4
    endrecord

proc

    outstring = %mem_proc(DM_ALLOC,^size(a_string))

    ^m(outstring) = a_string
    upcase ^m(outstring)

    freturn ^m(outstring)

endfunction
