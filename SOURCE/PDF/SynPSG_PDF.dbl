;;*****************************************************************************
;;
;; File:        SynPSG.PDF.dbl
;;
;; Title:       Synergex PSG PDF API
;;
;; Type:        Class
;;
;; Description: Provides the ability to create a PDF file. This class provides
;;              a more usable wrapper around the underlying functionality that
;;              is defined in the Synergy/DE CodeExchange item named "pdfkit",
;;              which in turn provides a DBL wrapper around the open source
;;              "libHaru" PDF library.
;;
;;              In order to use this class and other related classes you must:
;;
;;              1. Include the "pdfkit" source code in the same library as this
;;                 class by including the source file pdfdbl.db in your build.
;;
;;              2. Deploy the libHaru DLL's that are distributed with "pdfkit"
;;                 by copying them to your dbl\bin folder.
;;
;; Date:        19th July 2015
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2015, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import HPdf
import System
import System.Collections

namespace SynPSG.PDF

    ;;; <summary>
    ;;; Provides the ability to create a PDF file. This class provides a more
    ;;; usable wrapper around the underlying functionality defined in the
    ;;; "pdfkit" item from the Synergy/DE CodeExchange
    ;;; </summary>
    public partial class PdfFile

        ;;*********************************************************************
        ;;PRIVATE DATA

        private doc,                            @HPdfDoc
        private fontNormal,                     @HPdfFont
        private fontBold,                       @HPdfFont
        private fontItalic,                     @HPdfFont
        private fontBoldItalic,                 @HPdfFont
        private pg,                             @HpdfPage
        private ol,                             @HPdfOutline

        private leftOffset,                     float   ;Pixels left margin
        private topOffset,                      float   ;Pixels top margin
        private rightOffset,                    float   ;Pixels right margin
        private bottomOffset,                   float   ;Pixels bottom margin

        private requestedLeftMargin,            float
        private requestedTopMargin,             float
        private requestedRightMargin,           float
        private requestedBottomMargin,          float

        private totalHeightDefaultOrientation,  float
        private totalHeightOtherOrientation,    float

        private totalWidthDefaultOrientation,   float
        private totalWidthOtherOrientation,     float

        private totalRowsDefaultOrientation,    int     ;Total rows for entire page (default orientation)
        private totalColsDefaultOrientation,    int     ;Total cols for entire page (default orientation)

        private totalRowsOtherOrientation,      int     ;Total rows for entire page (other orientation)
        private totalColsOtherOrientation,      int     ;Total cols for entire page (other orientation)

        private maxFontSize,                    int

        ;;*********************************************************************
        ;;CONSTRUCTORS

        ;;; <summary>
        ;;; Constructs a new PdfFile object.
        ;;; </summary>
        ;;; <param name="aTextFile">Text file to automatically load into the PDF file.</param>
        ;;; <param name="aPageSize">Size of pages in the document.</param>
        ;;; <param name="aOrientation">Default orientation of pages, portrait or landscape.</param>
        ;;; <param name="aMaxFontSize">The maximum font size to be selected. If a larger font size is calculated then this size will be used instead.</param>
        ;;; <param name="aCenterBodyInPage">Should the body be centered horizontally in the page? Pass false to disable this functionality.</param>
        ;;; <param name="aLeftMargin">Establishes a left margin for the pages of the document. The value is specified in inches. If you don't specify a left margin then a default value of 0.16 inches will be used. If you don't want any margin then specify a value of 0.</param>
        ;;; <param name="aTopMargin">Establishes a top margin for the pages of the document. The value is specified in inches. If you don't specify a left margin then a default value of 0.16 inches will be used. If you don't want any margin then specify a value of 0.</param>
        ;;; <param name="aRightMargin">Establishes a right margin for the pages of the document. The value is specified in inches. If you don't specify a left margin then a default value of 0.16 inches will be used. If you don't want any margin then specify a value of 0.</param>
        ;;; <param name="aBottomMargin">Establishes a bottom margin for the pages of the document. The value is specified in inches. If you don't specify a left margin then a default value of 0.16 inches will be used. If you don't want any margin then specify a value of 0.</param>
        ;;; <param name="aFileLocation">The location where the PDF file should be created. Logical names are allowed. The default is TEMP:.</param>
        ;;; <param name="aPartialFileName">Words to be included in the file name. Don't use characters that are not valid in file specifications.</param>
        ;;; <param name="aBackgroundColor">Establishes a custom page background color and implements that color on the first page. The default page background color is white.</param>
        public method PdfFile
.ifdef DBLNET
            required in aTextFile,          string
            default  in aPageSize,          PdfPageSize,     PdfPageSize.LETTER
            default  in aOrientation,       PdfOrientation,  PdfOrientation.Portrait
            default  in aMaxFontSize,       int,             0
            default  in aCenterBodyInPage,  boolean,         true
            default  in aLeftMargin,        float,           0.16
            default  in aTopMargin,         float,           0.16
            default  in aRightMargin,       float,           0.16
            default  in aBottomMargin,      float,           0.16
            default  in aFileLocation,      string,          ""
            default  in aPartialFileName,   string,          ""
            default  in aBackgroundColor,   PdfColor,        PdfColor.White
            default  in aExtraRowSpacing,   float,           0
.else
            required in aTextFile,          string
            optional in aPageSize,          PdfPageSize
            optional in aOrientation,       PdfOrientation
            optional in aMaxFontSize,       int
            optional in aCenterBodyInPage,  boolean
            optional in aLeftMargin,        float
            optional in aTopMargin,         float
            optional in aRightMargin,       float
            optional in aBottomMargin,      float
            optional in aFileLocation,      string
            optional in aPartialFileName,   string
            optional in aBackgroundColor,   PdfColor
            optional in aExtraRowSpacing,   float
.endc
            endparams

            record
                inFile,                     string
                fileData,                   @ArrayList
                ch,                         i4
                pos,                        i4
                maxLength,                  int
                tmpBuf,                     a512
                spaces,                     a^size(tmpBuf)
                length,                     int
                row,                        string
                continue,                   boolean
            endrecord

        proc

            init spaces

            inFile = aTextFile.Trim()

            if (inFile.Length==0)
                throw new ApplicationException("No text file was passed!")

            if (!fileExists(inFile))
                throw new ApplicationException("File " + inFile + " was not found!")

            open(ch=0,i:s,inFile)

            fileData = new ArrayList()

            maxLength = 0
            continue = false
            row = ""

            repeat
            begin
                reads(ch,tmpBuf,eof)

                ;;Was the READS terminated by a <FF>?
                if (%rterm==12)
                begin
                    if (length = %rdlen)
                        row = row + tmpBuf(1,length)
                    row = row + %char(12)
                    continue = true
                    nextloop
                end

                length = %rdlen

                if (continue) then
                begin
                    if (length)
                        row = row + tmpBuf(1,length)
                    length = row.Length
                end
                else
                    row = tmpBuf

                ;;Are there any <TAB> characters in the line that was read?
                while (pos=%instr(1,row,%char(9)))
                begin
                    data newbuf, string, ""
                    ;;Any data before the <TAB>?
                    if (pos>1)
                        newbuf = row(1,pos-1)
                    ;;Process the <TAB>
                    newbuf = newbuf + "        "
                    ;;Any data after the tab?
                    if (pos<row.Length)
                        newbuf = newbuf + row(pos+1,row.Length)
                    row = newbuf
                    length += 7
                end

                ;;Is this is the longest record we have encountered?
                if (length>maxLength)
                    maxLength = length

                ;;Record the data
                if (length) then
                    fileData.Add((string)row)
                else
                    fileData.Add((string)"")


                row = ""
                continue = false

            end
eof,
            close ch

            initialize(aPageSize,aOrientation,maxLength,aMaxFontSize,aCenterBodyInPage,aLeftMargin,aTopMargin,aRightMargin,aBottomMargin,0,0,aFileLocation,aPartialFileName,aBackgroundColor,aExtraRowSpacing)

            foreach row in fileData
            begin
                ;;Process any <FF> (12) characters
                while (pos=%instr(1,row,%char(12)))
                begin
                    ;;Process data before the <FF>
                    if (pos>1) then
                    begin
                        DrawTextRC(row(1:pos-1))
                        if (pos<row.Length) then
                            row = row(pos+1,row.Length)
                        else
                            row = "~~SKIPIT~~"
                    end
                    else
                    begin
                        if (row.Length>1) then
                            row = row(2,row.Length)
                        else
                            row = "~~SKIPIT~~"
                    end

                    ;;Process the <FF> and go again
                    NewPage()
                end

                if (row!="~~SKIPIT~~")
                    DrawTextRC(row,,,,,,true)
            end

        endmethod

        ;;; <summary>
        ;;; Constructs a new PdfFile object.
        ;;; </summary>
        ;;; <param name="aPageSize">Size of pages in the document.</param>
        ;;; <param name="aOrientation">Default orientation of pages, portrait or landscape.</param>
        ;;; <param name="aMinimumColumns">The minimum number of columns that the report body must include.</param>
        ;;; <param name="aMaxFontSize">The maximum font size to be selected. If a larger font size is calculated then this size will be used instead.</param>
        ;;; <param name="aCenterBodyInPage">Should the body be centered horizontally in the page? Pass false to disable this functionality.</param>
        ;;; <param name="aLeftMargin">Establishes a left margin for the pages of the document. The value is specified in inches. If you don't specify a left margin then a default value of 0.16 inches will be used. If you don't want any margin then specify a value of 0.</param>
        ;;; <param name="aTopMargin">Establishes a top margin for the pages of the document. The value is specified in inches. If you don't specify a left margin then a default value of 0.16 inches will be used. If you don't want any margin then specify a value of 0.</param>
        ;;; <param name="aRightMargin">Establishes a right margin for the pages of the document. The value is specified in inches. If you don't specify a left margin then a default value of 0.16 inches will be used. If you don't want any margin then specify a value of 0.</param>
        ;;; <param name="aBottomMargin">Establishes a bottom margin for the pages of the document. The value is specified in inches. If you don't specify a left margin then a default value of 0.16 inches will be used. If you don't want any margin then specify a value of 0.</param>
        ;;; <param name="aHeaderRows">Establishes the number of header rows that are to be allocated on each page of the document. Header rows are displayed below the top margin and above the main body of each page of the document.</param>
        ;;; <param name="aFooterRows">Establishes the number of footer rows that are to be allocated on each page of the document. Footer rows are displayed below main body and above the bottom margin of each page of the document.</param>
        ;;; <param name="aFileLocation">The location where the PDF file should be created. Logical names are allowed. The default is TEMP:.</param>
        ;;; <param name="aPartialFileName">Words to be included in the file name. Don't use characters that are not valid in file specifications.</param>
        ;;; <param name="aBackgroundColor">Establishes a custom page background color and implements that color on the first page. The default page background color is white.</param>
        public method PdfFile
.ifdef DBLNET
            default in aPageSize,          PdfPageSize,     PdfPageSize.LETTER
            default in aOrientation,       PdfOrientation,  PdfOrientation.Portrait
            default in aMinimumColumns,    int,             80
            default in aMaxFontSize,       int,             0
            default in aCenterBodyInPage,  boolean,         true
            default in aLeftMargin,        float,           0.16
            default in aTopMargin,         float,           0.16
            default in aRightMargin,       float,           0.16
            default in aBottomMargin,      float,           0.16
            default in aHeaderRows,        int,             0
            default in aFooterRows,        int,             0
            default in aFileLocation,      string,          ""
            default in aPartialFileName,   string,          ""
            default in aBackgroundColor,   PdfColor,        PdfColor.White
            default in aExtraRowSpacing,   float,           0
.else
            optional in aPageSize,          PdfPageSize
            optional in aOrientation,       PdfOrientation
            optional in aMinimumColumns,    int
            optional in aMaxFontSize,       int
            optional in aCenterBodyInPage,  boolean
            optional in aLeftMargin,        float
            optional in aTopMargin,         float
            optional in aRightMargin,       float
            optional in aBottomMargin,      float
            optional in aHeaderRows,        int
            optional in aFooterRows,        int
            optional in aFileLocation,      string
            optional in aPartialFileName,   string
            optional in aBackgroundColor,   PdfColor
            optional in aExtraRowSpacing,   float
.endc
            endparams
        proc
            initialize(aPageSize,aOrientation,aMinimumColumns,aMaxFontSize,aCenterBodyInPage,aLeftMargin,aTopMargin,aRightMargin,aBottomMargin,aHeaderRows,aFooterRows,aFileLocation,aPartialFileName,aBackgroundColor,aExtraRowSpacing)
        endmethod

        ;;; <summary>
        ;;; Constructs a new PdfFile object.
        ;;; </summary>
        ;;; <param name="aPageSize">Size of pages in the document.</param>
        ;;; <param name="aOrientation">Default orientation of pages, portrait or landscape.</param>
        ;;; <param name="aMinimumColumns">The minimum number of columns that the report body must include.</param>
        ;;; <param name="aMaxFontSize">The maximum font size to be selected. If a larger font size is calculated then this size will be used instead.</param>
        ;;; <param name="aCenterBodyInPage">Should the body be centered horizontally in the page? Pass false to disable this functionality.</param>
        ;;; <param name="aLeftMargin">Establishes a left margin for the pages of the document. The value is specified in inches. If you don't specify a left margin then a default value of 0.16 inches will be used. If you don't want any margin then specify a value of 0.</param>
        ;;; <param name="aTopMargin">Establishes a top margin for the pages of the document. The value is specified in inches. If you don't specify a left margin then a default value of 0.16 inches will be used. If you don't want any margin then specify a value of 0.</param>
        ;;; <param name="aRightMargin">Establishes a right margin for the pages of the document. The value is specified in inches. If you don't specify a left margin then a default value of 0.16 inches will be used. If you don't want any margin then specify a value of 0.</param>
        ;;; <param name="aBottomMargin">Establishes a bottom margin for the pages of the document. The value is specified in inches. If you don't specify a left margin then a default value of 0.16 inches will be used. If you don't want any margin then specify a value of 0.</param>
        ;;; <param name="aHeaderRows">Establishes the number of header rows that are to be allocated on each page of the document. Header rows are displayed below the top margin and above the main body of each page of the document.</param>
        ;;; <param name="aFooterRows">Establishes the number of footer rows that are to be allocated on each page of the document. Footer rows are displayed below main body and above the bottom margin of each page of the document.</param>
        ;;; <param name="aFileLocation">The location where the PDF file should be created. Logical names are allowed. The default is TEMP:.</param>
        ;;; <param name="aPartialFileName">Words to be included in the file name. Don't use characters that are not valid in file specifications.</param>
        ;;; <param name="aBackgroundColor">Establishes a custom page background color and implements that color on the first page. The default page background color is white.</param>
        private method initialize, void
.ifdef DBLNET
            default in aPageSize,          PdfPageSize,     PdfPageSize.LETTER
            default in aOrientation,       PdfOrientation,  PdfOrientation.Portrait
            default in aMinimumColumns,    int,             80
            default in aMaxFontSize,       int,             0
            default in aCenterBodyInPage,  boolean,         true
            default in aLeftMargin,        float,           0.16
            default in aTopMargin,         float,           0.16
            default in aRightMargin,       float,           0.16
            default in aBottomMargin,      float,           0.16
            default in aHeaderRows,        int,             0
            default in aFooterRows,        int,             0
            default in aFileLocation,      string,          ""
            default in aPartialFileName,   string,          ""
            default in aBackgroundColor,   PdfColor,        PdfColor.White
            default in aExtraRowSpacing,   float,           0
.else
            optional in aPageSize,          PdfPageSize
            optional in aOrientation,       PdfOrientation
            optional in aMinimumColumns,    int
            optional in aMaxFontSize,       int
            optional in aCenterBodyInPage,  boolean
            optional in aLeftMargin,        float
            optional in aTopMargin,         float
            optional in aRightMargin,       float
            optional in aBottomMargin,      float
            optional in aHeaderRows,        int
            optional in aFooterRows,        int
            optional in aFileLocation,      string
            optional in aPartialFileName,   string
            optional in aBackgroundColor,   PdfColor
            optional in aExtraRowSpacing,   float
.endc
            endparams

            record
                ok,       boolean
                attempts, int
            endrecord

        proc

            ;;-----------------------------------------------------------------
            ;;Original constructor code

            ;;Set page orientation
.ifdef DBLNET
            this.PageSize = aPageSize
.else
            if (^passed(aPageSize)) then
                this.PageSize = aPageSize
            else
                this.PageSize = PdfPageSize.LETTER
.endc

            ;;Set default page orientation
.ifdef DBLNET
            this.DefaultOrientation = aOrientation
.else
            if (^passed(aOrientation)) then
                this.DefaultOrientation = aOrientation
            else
                this.DefaultOrientation = PdfOrientation.Portrait
.endc

            ;;Create a new PDF document
            doc = new HPdfDoc()

            ;;Set the document compression mode
            doc.SetCompressionMode(HPdfDoc.HPDF_COMP_ALL)

            ;;Populate the list of available fonts
            mAvailableFonts = new ArrayList()
            mAvailableFonts.Add((string)"Courier")
            mAvailableFonts.Add((string)"Courier-Bold")
            mAvailableFonts.Add((string)"Courier-Oblique")
            mAvailableFonts.Add((string)"Courier-BoldOblique")
            mAvailableFonts.Add((string)"Helvetica")
            mAvailableFonts.Add((string)"Helvetica-Bold")
            mAvailableFonts.Add((string)"Helvetica-Oblique")
            mAvailableFonts.Add((string)"Helvetica-BoldOblique")
            mAvailableFonts.Add((string)"Times-Roman")
            mAvailableFonts.Add((string)"Times-Bold")
            mAvailableFonts.Add((string)"Times-Italic")
            mAvailableFonts.Add((string)"Times-BoldItalic")
            mAvailableFonts.Add((string)"Symbol")
            mAvailableFonts.Add((string)"ZapfDingbats")

            ;;Load the fonts we'll be use by default
            fontNormal = doc.GetFont("Courier", ^null)
            fontBold = doc.GetFont("Courier-Bold", ^null)
            fontItalic = doc.GetFont("Courier-Oblique", ^null)
            fontBoldItalic = doc.GetFont("Courier-BoldOblique", ^null)

            ;;Start the first page
            pg = doc.AddPage(
            &   (HPdfPageSizes)this.PageSize,
            &   (HPdfPageDirection)this.DefaultOrientation)
            this.Orientation = this.DefaultOrientation

            ;;Get the pixel dimensions of the page
            totalHeightDefaultOrientation = %integer(pg.GetHeight())
            totalWidthDefaultOrientation = %integer(pg.GetWidth())
            totalHeightOtherOrientation = totalWidthDefaultOrientation
            totalWidthOtherOrientation = totalHeightDefaultOrientation

            this.Height = totalHeightDefaultOrientation
            this.Width = totalWidthDefaultOrientation

            ;;Left margin
.ifdef DBLNET
            if (aLeftMargin >= 0) then
.else
            if (^passed(aLeftMargin) && (aLeftMargin >= 0)) then
.endc
            begin
                requestedLeftMargin = aLeftMargin
                this.LeftMargin = aLeftMargin
            end
            else
            begin
                requestedLeftMargin = 0
                this.LeftMargin = 0.16
            end

            ;;Top margin
.ifdef DBLNET
            if (aTopMargin >= 0) then
.else
            if (^passed(aTopMargin) && (aTopMargin >= 0)) then
.endc
            begin
                requestedTopMargin = aTopMargin
                this.TopMargin = aTopMargin
            end
            else
            begin
                requestedTopMargin = 0
                this.TopMargin = 0.16
            end

            ;;Right margin
.ifdef DBLNET
            if (aRightMargin >= 0) then
.else
            if (^passed(aRightMargin) && (aRightMargin >= 0)) then
.endc
            begin
                requestedRightMargin = aRightMargin
                this.RightMargin = aRightMargin
            end
            else
            begin
                requestedRightMargin = 0
                this.RightMargin = 0.16
            end

            ;;Bottom margin
.ifdef DBLNET
            if (aBottomMargin>=0) then
.else
            if (^passed(aBottomMargin) && (aBottomMargin>=0)) then
.endc
            begin
                requestedBottomMargin = aBottomMargin
                this.BottomMargin = aBottomMargin
            end
            else
            begin
                requestedBottomMargin = 0
                this.BottomMargin = 0.16
            end

            ;;Start with a "normal" font size
            this.FontSize = 12

            ;;Start a text writer with the current font and size
            pg.StartPageWithFont(fontNormal,fontSizeFloat)

            ;;Record the current font being used
            SelectFont(fontNormal.GetFontName(),this.FontSize)

            ;;Enure text drawn as solid letters, not outline with seperate fill
            pg.SetTextRenderingMode(HPdfTextRenderingMode.HPDF_FILL)

            ;;Were we asked to add extra spacing between rows?
            this.ExtraRowSpacing = 0
.ifdef DBLNET
            if (aExtraRowSpacing > 0)
.else
            if (^passed(aExtraRowSpacing) && (aExtraRowSpacing > 0))
.endc
            this.ExtraRowSpacing = aExtraRowSpacing

            ;;Calculate page dimensions in rows/columns based on current font
            this.RowHeight = fontSizeFloat + this.ExtraRowSpacing
            this.ColumnWidth = pg.TextWidth("W")

            totalRowsDefaultOrientation = %truncate((this.Height-topOffset-bottomOffset)/this.RowHeight)
            totalColsDefaultOrientation = (int)%truncate((this.Width-leftOffset-rightOffset)/this.ColumnWidth)

            totalRowsOtherOrientation = %truncate((this.Width-topOffset-bottomOffset)/this.RowHeight)
            totalColsOtherOrientation = (int)%truncate((this.Height-leftOffset-rightOffset)/this.ColumnWidth)

            ;;Close page for now, not sure if we'll need text or graphics first
            pg.EndText()

            ;;Were header rows requested?
.ifdef DBLNET
            if (aHeaderRows>0)
.else
            if (^passed(aHeaderRows) && (aHeaderRows>0))
.endc
            begin
                data ix, int
                this.HeaderRows = aHeaderRows
                this.HeaderText = new string[this.HeaderRows]
                for ix from 1 thru this.HeaderRows
                    this.HeaderText[ix] = ""
            end

            ;;Were footer rows requested?
.ifdef DBLNET
            if (aFooterRows>0)
.else
            if (^passed(aFooterRows) && (aFooterRows>0))
.endc
            begin
                data ix, int
                this.FooterRows = aFooterRows
                this.FooterText = new string[this.FooterRows]
                for ix from 1 thru this.FooterRows
                    this.FooterText[ix] = ""
            end

            ;;Set the body dimensions for the default orientation
            this.Rows = totalRowsDefaultOrientation - this.HeaderRows - this.FooterRows
            this.Columns = totalColsDefaultOrientation

            ;;Set the default colors to black
            this.StrokeColor = PdfColor.Black
            this.FillColor = PdfColor.Black
            this.BackgroundColor = PdfColor.White

            ;;Create the auto items collection
            this.AutoItems = new ArrayList()

            ;;If we were given a custom backgound color then save it
.ifdef DBLNET
            if (aBackgroundColor != BackgroundColor)
.else
            if (^passed(aBackgroundColor) && (aBackgroundColor != BackgroundColor))
.endc
            begin
                BackgroundColor = aBackgroundColor
                ;;And use it for the first page
                setBackroundColor()
            end

            ;Set the default creator name
            this.Creator = "Synergex PSG PdfFile Class"

            ;;-----------------------------------------------------------------
            ;;Original Initialize code

            ;;Define the output file location
.ifdef DBLNET
            if (!String.IsNullOrWhiteSpace(aFileLocation)) then
.else
            if (^passed(aFileLocation) && (aFileLocation.Trim().Length > 0)) then
.endc
            begin
                this.FileLocation = expandLogicalInFileSpec(aFileLocation)
                if (this.FileLocation == %char(0)) then
                    throw new ApplicationException("Invalid location " + aFileLocation)
                else
                begin
.ifdef D_GUI
                    if (!this.FileLocation.Trim().EndsWith("\"))
                        this.FileLocation = this.FileLocation.Trim() + "\"
.else
.ifdef OS_VMS
.else
                    if (!this.FileLocation.Trim().EndsWith("/"))
                        this.FileLocation = this.FileLocation.Trim() + "/"
.endc
.endc
                end
            end
            else
            begin
                ;;No file location passed
.ifdef D_GUI
                ;;Windows. Make sure the path ends with a \
                this.FileLocation = expandLogicalInFileSpec("TEMP:")
                if (!this.FileLocation.Trim().EndsWith("\"))
                    this.FileLocation = this.FileLocation.Trim() + "\"
.else
.ifdef OS_VMS
                ;;VMS. Nothing to do.
                this.FileLocation = "SYS$DISK:"
.else
                ;;Unix/Linux. Make sure the path ends with a /
                this.FileLocation = "./"
.endc
.endc
            end

            ;;Make sure the output file location exists
            if (!directoryExists(this.FileLocation))
                throw new ApplicationException("Destination folder " + this.FileLocation + " does not exist!")

            ;;Define the output file name
            attempts = 0
            repeat
            begin
                ;;Construct the file name
.ifdef DBLNET
                if (!String.IsNullOrWhiteSpace(aPartialFileName)) then
.else
                if (^passed(aPartialFileName) && (aPartialFileName.Trim().Length > 0)) then
.endc
                this.FileName = getTempFilePrefix() + " " + aPartialFileName.Trim() + ".pdf"
                else
                    this.FileName = getTempFilePrefix() + ".pdf"

                ;;Make sure the file doesn't already exist
                if (fileExists(this.FileLocation + this.FileName)) then
                begin
                    if ((attempts+=1)>5)
                        throw new ApplicationException("Failed to construct unique output file name!")
                    sleep 1.1
                end
                else
                    exitloop
            end

            ;;Are we going to center the body at the requested with within the
            ;;page by manipulating the left and right margins
.ifdef DBLNET
            this.CenterBodyInPage = aCenterBodyInPage
.else
            if (^passed(aCenterBodyInPage)) then
                this.CenterBodyInPage = aCenterBodyInPage
            else
                this.CenterBodyInPage = true
.endc

            ;;Save the number of requested minimum columns
.ifdef DBLNET
            this.RequestedColumns = aMinimumColumns
.else
            if (^passed(aMinimumColumns) && aMinimumColumns) then
                this.RequestedColumns = aMinimumColumns
            else
                this.RequestedColumns = 80
.endc

            ok = false

            if (this.Columns < this.RequestedColumns) then
            begin
                ;;Not enough columns, decrease the font size until we get a match
                data newFontSize, int
                for newFontSize from mFontSize-1 thru 6 by -1
                begin
                    FontSize = newFontSize
                    pg.SetFontAndSize(fontNormal,fontSizeFloat)
                    this.ColumnWidth = pg.TextWidth("W")
                    totalColsDefaultOrientation = (int)%truncate((this.Width-leftOffset-rightOffset)/this.ColumnWidth)
                    totalColsOtherOrientation = (int)%truncate((this.Height-leftOffset-rightOffset)/this.ColumnWidth)
                    this.Columns = totalColsDefaultOrientation
                    if (this.Columns >= this.RequestedColumns)
                    begin
                        ok = true
                        exitloop
                    end
                end
            end
            else if (this.Columns > this.RequestedColumns) then
            begin
                ;;Too many columns, increase the font size until we have gone too far
                data newFontSize, int
                for newFontSize from mFontSize+1 thru 64
                begin
                    FontSize = newFontSize
                    pg.SetFontAndSize(fontNormal,fontSizeFloat)
                    this.ColumnWidth = pg.TextWidth("W")
                    totalColsDefaultOrientation = (int)%truncate((this.Width-leftOffset-rightOffset)/this.ColumnWidth)
                    totalColsOtherOrientation = (int)%truncate((this.Height-leftOffset-rightOffset)/this.ColumnWidth)
                    this.Columns = totalColsDefaultOrientation
                    if (this.Columns < this.RequestedColumns)
                    begin
                        ;;We went too far so back off to the previous font size
                        FontSize = mFontSize - 1
                        pg.SetFontAndSize(fontNormal,fontSizeFloat)
                        this.ColumnWidth = pg.TextWidth("W")
                        totalColsDefaultOrientation = (int)%truncate((this.Width-leftOffset-rightOffset)/this.ColumnWidth)
                        totalColsOtherOrientation = (int)%truncate((this.Height-leftOffset-rightOffset)/this.ColumnWidth)
                        this.Columns = totalColsDefaultOrientation
                        ok = true
                        exitloop
                    end
                end
            end
            else if (this.Columns == this.RequestedColumns)
            begin
                ;;Perfect match!
                ok = true
            end

            ;;If we were able to find a font size that provides the width that
            ;;we need then we can continue
            if (!ok)
            begin
                Dispose()
                throw new ApplicationException("Failed to select a font size to produce the requested results!")
            end

            ;;Were we given a maximum font size?
            maxFontSize = 0
.ifdef DBLNET
            if (aMaxFontSize>0)
.else
            if (^passed(aMaxFontSize) && (aMaxFontSize>0))
.endc
            begin
                maxFontSize = aMaxFontSize
                if (this.FontSize > maxFontSize)
                begin
                    ;;Selected font is bigger than maximum requested. Reduce to
                    ;;the requested size.
                    this.FontSize = maxFontSize
                    pg.SetFontAndSize(fontNormal,fontSizeFloat)
                    this.ColumnWidth = pg.TextWidth("W")
                    totalColsDefaultOrientation = (int)%truncate((this.Width-leftOffset-rightOffset)/this.ColumnWidth)
                    totalColsOtherOrientation = (int)%truncate((this.Height-leftOffset-rightOffset)/this.ColumnWidth)
                    this.Columns = totalColsDefaultOrientation
                end
            end

            ;;How many rows fit on the page at the selected font size?
            this.RowHeight = fontSizeFloat + this.ExtraRowSpacing

            totalRowsDefaultOrientation = %truncate((this.Height-topOffset-bottomOffset)/this.RowHeight)
            totalRowsOtherOrientation = %truncate((this.Width-topOffset-bottomOffset)/this.RowHeight)

            this.Rows = totalRowsDefaultOrientation - this.HeaderRows - this.FooterRows

            ;;If the page is wider than requested should we manipulate the
            ;;margins so the requested width is centered horizontally in the page?

            if ((this.Columns != this.RequestedColumns) && this.CenterBodyInPage)
            begin
                data additionalColumns, int, this.Columns - this.RequestedColumns
                data additionalPixels, int, additionalColumns * this.ColumnWidth

                ;;Divide the additional space between the left and right margins
                leftOffset += (additionalPixels / 2.0)
                rightOffset += (additionalPixels / 2.0)

                this.LeftMargin = leftOffset / 72.0
                this.RightMargin = rightOffset / 72.0

                totalColsDefaultOrientation = this.RequestedColumns
                totalColsOtherOrientation = (int)%truncate((this.Height-leftOffset-rightOffset)/this.ColumnWidth)
                this.Columns = totalColsDefaultOrientation
            end

            ;;Release the current doucment and start over with a new one. This
            ;;is done so that we start without a first page so that AutoItems
            ;;can be added.
            doc.FreeDoc()
            doc.NewDoc()

            ;;Reload the standard fonts so that their handles are valid with
            ;;the new document
            fontNormal = doc.GetFont("Courier", ^null)
            fontBold = doc.GetFont("Courier-Bold", ^null)
            fontItalic = doc.GetFont("Courier-Oblique", ^null)
            fontBoldItalic = doc.GetFont("Courier-BoldOblique", ^null)

            ;;Set the default outline root node text
            this.OutlineRootText = "Home"
            
        endmethod

        ;;*********************************************************************
        ;;PUBLIC METHODS

        ;----------------------------------------------------------------------
        ;;; <summary>
        ;;; Adds a design grid to all pages of the document (via the AutoItems collection).
        ;;; </summary>
        public method AddDesignGrid, void
            endparams
            record
                x, float
                y, float
            endrecord
        proc

            this.SelectFont("Helvetica",4)

            ;Draw horizontal 5 lines
            y = 0
            while ((y+=5)<=this.Height)
                this.AutoItems.Add(new AutoLineAbsolute(0,y,this.Width,y,0.1,PdfColor.LightGray))

            ;Draw horizontal 10 lines
            y = 0
            while ((y+=10)<=this.Height)
            begin
                this.AutoItems.Add(new AutoLineAbsolute(0,y,this.Width,y,0.5,PdfColor.LightGray))
                this.AutoItems.Add(new AutoTextAbsolute(%string(%integer(y)),0,y+1,PdfColor.Black,"Helvetica",4))
            end

            ;Draw horizontal 100 lines
            y = 0
            while ((y+=100)<=this.Height)
                this.AutoItems.Add(new AutoLineAbsolute(0,y,this.Width,y,0.5,PdfColor.DarkGray))

            ;Draw vertical 5 lines
            x = 0
            while ((x+=5)<=this.Height)
                this.AutoItems.Add(new AutoLineAbsolute(x,0,x,this.Height,0.1,PdfColor.LightGray))

            ;Draw vertical 10 lines
            x = 0
            while ((x+=10)<=this.Height)
            begin
                this.AutoItems.Add(new AutoLineAbsolute(x,0,x,this.Height,0.5,PdfColor.LightGray))
                this.AutoItems.Add(new AutoTextAbsolute(%string(%integer(x)),x,1,PdfColor.Black,"Helvetica",4))
            end

            ;Draw vertical 100 lines
            x = 0
            while ((x+=100)<=this.Height)
                this.AutoItems.Add(new AutoLineAbsolute(x,0,x,this.Height,0.5,PdfColor.DarkGray))

            this.ResetFont()

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Adds an information page to the PDF document
        ;;; </summary>
        public method AddInfoPage,      void
            endparams
        proc
            if (PageNumber==0)
                NewPage(PdfOrientation.Portrait)
            DrawTextRC("File spec             : " + this.FileLocation + this.FileName,,,,,,true)

            NewLine()
            DrawTextRC("Main Parameters",,,,,,true)
            NewLine()
            DrawTextRC(" - Paper size         : ")
            using this.PageSize select
            (PdfPageSize.LETTER),
                DrawTextRC("LETTER",,,,,,true)
            (PdfPageSize.LEGAL),
                DrawTextRC("LEGAL",,,,,,true)
            (PdfPageSize.A3),
                DrawTextRC("A3",,,,,,true)
            (PdfPageSize.A4),
                DrawTextRC("A4",,,,,,true)
            (PdfPageSize.A5),
                DrawTextRC("A5",,,,,,true)
            (PdfPageSize.B4),
                DrawTextRC("B4",,,,,,true)
            (PdfPageSize.B5),
                DrawTextRC("B5",,,,,,true)
            (PdfPageSize.EXECUTIVE),
                DrawTextRC("EXECUTIVE",,,,,,true)
            (PdfPageSize.US4x6),
                DrawTextRC("US 4 x 6",,,,,,true)
            (PdfPageSize.US4x8),
                DrawTextRC("US 4 x 8",,,,,,true)
            (PdfPageSize.US5x7),
                DrawTextRC("US 5 x 7",,,,,,true)
            (PdfPageSize.COMM10),
                DrawTextRC("COMM10",,,,,,true)
            endusing
            DrawTextRC(" - Orientation        : ")
            using (this.DefaultOrientation) select
            (PdfOrientation.Portrait),
                DrawTextRC("Portrait",,,,,,true)
            (PdfOrientation.Landscape),
                DrawTextRC("Landscape",,,,,,true)
            endusing
            DrawTextRC(" - Width              : " + %string(totalWidthDefaultOrientation,"XXXX.XX pixels"),,,,,,true)
            DrawTextRC(" - Height             : " + %string(totalHeightDefaultOrientation,"XXXX.XX pixels"),,,,,,true)
            DrawTextRC(" - Requested columns  : " + %string(this.RequestedColumns),,,,,,true)
            DrawTextRC(" - Max font size      : ")
            if (maxFontSize>0) then
                DrawTextRC(%string(maxFontSize),,,,,,true)
            else
                DrawTextRC("Not specified",,,,,,true)
            DrawTextRC(" - Center in page     : ")
            if (mCenterBodyInPage) then
                DrawTextRC("yes",,,,,,true)
            else
                DrawTextRC("no",,,,,,true)
            DrawTextRC(" - Left margin        : ")
            if (requestedLeftMargin>0) then
                DrawTextRC(%string(requestedLeftMargin,'XX.XXX"'),,,,,,true)
            else
                DrawTextRC("Not specified",,,,,,true)
            DrawTextRC(" - Top margin         : ")
            if (requestedTopMargin>0) then
                DrawTextRC(%string(requestedTopMargin,'XX.XXX"'),,,,,,true)
            else
                DrawTextRC("Not specified",,,,,,true)
            DrawTextRC(" - Right margin       : ")
            if (requestedRightMargin>0) then
                DrawTextRC(%string(requestedRightMargin,'XX.XXX"'),,,,,,true)
            else
                DrawTextRC("Not specified",,,,,,true)
            DrawTextRC(" - Bottom margin      : ")
            if (requestedBottomMargin>0) then
                DrawTextRC(%string(requestedBottomMargin,'XX.XXX"'),,,,,,true)
            else
                DrawTextRC("Not specified",,,,,,true)
            DrawTextRC(" - Header rows        : " + %string(this.HeaderRows),,,,,,true)
            DrawTextRC(" - Footer rows        : " + %string(this.FooterRows),,,,,,true)
            DrawTextRC(" - Space between rows : " + %string(this.ExtraRowSpacing,"XX.XX pixels"),,,,,,true)

            NewLine()
            DrawTextRC("Page Configuration - Row/Column Coordinates",,,,,,true)
            NewLine()
            DrawTextRC(" - Selected font size : " + %string(this.FontSize),,,,,,true)
            DrawTextRC(" - Actual columns     : " + %string(totalColsDefaultOrientation),,,,,,true)
            DrawTextRC(" - Total rows         : " + %string(totalRowsDefaultOrientation),,,,,,true)
            DrawTextRC(" - Body rows          : " + %string(totalRowsDefaultOrientation-this.HeaderRows-this.FooterRows),,,,,,true)
            DrawTextRC(" - Left margin        : " + %string(this.LeftMargin,'XX.XX"'),,,,,,true)
            DrawTextRC(" - Top margin         : " + %string(this.TopMargin,'XX.XX"'),,,,,,true)
            DrawTextRC(" - Right margin       : " + %string(this.RightMargin,'XX.XX"'),,,,,,true)
            DrawTextRC(" - Bottom margin      : " + %string(this.BottomMargin,'XX.XX"'),,,,,,true)

            NewPage()

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Releases resources allocated by the PDF document. After calling
        ;;; this method the PdfFile object is no longer valid. This method is
        ;;; called automatically whenever you call the Preview, Print or
        ;;; Save methods.
        ;;; </summary>
        public method Dispose, void
            endparams
        proc
            doc.FreeDocAll()
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws a box defined by two X/Y points on the page.
        ;;; The current position is NOT updated by this method.
        ;;; </summary>
        ;;; <param name="aFromX">X coordinate of one corner of the box.</param>
        ;;; <param name="aFromY">Y coordinate of one corner of the box.</param>
        ;;; <param name="aToX">X coordinate of the opposite corner of the box.</param>
        ;;; <param name="aToY">Y coordinate of the opposite corner of the box.</param>
        ;;; <param name="aWidth">Line width in pixels. Default is 1.</param>
        ;;; <param name="aStrokeColor">Custom stroke color.</param>
        ;;; <param name="aFill">Should the box be filled?</param>
        ;;; <param name="aFillColor">Custom fill color.</param>
        public method DrawBox,        void
            required in aFromX,       float
            required in aFromY,       float
            required in aToX,         float
            required in aToY,         float
.ifdef DBLNET
            default  in aWidth,       float,        0
            default  in aStrokeColor, PdfColor,     PdfColor.DefaultColor
            default  in aFill,        boolean,      false
            default  in aFillColor,   PdfColor,     PdfColor.DefaultColor
.else
            optional in aWidth,       float
            optional in aStrokeColor, PdfColor
            optional in aFill,        boolean
            optional in aFillColor,   PdfColor
.endc
            endparams
            record
                penWidth,       float
            endrecord
        proc
            ;;If we don't have a first page then add one
            if (this.PageNumber==0)
                NewPage()

            ;;Set the line width
.ifdef DBLNET
            if (aWidth>0) then
.else
            if (^passed(aWidth) && (aWidth>0)) then
.endc
                penWidth = aWidth
            else
                penWidth = 1

            pg.SetLineWidth(penWidth)

            ;;If we were passed a specific stroke color then use it
.ifdef DBLNET
            if ((aStrokeColor!=PdfColor.DefaultColor) && (aStrokeColor != this.StrokeColor))
.else
            if (^passed(aStrokeColor) && (aStrokeColor != this.StrokeColor))
.endc
                setCustomStrokeColor(aStrokeColor)

            ;;If we were passed a specific fill color then use it
.ifdef DBLNET
            if ((aFillColor != PdfColor.DefaultColor) && (aFillColor!= this.StrokeColor))
.else
            if (^passed(aFillColor) && (aFillColor != this.FillColor))
.endc
                setCustomFillColor(aFillColor)

            ;;Define the box (this enters graphics mode)
            pg.Rectangle(aFromX,aFromY,aToX-aFromX,aToY-aFromY)

            ;;Draw the box (this exits graphics mode and returns to text mode)
.ifdef DBLNET
            if (aFill) then
.else
            if (^passed(aFill) && aFill) then
.endc
            pg.FillStroke()
            else
                pg.Stroke()

            ;;If we changed the stroke color then revert back to the default color
.ifdef DBLNET
            if ((aStrokeColor!=PdfColor.DefaultColor) && (aStrokeColor != this.StrokeColor))
.else
            if (^passed(aStrokeColor) && (aStrokeColor != this.StrokeColor))
.endc
                resetStrokeColor()

            ;;If we changed the fill color then revert back to the default color
.ifdef DBLNET
            if ((aFillColor != PdfColor.DefaultColor) && (aFillColor!= this.StrokeColor))
.else
            if (^passed(aFillColor) && (aFillColor != this.FillColor))
.endc
                resetFillColor()

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws a box defined by two X/Y points on the page.
        ;;; The current position is NOT updated by this method.
        ;;; </summary>
        ;;; <param name="aFrom">X/Y coordinates of one corner of the box.</param>
        ;;; <param name="aTo">X/Y coordinates of the opposite corner of the box.</param>
        ;;; <param name="aWidth">Line width in pixels. Default is 1.</param>
        ;;; <param name="aStrokeColor">Custom stroke color.</param>
        ;;; <param name="aFill">Should the box be filled?</param>
        ;;; <param name="aFillColor">Custom fill color.</param>
        public method DrawBox,        void
            required in aFrom,        XYcoordinate
            required in aTo,          XYcoordinate
.ifdef DBLNET
            default  in aWidth,       float,        0
            default  in aStrokeColor, PdfColor,     PdfColor.DefaultColor
            default  in aFill,        boolean,      false
            default  in aFillColor,   PdfColor,     PdfColor.DefaultColor
.else
            optional in aWidth,       float
            optional in aStrokeColor, PdfColor
            optional in aFill,        boolean
            optional in aFillColor,   PdfColor
.endc
            endparams
        proc
            this.DrawBox(aFrom.X,aFrom.Y,aTo.X,aTo.Y,aWidth,aStrokeColor,aFill,aFillColor)
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws the box defined by an AutoBoxAbsolute object.
        ;;; </summary>
        ;;; <param name="aBox">AutoBoxAbsolute object to be drawn.</param>

        public method DrawBoxObject, void
            required in aBox, @AutoBoxAbsolute
            endparams
        proc
            DrawBox(aBox.FromX,aBox.FromY,aBox.ToX,aBox.ToY,aBox.Width,aBox.StrokeColor,aBox.Fill,aBox.FillColor)
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws a box from the center of specified start and end cells.
        ;;; The default from point is the current position.
        ;;; The default end point is the bottom right corner of the page.
        ;;; The current position is NOT updated by this method.
        ;;; </summary>
        ;;; <param name="aFromRow">Top left corner row.</param>
        ;;; <param name="aFromCol">Top left corner column.</param>
        ;;; <param name="aToRow">Bottom right corner row.</param>
        ;;; <param name="aToCol">Bottom right corner column.</param>
        ;;; <param name="aWidth">Line width in pixels. Default is 1.</param>
        ;;; <param name="aStrokeColor">Custom stroke color.</param>
        ;;; <param name="aFill">Should the box be filled?</param>
        ;;; <param name="aFillColor">Custom fill color.</param>
        public method DrawBoxRC, void
            optional in aFromRow,       n
            optional in aFromColumn,    n
            optional in aToRow,         n
            optional in aToColumn,      n
.ifdef DBLNET
            default  in aWidth,         float,      0
            default  in aStrokeColor,   PdfColor,   PdfColor.DefaultColor
            default  in aFill,          boolean,    false
            default  in aFillColor,     PdfColor,   PdfColor.DefaultColor
.else
            optional in aWidth,         float
            optional in aStrokeColor,   PdfColor
            optional in aFill,          boolean
            optional in aFillColor,     PdfColor
.endc
            endparams
            record
                lFromRow,               int
                lFromColumn,            int
                lToRow,                 int
                lToColumn,              int
                penWidth,               float
                start_x,                float
                start_y,                float
                end_x,                  float
                end_y,                  float
            endrecord
        proc
            ;;If we don't have a first page then add one
            if (this.PageNumber==0)
                NewPage()

            ;;Define origin row
            if (^passed(aFromRow) && (aFromRow > 0) && (aFromRow < this.Rows)) then
                lFromRow = aFromRow
            else
                lFromRow = this.Row

            ;;Define origin column
            if (^passed(aFromColumn) && (aFromColumn > 0) && (aFromColumn < this.Columns)) then
                lFromColumn = aFromColumn
            else
                lFromColumn = this.Column

            ;;Define destination row
            if (^passed(aToRow) && (aToRow > lFromRow) && (aToRow <= this.Rows)) then
                lToRow = aToRow
            else
                lToRow = this.Rows

            ;;Define destination column
            if (^passed(aToColumn) && (aToColumn > lFromColumn) && (aToColumn <= this.Columns)) then
                lToColumn = aToColumn
            else
                lToColumn = this.Columns

            ;;Set the line width
.ifdef DBLNET
            if (aWidth>0) then
.else
            if (^passed(aWidth) && (aWidth>0)) then
.endc
                penWidth = aWidth
            else
                penWidth = 1

            pg.SetLineWidth(penWidth)

            ;;If we were passed a specific stroke color then use it
.ifdef DBLNET
            if ((aStrokeColor!=PdfColor.DefaultColor) && (aStrokeColor != this.StrokeColor))
.else
            if (^passed(aStrokeColor) && (aStrokeColor != this.StrokeColor))
.endc
                setCustomStrokeColor(aStrokeColor)

            ;;If we were passed a specific fill color then use it
.ifdef DBLNET
            if ((aFillColor!=PdfColor.DefaultColor) && (aFillColor != this.FillColor))
.else
            if (^passed(aFillColor) && (aFillColor != this.FillColor))
.endc
                setCustomFillColor(aFillColor)

            ;;Calculate the start and end points for a center cell to center cell line
            start_x = XfromColumn(lFromColumn) + (this.ColumnWidth / 2)
            start_y = YfromBodyRow(lFromRow) + (((this.RowHeight-this.ExtraRowSpacing)-penWidth)/2)
            end_x   = XfromColumn(lToColumn) + (this.ColumnWidth/ 2)
            end_y   = YfromBodyRow(lToRow) + (((this.RowHeight-this.ExtraRowSpacing)-penWidth)/2)

            ;;Define the box (this enters graphics mode)
            pg.Rectangle(start_x,start_y,end_x-start_x,end_y-start_y)

            ;;Draw the box (this exits graphics mode and returns to text mode)
.ifdef DBLNET
            if (aFill) then
.else
            if (^passed(aFill) && aFill) then
.endc
                pg.FillStroke()
            else
                pg.Stroke()

            ;;If we changed the stroke color then revert back to the default color
.ifdef DBLNET
            if ((aStrokeColor!=PdfColor.DefaultColor) && (aStrokeColor != this.StrokeColor))
.else
            if (^passed(aStrokeColor) && (aStrokeColor != this.StrokeColor))
.endc
                resetStrokeColor()

            ;;If we changed the fill color then revert back to the default color
.ifdef DBLNET
            if ((aFillColor!=PdfColor.DefaultColor) && (aFillColor != this.FillColor))
.else
            if (^passed(aFillColor) && (aFillColor != this.FillColor))
.endc
                resetFillColor()

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws the box defined by an AutoBoxRowCol object.
        ;;; </summary>
        ;;; <param name="aBox">AutoBoxRowCol object to be drawn.</param>

        public method DrawBoxObjectRC, void
            required in aBox, @AutoBoxRowCol
            endparams
        proc
            DrawBoxRC(aBox.FromRow,aBox.FromCol,aBox.ToRow,aBox.ToCol,aBox.Width,aBox.StrokeColor,aBox.Fill,aBox.FillColor)
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws a circle from a specified center point at a specified radius.
        ;;; </summary>
        ;;; <param name="aFromX">X coordinate of center point</param>
        ;;; <param name="aFromY">Y coordinate of center point</param>
        ;;; <param name="aRadius">Radius of arc.</param>
        ;;; <param name="aWidth">Optional line width (default 1).</param>
        ;;; <param name="aStrokeColor">Optional line color (default black).</param>
        ;;; <param name="aFill">Fill circle with fill color (default false).</param>
        ;;; <param name="aFillColor">Optional fill color (default black).</param>
        public method DrawCircle,       void
            required in aCenterX,       float
            required in aCenterY,       float
            required in aRadius,        float
.ifdef DBLNET
            default  in aWidth,         float,      0
            default  in aStrokeColor,   PdfColor,   PdfColor.DefaultColor
            default  in aFill,          boolean,    false
            default  in aFillColor,     PdfColor,   PdfColor.DefaultColor
.else
            optional in aWidth,         float
            optional in aStrokeColor,   PdfColor
            optional in aFill,          boolean
            optional in aFillColor,     PdfColor
.endc
            endparams
            record
                penWidth,               float
            endrecord
        proc
            ;;If we don't have a first page then add one
            if (this.PageNumber==0)
                NewPage()

            ;;Determine the line width
.ifdef DBLNET
            if (aWidth>0) then
.else
            if (^passed(aWidth) && (aWidth>0)) then
.endc
                penWidth = aWidth
            else
                penWidth = 1

            ;;And set it
            pg.SetLineWidth(penWidth)

            ;;If we were passed a specific stroke color then use it
.ifdef DBLNET
            if ((aStrokeColor!=PdfColor.DefaultColor) && (aStrokeColor != this.StrokeColor))
.else
            if (^passed(aStrokeColor) && (aStrokeColor != this.StrokeColor))
.endc
                setCustomStrokeColor(aStrokeColor)

            ;;If we were passed a specific fill color then use it
.ifdef DBLNET
            if ((aFillColor != PdfColor.DefaultColor) && (aFillColor!= this.StrokeColor))
.else
            if (^passed(aFillColor) && (aFillColor != this.FillColor))
.endc
                setCustomFillColor(aFillColor)

            ;;Define the circle (this enters graphics mode)
            pg.Circle(aCenterX,aCenterY,aRadius)

            ;;Draw the circle (this exits graphics mode and returns to text mode)
.ifdef DBLNET
            if (aFill) then
.else
            if (^passed(aFill) && aFill) then
.endc
                pg.FillStroke()
            else
                pg.Stroke()

            ;;If we changed the stroke color then revert back to the default color
.ifdef DBLNET
            if ((aStrokeColor!=PdfColor.DefaultColor) && (aStrokeColor != this.StrokeColor))
.else
            if (^passed(aStrokeColor) && (aStrokeColor != this.StrokeColor))
.endc
                resetStrokeColor()

            ;;If we changed the fill color then revert back to the default color
.ifdef DBLNET
            if ((aFillColor != PdfColor.DefaultColor) && (aFillColor!= this.StrokeColor))
.else
            if (^passed(aFillColor) && (aFillColor != this.FillColor))
.endc
                resetFillColor()

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Loads a JPEG or PNG image and displays it at a specified position
        ;;; on the current page. Note that if you specify height and width then
        ;;; you should try to maintain the same ratio as the dimensions of the
        ;;; actual image, otherwise the image will be stretched or shrunk in
        ;;; order to achieve the dimensions that you specify.
        ;;; </summary>
        ;;; <param name="aFileSpec">Full or relative file spec of image to load (.jpg, .jpeg or .png).</param>
        ;;; <param name="aX">X position of bottom left corner of image on the current page.</param>
        ;;; <param name="aY">Y position of bottom left corner of image on the current page.</param>
        ;;; <param name="aWidth">Width to occupy in device independent pixels (defaults to the pixel width of the image).</param>
        ;;; <param name="aWidth">Height to occupy in device independent pixels (defaults to the pixel height of the image).</param>
        ;;; <returns>Returns true on success, false if an error occurs.</returns>
        public method DrawImage,        boolean
            required in  aFileSpec,     string
            required in  aX,            float
            required in  aY,            float
.ifdef DBLNET
            default  in  aWidth,        float,      0
            default  in  aHeight,       float,      0
.else
            optional in  aWidth,        float
            optional in  aHeight,       float
.endc
            optional out aErrorMessage, a
            endparams
            record
                ok, boolean
                fileSpec, string
                errorMessage, string
                image, @HPdfImage
                width, float
                height, float
            endrecord
        proc
            ok = true
            errorMessage = ""

            ;;If we don't have a first page then add one
            if (this.PageNumber==0)
                NewPage()

            ;;Remove spaces and expand logical names
            fileSpec = expandLogicalInFileSpec(aFileSpec.Trim())

            if (fileExists(fileSpec)) then
            begin
                try
                begin
                    if (fileSpec.ToLower().EndsWith(".jpg") || fileSpec.ToLower().EndsWith(".jpeg")) then
                        image = doc.LoadJpegImageFromFile(fileSpec)
                    else if (fileSpec.ToLower().EndsWith(".png")) then
                        image = doc.LoadPngImageFromFile(fileSpec)
                    else
                    begin
                        errorMessage = "Unsupported image format!"
                        ok = false
                    end
                end
                catch (ex)
                begin
                    ;;Most likely cause of a crash here is a bad image format,
                    ;;especially on non-windows systems if an image file has
                    ;;not been transferred there in binary mode. On VMS image
                    ;;files should show up as:
                    ;;  File organization: Sequential
                    ;;  Record format:     Fixed length 512 byte records
                    ok = false
                end
                endtry
            end
            else
            begin
                errorMessage = "Image file not found!"
                ok = false
            end

            if (ok)
            begin
.ifdef DBLNET
                if (aWidth>0) then
.else
                if (^passed(aWidth) && (aWidth>0)) then
.endc
                    width = aWidth
                else
                    width = image.GetWidth()

.ifdef DBLNET
                if (aHeight>0) then
.else
                if (^passed(aHeight) && (aHeight>0)) then
.endc
                    height = aHeight
                else
                    height = image.GetHeight()

                pg.DrawImage(image,aX,aY,width,height)

            end

            if (^passed(aErrorMessage))
                aErrorMessage = errorMessage

            mreturn ok

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws the image defined by a AutoImage object.
        ;;; </summary>
        ;;; <param name="aImage">AutoImage object to be drawn.</param>
        public method DrawImageObject,  boolean
            required in  aImage,        @AutoImage
            optional out aErrorMessage, a
            endparams
        proc
            mreturn DrawImage(aImage.FileSpec,aImage.X,aImage.Y,aImage.Width,aImage.Height,aErrorMessage)
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws a line based on absolute X,Y positions. The current position
        ;;; is NOT updated by line drawing.
        ;;; </summary>
        ;;; <param name="aFromX">Origin X position.</param>
        ;;; <param name="aFromY">Origin Y position.</param>
        ;;; <param name="aToX">Destination X position.</param>
        ;;; <param name="aToY">Destination Y position.</param>
        ;;; <param name="aWidth">Line width in pixels. Default is 1.</param>
        ;;; <param name="aStrokeColor">Custom stroke color.</param>
        public method DrawLine,       void
            required in aFromX,       float
            required in aFromY,       float
            required in aToX,         float
            required in aToY,         float
.ifdef DBLNET
            default  in aWidth,       float,        0
            default  in aStrokeColor, PdfColor,     PdfColor.DefaultColor
.else
            optional in aWidth,       float
            optional in aStrokeColor, PdfColor
.endc
            endparams
            record
                penWidth,   float
            endrecord
        proc
            ;;If we don't have a first page then add one
            if (this.PageNumber==0)
                NewPage()

            ;;Set the line width
.ifdef DBLNET
            if (aWidth>0) then
.else
            if (^passed(aWidth) && (aWidth>0)) then
.endc
                penWidth = aWidth
            else
                penWidth = 1

            pg.SetLineWidth(penWidth)

            ;;If we were passed a specific stroke color then use it
.ifdef DBLNET
            if ((aStrokeColor!=PdfColor.DefaultColor) && (aStrokeColor != this.StrokeColor))
.else
            if (^passed(aStrokeColor) && (aStrokeColor != this.StrokeColor))
.endc
                setCustomStrokeColor(aStrokeColor)

            ;;Draw the line
            pg.MoveTo(aFromX,aFromY)
            pg.LineTo(aToX,aToY)
            pg.Stroke()

            ;;If we changed the stroke color then revert back to the default color
.ifdef DBLNET
            if ((aStrokeColor!=PdfColor.DefaultColor) && (aStrokeColor != this.StrokeColor))
.else
            if (^passed(aStrokeColor) && (aStrokeColor != this.StrokeColor))
.endc
                resetStrokeColor()

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws the line defined by a PdfLine object.
        ;;; </summary>
        ;;; <param name="aLine">PdfLine object to be displayed.</param>
        public method DrawLineObject, void
            required in aLine,        @AutoLineAbsolute
            endparams
        proc
            DrawLine(aLine.FromX,aLine.FromY,aLine.ToX,aLine.ToY,aLine.Width,aLine.StrokeColor)
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws the line defined by a AutoLineRowCol object.
        ;;; </summary>
        ;;; <param name="aLine">AutoLineRowCol object to be drawn.</param>
        public method DrawLineObjectRC, void
            required in aLine, @AutoLineRowCol
            endparams
        proc
            DrawLineRC(aLine.FromRow,aLine.FromCol,aLine.ToRow,aLine.ToCol,aLine.Width,aLine.StrokeColor)
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws a line from the current cell to the end of the current line.
        ;;; By default the line is drawn from and to the center of the start
        ;;; and end cells, unlessfullWidth is passed, in which case the line is
        ;;; drawn from the left side of the first cell to the right side of the
        ;;; last cell. The current position is NOT updated by line drawing.
        ;;; </summary>
        ;;; <param name="aFromRow">Origin cell row.</param>
        ;;; <param name="aFromCol">Origin cell column.</param>
        ;;; <param name="aToRow">Destination cell row.</param>
        ;;; <param name="aToCol">Destination cell column.</param>
        ;;; <param name="aWidth">Line width in pixels. Default is 2.</param>
        ;;; <param name="aStrokeColor">Custom stroke color.</param>
        public method DrawLineRC,     void
            required in aFromRow,     int
            required in aFromCol,     int
            required in aToRow,       int
            required in aToCol,       int
.ifdef DBLNET
            default  in aWidth,       float,        0
            default  in aStrokeColor, PdfColor,     PdfColor.DefaultColor
.else
            optional in aWidth,       float
            optional in aStrokeColor, PdfColor
.endc
            endparams
            record
                penWidth,   float
                start_x,    float
                start_y,    float
                end_x,      float
                end_y,      float
            endrecord
        proc
            ;;If we don't have a first page then add one
            if (this.PageNumber==0)
                NewPage()

            ;;Set the line width
.ifdef DBLNET
            if (aWidth>0) then
.else
            if (^passed(aWidth) && (aWidth>0)) then
.endc
                penWidth = aWidth
            else
                penWidth = 1

            pg.SetLineWidth(penWidth)

            ;;If we were passed a specific stroke color then use it
.ifdef DBLNET
            if ((aStrokeColor!=PdfColor.DefaultColor) && (aStrokeColor != this.StrokeColor))
.else
            if (^passed(aStrokeColor) && (aStrokeColor != this.StrokeColor))
.endc
                setCustomStrokeColor(aStrokeColor)

            ;;Calculate the start and end points for a center cell to center cell line
            start_x = XfromColumn(aFromCol) + (this.ColumnWidth / 2)
            start_y = YfromBodyRow(aFromRow) + (((this.RowHeight-this.ExtraRowSpacing)-penWidth)/2)
            end_x   = XfromColumn(aToCol) + (this.ColumnWidth/ 2)
            end_y   = YfromBodyRow(aToRow) + (((this.RowHeight-this.ExtraRowSpacing)-penWidth)/2)

            ;;Draw the line
            pg.MoveTo(start_x,start_y)
            pg.LineTo(end_x,end_y)
            pg.Stroke()

            ;;If we changed the stroke color then revert back to the default color
.ifdef DBLNET
            if ((aStrokeColor!=PdfColor.DefaultColor) && (aStrokeColor != this.StrokeColor))
.else
            if (^passed(aStrokeColor) && (aStrokeColor != this.StrokeColor))
.endc
                resetStrokeColor()

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws a horizontal line from the current position to the end of the
        ;;; current line. By default the line is drawn from and to the center
        ;;; of the start and end cells, unless fullWidth is passed, in which
        ;;; case the line is drawn from the left side of the first cell to the
        ;;; right side of the last cell. The current position set to the
        ;;; beginning of the next line.
        ;;; </summary>
        ;;; <param name="aFullWidth">Draw the line the full width of the cells.</param>
        ;;; <param name="aWidth">Line width in pixels. Default is 5.</param>
        ;;; <param name="aStrokeColor">Custom stroke color.</param>
        ;;; <returns>Returns the new current row number.</returns>
        public method DrawLineRow,    int
.ifdef DBLNET
            default  in aFullWidth,   boolean,      false
            default  in aWidth,       int,          0
            default  in aStrokeColor, PdfColor,     PdfColor.DefaultColor
.else
            optional in aFullWidth,   boolean
            optional in aWidth,       int
            optional in aStrokeColor, PdfColor
.endc
            endparams
            record
                penWidth,   float
                start_x,    float
                start_y,    float
                end_x,      float
                end_y,      float
            endrecord
        proc
            ;;If we don't have a first page then add one
            if (this.PageNumber==0)
                NewPage()

            ;;If the current position is below the page body then start
            ;;a new page in the same orientation as the current page
            if (this.Row > this.Rows)
                NewPage(this.Orientation)

            ;;Set the line width
.ifdef DBLNET
            if (aWidth>0) then
.else
            if (^passed(aWidth) && (aWidth>0)) then
.endc
                penWidth = aWidth
            else
                penWidth = 1

            pg.SetLineWidth(penWidth)

            ;;If we were passed a specific stroke color then use it
.ifdef DBLNET
            if ((aStrokeColor!=PdfColor.DefaultColor) && (aStrokeColor != this.StrokeColor))
.else
            if (^passed(aStrokeColor) && (aStrokeColor != this.StrokeColor))
.endc
                setCustomStrokeColor(aStrokeColor)

            ;;Calculate the start and end points for a center cell to center cell line
            start_x = XfromColumn(this.Column) + (this.ColumnWidth / 2)
            start_y = YfromBodyRow(this.Row) + (((this.RowHeight-this.ExtraRowSpacing)-penWidth)/2)
            end_x   = XfromColumn(this.Columns) + (this.ColumnWidth/ 2)
            end_y   = start_y

            ;;If we're being asked for a full-width line then add back in the partial cell pixels
.ifdef DBLNET
            if (aFullWidth)
.else
            if (^passed(aFullWidth) && aFullWidth)
.endc
            begin
                start_x -= (this.ColumnWidth / 2)
                end_x += (this.ColumnWidth / 2)
            end

            ;;Draw the line
            pg.MoveTo(start_x,start_y)
            pg.LineTo(end_x,end_y)
            pg.Stroke()

            ;;If we changed the stroke color then revert back to the default color
.ifdef DBLNET
            if ((aStrokeColor!=PdfColor.DefaultColor) && (aStrokeColor != this.StrokeColor))
.else
            if (^passed(aStrokeColor) && (aStrokeColor != this.StrokeColor))
.endc
                resetStrokeColor()

            ;;Update current position
            this.Row = this.Row + 1
            this.Column = 1

            mreturn this.Row

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws a bar chart with multiple data series
        ;;; </summary>
        ;;; <param name="aTopX">X coordinate of the top left corner of the chart.</param>
        ;;; <param name="aTopY">Y coordinate of the top left corner of the chart.</param>
        ;;; <param name="aBottomX">X coordinate of the bottom right corner of the chart.</param>
        ;;; <param name="aBottomY">Y coordinate of the bottom right corner of the chart.</param>
        ;;; <param name="aMarginAroundBars">Number of pixels to leave blank around the whole chart (inside the border box).</param>
        ;;; <param name="aSpaceBetweenGroups">Number of pixels to leave between data groups.</param>
        ;;; <param name="aChartData">ChartDataSet object that defines the data for the chart.</param>
        ;;; <param name="aBackgroundColor">The background color for the chart.</param>
        public method DrawBarChart,             void
            required in aTopX,                  float
            required in aTopY,                  float
            required in aBottomX,               float
            required in aBottomY,               float
            required in aSpaceBetweenGroups,    float
            required in aChartData,             @ChartDataSet
.ifdef DBLNET
            default  in aBackgroundColor,       PdfColor,   PdfColor.DefaultColor
.else
            optional in aBackgroundColor,       PdfColor
.endc
            endparams
            record
                groupCount,     int
                barsPerGroup,   int
                ixSeries,       int
                ixSeriesMember, int
                totalBars,      int
                margin,         int
                maxBarHeight,   float
                highestValue,   float
                barWidth,       float
                groupWidth,     float
                drawGroupLabels,boolean
            endrecord
        proc
            ;;If we don't have a first page then add one
            if (this.PageNumber==0)
                NewPage()

            margin = 0
            
.ifdef DBLNET
            if (aBackgroundColor!=PdfColor.DefaultColor)
            begin
                this.DrawBox(aTopX,aTopY,aBottomX,aBottomY,,aBackgroundColor,true,aBackgroundColor)
                margin = 5
            end
.else
            if (^passed(aBackgroundColor))
            begin
                this.DrawBox(aTopX,aTopY,aBottomX,aBottomY,,aBackgroundColor,true,aBackgroundColor)
                margin = 5
            end
.endc
            ;;Set the line width
            pg.SetLineWidth(1)

            ;;Do we have any group labels?
            drawGroupLabels = false
            begin
                data ix, int
                for ix from 1 thru aChartData.GroupLabel.GetLength(1)
                begin
                    ;;Do we have a group label?
                    data labelText,string, aChartData.GroupLabel[ix].Trim()
                    if (labelText.Length>0)
                        drawGroupLabels = true
                end
            end

            ;;How many bars will we be drawing
            groupCount = aChartData.Series[1].Items.GetLength(1)
            barsPerGroup = aChartData.Series.GetLength(1)
            totalBars = groupCount * barsPerGroup

            ;;Find the highest data value
            highestValue = 0
            for ixSeries from 1 thru aChartData.Series.GetLength(1)
            begin
                for ixSeriesMember from 1 thru aChartData.Series[ixSeries].Items.GetLength(1)
                begin
                    if (aChartData.Series[ixSeries].Items[ixSeriesMember].DataValue > highestValue)
                    begin
                        highestValue = aChartData.Series[ixSeries].Items[ixSeriesMember].DataValue
                    end
                end
            end

            ;;Calculate the maximum height of any bar
            maxBarHeight = aTopY - aBottomY - 1 - (margin*2)
            if (drawGroupLabels)
                maxBarHeight -= 15

            ;;Calculate the width of each bar
            ;;(total width - space between groups) / total number of bars
            barWidth = ((aBottomX-aTopX-1) - (aSpaceBetweenGroups*(groupCount-1)) - (margin*2)) / totalBars

            ;;Calculate the width of each group
            groupWidth = barWidth * barsPerGroup

            ;;Draw the bars
            for ixSeries from 1 thru aChartData.Series.GetLength(1)
            begin
                ;;Calculate the starting Y coordinare for all bars
                data barStartY, float, aBottomY + margin
                if (drawGroupLabels)
                    barStartY += 15
                
                ;If the series specifies a color then set it.
                if (aChartData.Series[ixSeries].Color != PdfColor.NotSpecified)
                    setCustomFillColor(aChartData.Series[ixSeries].Color)

                for ixSeriesMember from 1 thru aChartData.Series[ixSeries].Items.GetLength(1)
                begin
                    data barHeight, float
                    data barStartX, float

                    ;If the data item specifies a color then set it.
                    if (aChartData.Series[ixSeries].Items[ixSeriesMember].Color != PdfColor.NotSpecified)
                        setCustomFillColor(aChartData.Series[ixSeries].Items[ixSeriesMember].Color)

                    ;;Calculate the height of the bar for the current data item
                    barHeight = maxBarHeight * (aChartData.Series[ixSeries].Items[ixSeriesMember].DataValue / highestValue)

                    ;;Calculate the starting X coordinate for this bar
                    barStartX = aTopX + margin + (groupWidth*(ixSeriesMember-1)) + (aSpaceBetweenGroups*(ixSeriesMember-1)) + (barWidth*(ixSeries-1))

                    ;;Draw the bar
                    pg.Rectangle(barStartX,barStartY,barWidth,barHeight)
                    pg.Fill()

                end
            end

            ;;Revert to the default fill color
            resetFillColor()

            ;Draw group labels
            begin
                data ix, int
                for ix from 1 thru aChartData.GroupLabel.GetLength(1)
                begin
                    ;;Do we have a group label?
                    data labelText,string, aChartData.GroupLabel[ix].Trim()
                    if (labelText.Length>0)
                    begin
                        ;;Figure out the X coordinate for the label
                        data labelWidth, float, pg.TextWidth(labelText)
                        data X, float, aTopX + margin + (groupWidth*(ix-1)) + (aSpaceBetweenGroups*(ix-1)) + ((groupWidth-labelWidth)/2)
                        
                        pg.BeginText()
                        pg.MoveTextPos(X,aBottomY + margin)
                        pg.ShowText(labelText)
                        pg.EndText()
                    end
                end
            end
            
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws a bar chart with multiple data series
        ;;; </summary>
        ;;; <param name="aTopLeft">X/Y coordinates of the top left corner of the chart.</param>
        ;;; <param name="aBottomRight">X/Y coordinates of the bottom right corner of the chart.</param>
        ;;; <param name="aMarginAroundBars">Number of pixels to leave blank around the whole chart (inside the border box).</param>
        ;;; <param name="aSpaceBetweenGroups">Number of pixels to leave between data groups.</param>
        ;;; <param name="aChartData">ChartDataSet object that defines the data for the chart.</param>
        ;;; <param name="aBackgroundColor">The background color for the chart.</param>
        public method DrawBarChart,  void
            required in aTopLeft,               XYcoordinate
            required in aBottomRight,           XYcoordinate
            required in aSpaceBetweenGroups,    float
            required in aChartData,             @ChartDataSet
.ifdef DBLNET
            default  in aBackgroundColor,   PdfColor,   PdfColor.DefaultColor
.else
            optional in aBackgroundColor,   PdfColor
.endc
            endparams
        proc
            this.DrawBarChart(aTopLeft.X,aTopLeft.Y,aBottomRight.X,aBottomRight.Y,aSpaceBetweenGroups,aChartData,aBackgroundColor)
        endmethod
        
        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws a bar chart with multiple data series
        ;;; </summary>
        ;;; <param name="aFromRow">Row number of the top left corner of the chart.</param>
        ;;; <param name="aFromCol">Column number of the top left corner of the chart.</param>
        ;;; <param name="aToRow">Row number of the bottom right corner of the chart.</param>
        ;;; <param name="aToCol">Column number of the bottom right corner of the chart.</param>
        ;;; <param name="aMarginAroundBars">Number of pixels to leave blank around the whole chart (inside the border box).</param>
        ;;; <param name="aSpaceBetweenGroups">Number of pixels to leave between data groups.</param>
        ;;; <param name="aChartData">ChartDataSet object that defines the data for the chart.</param>
        ;;; <param name="aBackgroundColor">The background color for the chart.</param>
        public method DrawBarChartRC,       void
            required in aFromRow,           int
            required in aFromCol,           int
            required in aToRow,             int
            required in aToCol,             int
            required in aSpaceBetweenGroups,float
            required in aChartData,         @ChartDataSet
.ifdef DBLNET
            default  in aBackgroundColor,   PdfColor,   PdfColor.DefaultColor
.else
            optional in aBackgroundColor,   PdfColor
.endc
            endparams
            record 
                topLeft,        XYcoordinate
                bottomRight,    XYcoordinate
            endrecord
        proc
            topLeft.X     = XfromColumn(aFromCol) + (this.ColumnWidth/2)
            topLeft.Y     = YfromBodyRow(aFromRow) + ((this.RowHeight-this.ExtraRowSpacing)/2)
            bottomRight.X = XfromColumn(aToCol) + (this.ColumnWidth/2)
            bottomRight.Y = YfromBodyRow(aToRow) + ((this.RowHeight-this.ExtraRowSpacing)/2)
            this.DrawBarChart(topLeft.X,topLeft.Y,bottomRight.X,bottomRight.Y,aSpaceBetweenGroups,aChartData,aBackgroundColor)
        endmethod        
        
        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws a chart legend for a chart that displays multiple data series.
        ;;; The legend text is based on the label for each data series.
        ;;; </summary>
        ;;; <param name="aTopX">X coordinate for the top left corner of the legend box.</param>
        ;;; <param name="aTopY">Y coordinate for the top left corner of the legend box.</param>
        ;;; <param name="aChartData">ChartDataSet object that defines data for a multi-series chart.</param>
        ;;; <returns>Returns the X/Y coordinates of the bottom right corner of the legend that was drawn.</returns>
        public method DrawMultiSeriesChartLegend, XYcoordinate
            required in aTopX,      float
            required in aTopY,      float
            required in aChartData, @ChartDataSet
            endparams
            record
                seriesCount,    int
                ix,             int
                dataItems,      int
                maxWidth,       float
                bottomRight,    XYcoordinate
            endrecord
        proc
            ;;If we don't have a first page then add one
            if (this.PageNumber==0)
                NewPage()

            seriesCount = aChartData.Series.GetLength(1)
            maxWidth = 0

            for ix from 1 thru seriesCount
            begin
                data boxX, float, aTopX
                data boxY, float, aTopY - (ix*15)
                data labelX, float, boxX + 20
                data labelY, float, boxY + 3
                data thisLabel, string
                data thisWidth, float

                thisLabel = aChartData.Series[ix].Label

                thisWidth = pg.TextWidth(thisLabel) + 20

                if (thisWidth > maxWidth)
                    maxWidth = thisWidth

                setCustomFillColor((PdfColor)(aChartData.Series[ix].Color))

                pg.Rectangle(boxX,boxY,15,15)
                pg.Fill()

                resetFillColor()

                pg.BeginText()
                pg.MoveTextPos(labelX,labelY)
                pg.ShowText(thisLabel)
                pg.EndText()

            end

            bottomRight.X = aTopX + maxWidth
            bottomRight.Y = aTopY - (seriesCount*15)

            mreturn bottomRight

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws a chart legend for a chart that displays multiple data series.
        ;;; The legend text is based on the label for each data series.
        ;;; </summary>
        ;;; <param name="aTopLeft">X/Y coordinates for the top left corner of the legend box.</param>
        ;;; <param name="aChartData">ChartDataSet object that defines data for a multi-series chart.</param>
        ;;; <returns>Returns the X/Y coordinates of the bottom right corner of the legend that was drawn.</returns>
        public method DrawMultiSeriesChartLegend, XYcoordinate
            required in aTopLeft,   XYcoordinate
            required in aChartData, @ChartDataSet
            endparams
        proc
            mreturn this.DrawMultiSeriesChartLegend(aTopLeft.X,aTopLeft.Y,aChartData)
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws a pie chart
        ;;; </summary>
        ;;; <param name="aCenterX">X coordinate of center point</param>
        ;;; <param name="aCenterY">Y coordinate of center point</param>
        ;;; <param name="aRadius">Radius of arc.</param>
        ;;; <param name="aChartData">Array of PieSlice objects that define the slices of the pie.</param>
        ;;; <param name="aBackgroundColor">Optional background color to draw behind the chart.</param>
        public method DrawPieChart,         void
            required in aCenterX,           float
            required in aCenterY,           float
            required in aRadius,            float
            required in aChartData,         @ChartDataSet
.ifdef DBLNET
            default  in aBackgroundColor,   PdfColor,   PdfColor.DefaultColor
.else
            optional in aBackgroundColor,   PdfColor
.endc
            endparams
            record
                ix,                 int
                radius,             float
                startPercent,       float
                endPercent,         float
                totalDataValue,     float
                startAngle,         float
                endAngle,           float
                lastPoint,          HPdfPoint
            endrecord
        proc
            ;;If we don't have a first page then add one
            if (this.PageNumber==0)
                NewPage()

            radius = aRadius
            
.ifdef DBLNET
            if (aBackgroundColor!=PdfColor.DefaultColor)
            begin
                this.DrawBox(aCenterX-radius-2,aCenterY+radius+2,aCenterX+radius+2,aCenterY-radius-2,,aBackgroundColor,true,aBackgroundColor)
                radius -= 5
            end
.else
            if (^passed(aBackgroundColor))
            begin
                this.DrawBox(aCenterX-radius-2,aCenterY+radius+2,aCenterX+radius+2,aCenterY-radius-2,,aBackgroundColor,true,aBackgroundColor)
                radius -= 5
            end
.endc
            ;;Set the line width
            pg.SetLineWidth(1)

            startPercent = 0
            startAngle = 0
            lastPoint.x = aCenterX
            lastPoint.y = aCenterY-radius
            
            ;;Calculate the total of all data values
            totalDataValue = 0
            for ix from 1 thru aChartData.Series[1].Items.GetLength(1)
                totalDataValue += aChartData.Series[1].Items[ix].DataValue

            for ix from 1 thru aChartData.Series[1].Items.GetLength(1)
            begin
                ;Set the fill color for this slice. This must be done before we start drawing.
                setCustomFillColor(aChartData.Series[1].Items[ix].Color)
                
                ;;Calculate the number of percent we will have covered after this slice,
                ;;and the compass angle of the end of the arc associated with this slice
                endPercent = startPercent + ((aChartData.Series[1].Items[ix].DataValue / totalDataValue) * 100)
                endAngle = (endPercent * 3.6)
                
                ;;Draw a line from the center to the arc
                pg.MoveTo(aCenterX,aCenterY)
                pg.LineTo(lastPoint.x,lastPoint.y)
                
                ;;Then draw the arc and record the position of the point at the end of the arc
                pg.Arc(aCenterX,aCenterY,radius,startAngle,endAngle)
                lastPoint = pg.GetCurrentPos()
                
                ;;Then draw a line back to the center point
                pg.LineTo(aCenterX,aCenterY)
                
                ;;And fill the arc with the appropriate color for the slice
                pg.Fill()
            
                ;;Get ready for the next slice
                startPercent = endPercent
                startAngle = ((360.0/100)*startPercent)
            end

            ;;Revert to the default fill color
            resetFillColor()

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws a pie chart
        ;;; </summary>
        ;;; <param name="aCenterPoint">X/Y coordinates of center point</param>
        ;;; <param name="aRadius">Radius of arc.</param>
        ;;; <param name="aChartData">Array of PieSlice objects that define the slices of the pie.</param>
        ;;; <param name="aBackgroundColor">Optional background color to draw behind the chart.</param>
        public method DrawPieChart,     void
            required in aCenterPoint,   XYcoordinate
            required in aRadius,        float
            required in aChartData,     @ChartDataSet
.ifdef DBLNET
            default  in aBackgroundColor,   PdfColor,   PdfColor.DefaultColor
.else
            optional in aBackgroundColor,   PdfColor
.endc
            endparams
        proc
            this.DrawPieChart(aCenterPoint.X,aCenterPoint.Y,aRadius,aChartData,aBackgroundColor)
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws a legend for a chart that displays a single series of data.
        ;;; The legend text is based on the label for individual data items in the first data series.
        ;;; </summary>
        ;;; <param name="aTopX">X coordinate for the top left corner of the legend box.</param>
        ;;; <param name="aTopY">Y coordinate for the top left corner of the legend box.</param>
        ;;; <param name="aChartData">ChartDataSet object that defines the legend to draw.</param>
        ;;; <returns>Returns the X/Y coordinates of the lower right corner of the legend that was drawn.</returns>
        public method DrawSingleSeriesChartLegend, XYcoordinate
            required in aTopX,       float
            required in aTopY,       float
            required in aChartData,  @ChartDataSet
.ifdef DBLNET
            default in aShowValues, boolean, false
.else
            optional in aShowValues, boolean
.endc
            endparams
            record
                showValues, boolean
                ix,         int
                dataItems,  int
                maxWidth,   float
                bottomRight,XYcoordinate
            endrecord
        proc
            ;;If we don't have a first page then add one
            if (this.PageNumber==0)
                NewPage()

.ifdef DBLNET
            showValues = aShowValues
.else
            if (^passed(aShowValues)) then 
                showValues = aShowValues
            else
                showValues = false
.endc

            dataItems = aChartData.Series[1].Items.GetLength(1)
            maxWidth = 0

            for ix from 1 thru dataItems
            begin
                data boxX, float, aTopX
                data boxY, float, aTopY - (ix*15)
                data labelX, float, boxX + 20
                data labelY, float, boxY + 3
                data thisLabel, string
                data thisWidth, float

                if (showValues) then 
                    thisLabel = aChartData.Series[1].Items[ix].Label + " (" + %string(aChartData.Series[1].Items[ix].DataValue) + ")"
                else
                    thisLabel = aChartData.Series[1].Items[ix].Label

                thisWidth = pg.TextWidth(thisLabel) + 20

                if (thisWidth > maxWidth)
                    maxWidth = thisWidth

                setCustomFillColor((PdfColor)(aChartData.Series[1].Items[ix].Color))

                pg.Rectangle(boxX,boxY,15,15)
                pg.Fill()

                resetFillColor()

                pg.BeginText()
                pg.MoveTextPos(labelX,labelY)
                pg.ShowText(thisLabel)
                pg.EndText()

            end

            bottomRight.X = aTopX + maxWidth
            bottomRight.Y = aTopY - (dataItems*15)

            mreturn bottomRight

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws a legend for a chart that displays a single series of data.
        ;;; The legend text is based on the label for individual data items in the first data series.
        ;;; </summary>
        ;;; <param name="aTopLeft">X/Y coordinates for the top left corner of the legend box.</param>
        ;;; <param name="aChartData">ChartDataSet object that defines the legend to draw.</param>
        ;;; <returns>Returns the X/Y coordinates of the lower right corner of the legend that was drawn.</returns>
        public method DrawSingleSeriesChartLegend, XYcoordinate
            required in aTopLeft,       XYcoordinate
            required in aChartData,     @ChartDataSet
.ifdef DBLNET
            default in aShowValues,     boolean, false
.else
            optional in aShowValues,    boolean
.endc
            endparams
        proc
            mreturn this.DrawSingleSeriesChartLegend(aTopLeft.X,aTopLeft.Y,aChartData,aShowValues)
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws text at the specified absolute position. The current row /
        ;;; column position is NOT affected by this method.
        ;;; </summary>
        ;;; <param name="aText">Text to display.</param>
        ;;; <param name="aX">X coordinate to display text at.</param>
        ;;; <param name="aY">Y coordinate to display text at.</param>
        ;;; <param name="aColor">Display the text in a specific color.</param>
        ;;; <param name="aFontName">Display text in a specific font.</param>
        ;;; <param name="aFontSize">Display text in a specific font size.</param>
        public method DrawText,    void
            required in aText,      string
            required in aX,         float
            required in aY,         float
.ifdef DBLNET
            default  in aColor,     PdfColor,   PdfColor.DefaultColor
            default  in aFontName,  string,     ^null
            default  in aFontSize,  int,        0
            default  in aUnderline, boolean,    false
.else
            optional in aColor,     PdfColor
            optional in aFontName,  string
            optional in aFontSize,  int
            optional in aUnderline, boolean
.endc
            endparams
        proc
            ;;If we don't have a first page then add one
            if (this.PageNumber==0)
                NewPage()

.ifdef DBLNET
            if ((aColor!=PdfColor.DefaultColor) && (aColor != mFillColor))
.else
            if (^passed(aColor) && (aColor != mFillColor))
.endc
            begin
                setCustomStrokeColor(aColor)
                setCustomFillColor(aColor)
            end

.ifdef DBLNET
            if (!(String.IsNullOrWhiteSpace(aFontName)) || (aFontSize>0))
.else
            if ((^passed(aFontName) && (aFontName!=^null)) || (^passed(aFontSize) && (aFontSize>0)))
.endc
            begin
                data tmpFontName, string
                data tmpFontSize, int

.ifdef DBLNET
                if (!String.IsNullOrWhiteSpace(aFontName)) then
.else
                if (^passed(aFontName) && (aFontName!=^null)) then
.endc
                    tmpFontName = aFontName
                else
                    tmpFontName = fontNormal.GetFontName()

.ifdef DBLNET
                if (aFontSize>0) then
.else
                if (^passed(aFontSize) && (aFontSize>0)) then
.endc
                    tmpFontSize = aFontSize
                else
                    tmpFontSize = mFontSize

                SelectFont(tmpFontName,tmpFontSize)
            end

            pg.BeginText()
            pg.MoveTextPos(aX,aY)
            pg.ShowText(aText)
            pg.EndText()

.ifdef DBLNET
            if (aUnderline)
.else
            if (^passed(aUnderline) && aUnderline)
.endc
            begin
                data tmpToX, float, aX + pg.TextWidth(aText)
                data tmpY, float, aY-1
                DrawLine(aX,tmpY,tmpToX,tmpY,0.5)
            end

.ifdef DBLNET
            if ((!String.IsNullOrWhiteSpace(aFontName)) || (aFontSize>0))
.else
            if ((^passed(aFontName) && (aFontName!=^null)) || (^passed(aFontSize) && (aFontSize>0)))
.endc
                ResetFont()

.ifdef DBLNET
            if ((aColor!=PdfColor.DefaultColor) && (aColor != mFillColor))
.else
            if (^passed(aColor) && (aColor != mFillColor))
.endc
            begin
                resetStrokeColor()
                resetFillColor()
            end

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws the text defined by an AutoTextAbsolute object.
        ;;; </summary>
        ;;; <param name="aText">AutoTextAbsolute object to be drawn.</param>
        public method DrawTextObject, void
            required in aText, @AutoTextAbsolute
            endparams
        proc
            DrawText(aText.Text,aText.X,aText.Y,aText.Color,aText.FontName,aText.FontSize,aText.Underline)
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws the text defined by an AutoTextRowCol object.
        ;;; </summary>
        ;;; <param name="aText">AutoTextRowCol object to be drawn.</param>
        public method DrawTextObjectRC, void
            required in aText, @AutoTextRowCol
            endparams
        proc
            DrawTextRC(aText.Text,aText.Row,aText.Col,aText.Bold,aText.Italic,aText.Color,aText.NewLine,aText.Underline)
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Draws text at the current row/column position and sets the curent position to
        ;;; the cell immediately after the displayed text, or to the last cell on the
        ;;; current line if the text extends beyond the page body.
        ;;; </summary>
        ;;; <param name="aText">Text to display.</param>
        ;;; <param name="aRow">Row within the page body to display text at.</param>
        ;;; <param name="aCol">Column within the page body to display text at.</param>
        ;;; <param name="aBold">Display the text in a bold font.</param>
        ;;; <param name="aItalic">Display the text in an italic font.</param>
        ;;; <param name="aColor">Display the text in a specific color.</param>
        ;;; <param name="aNewLine">Set current position to column 1 on the next line after printing text.</param>
        ;;; <returns>Returns the new current column position.</returns>
        public method DrawTextRC,   int
            required in aText,      string
            optional in aRow,       n
            optional in aCol,       n
.ifdef DBLNET
            default  in aBold,      boolean,    false
            default  in aItalic,    boolean,    false
            default  in aColor,     PdfColor,   PdfColor.DefaultColor
            default  in aNewLine,   boolean,    false
            default  in aUnderline, boolean,    false
.else
            optional in aBold,      boolean
            optional in aItalic,    boolean
            optional in aColor,     PdfColor
            optional in aNewLine,   boolean
            optional in aUnderline, boolean
.endc
            endparams
            record
                row,                int
                col,                int
            endrecord
        proc
            ;;If we don't have a first page then add one
            if (this.PageNumber==0)
                NewPage()

            ;;If the row is off the page then throw a new page
            if (!^passed(aRow) && (this.Row > this.Rows))
                NewPage()

            ;;Determine the output row
            if (^passed(aRow)) then
            begin
                if (aRow>0) then
                    row = aRow
                else
                    row = 1
            end
            else
                row = this.Row

            ;;Determine the output column
            if (^passed(aCol)) then
            begin
                if (aCol>0) then
                    col = aCol
                else
                    col = 1
            end
            else
                col = this.Column

            setFontAttributes(aBold,aItalic)

.ifdef DBLNET
            if ((aColor!=PdfColor.DefaultColor) && (aColor != mFillColor))
.else
            if (^passed(aColor) && (aColor != mFillColor))
.endc
            begin
                setCustomStrokeColor(aColor)
                setCustomFillColor(aColor)
            end

            pg.BeginText()
            pg.MoveTextPos(XfromColumn(col),YfromBodyRow(row))
            pg.ShowText(aText)
            pg.EndText()

            ;;Underline?
.ifdef DBLNET
            if (aUnderline)
.else
            if (^passed(aUnderline) && aUnderline)
.endc
            begin
                ;;If we're using a fixed-pitch font we can use underscore characters to do the underline
                if (mFixedPitchFont) then
                begin
                    ;;Fixed pitch, user underscores
                    data underscore, a256
                    xcall fill("_",underscore)
                    pg.BeginText()
                    pg.MoveTextPos(XfromColumn(col),YfromBodyRow(row))
                    pg.ShowText(underscore(1:aText.Length))
                    pg.EndText()
                end
                else
                begin
                    ;;Variable-pitch, draw a line
                    data tmpFromX, float, XfromColumn(col)
                    data tmpToX, float, tmpFromX + pg.TextWidth(aText)
                    data tmpY, float, YfromBodyRow(row) - 1
                    DrawLine(tmpFromX,tmpY,tmpToX,tmpY,0.5)
                end
            end

            resetFontAttributes(aBold,aItalic)

.ifdef DBLNET
            if ((aColor!=PdfColor.DefaultColor) && (aColor != mFillColor))
.else
            if (^passed(aColor) && (aColor != mFillColor))
.endc
            begin
                resetStrokeColor()
                resetFillColor()
            end

.ifdef DBLNET
            if (aNewLine) then
.else
            if (^passed(aNewLine) && aNewLine) then
.endc
            begin
                this.Row = row + 1
                this.Column = 1
            end
            else
            begin
                this.Row = row
                this.Column = col + aText.Length
                if (this.Column > this.Columns)
                    this.Column = this.Columns
            end

            mreturn this.Column

        endmethod

        ;;---------------------------------------------------------------------
        ;;

        ;;; <summary>
        ;;; Indicates whether a named font is available for use. Available fonts include the implicit fonts that are defined by the PDF specification as well as other fonts that you have loaded by calling LoadTrueTypeFont.
        ;;; </summary>
        ;;; <param name="aFontName"></param>
        ;;; <returns></returns>
        public method FontAvailable, boolean
            required in aFontName, string
            endparams
            record
                font, string
                available, boolean
            endrecord
        proc
            available = false
            foreach font in mAvailableFonts
            begin
                if (font == aFontName)
                begin
                    available = true
                    exitloop
                end
            end
            mreturn available
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Loads a TrueType font and embeds it in the PDF document ready for use.
        ;;; </summary>
        ;;; <param name="aFontFile">Full path to the font file (.ttf)</param>
        ;;; <returns>Returns the name of the font that can be passed to the SelectFont method.</returns>
        public method LoadTrueTypeFont, string
            required in aFontFile,      string
            endparams
            record
                ok, boolean
                fileSpec, string
                fontName, string
            endrecord
        proc
            ok = true
            fontName = ^null

            fileSpec = expandLogicalInFileSpec(aFontFile)

            if (!fileExists(fileSpec) || !fileSpec.ToLower().EndsWith(".ttf"))
                ok = false

            if (ok)
            begin
                try
                begin
                    fontName = doc.LoadTTFontFromFile(fileSpec,true)
                    if (fontName!=^null)
                        mAvailableFonts.Add(fontName)
                end
                catch (ex)
                begin
                    ;;Most likely cause of a crash here is a bad font format,
                    ;;especially on non-windows systems if a font file has not
                    ;;been transferred there in binary mode. On VMS font files
                    ;;should show up as:
                    ;;  File organization: Sequential
                    ;;  Record format:     Fixed length 512 byte records
                    fontName = ^null
                end
                endtry
            end

            mreturn fontName

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Sets the current position to the beginning of the next line. If the next line
        ;;; is outside of the page body then a new page is generated.
        ;;; </summary>
        ;;; <param name="aNumberOfLines">Number of blank lines to throw.</param>
        ;;; <returns>Returns the new current row number.</returns>
        public method NewLine, int
            optional in aNumberOfLines, n
            endparams
            record
                lines, int
                ix, int
            endrecord
        proc
            ;;If we don't have a first page then add one
            if (this.PageNumber==0)
                NewPage()

            if (^passed(aNumberOfLines)) then
                lines = aNumberOfLines
            else
                lines = 1

            for ix from 1 thru lines
            begin
                if (this.Row < this.Rows) then
                begin
                    this.Row = this.Row + 1
                    this.Column = 1
                end
                else
                begin
                    ;;If we did a new line then the current position would be below the page
                    ;;body, so instead we'll start a new page in the same orientation as the
                    ;;current page
                    NewPage(this.Orientation)
                end
            end

            mreturn this.Row

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Starts a new page.
        ;;; </summary>
        ;;; <returns>Returns the new page number.</returns>
        public method NewPage, int
            optional in aOrientation, PdfOrientation
            optional in aOutlineText, a
            endparams
            record
                orientation, PdfOrientation
                pageOutLine, @HPdfOutline
                pageDestination, @HPdfDestination
            endrecord
        proc

            ;;Print page level items on the current page
            if (this.PageNumber>0)
                printEndPageItems()

            ;;Default to the document default arientation
            orientation = this.DefaultOrientation

            ;;Determine the page orientation of the new page
.ifdef DBLNET
            if ((aOrientation!=PdfOrientation.DefaultOrientation) && (this.Orientation!=aOrientation)) then
.else
            if (^passed(aOrientation) && (this.Orientation!=aOrientation)) then
.endc
            begin
                orientation = aOrientation
                if (this.Orientation == this.DefaultOrientation) then
                begin
                    this.Height = totalHeightOtherOrientation
                    this.Width = totalWidthOtherOrientation
                    this.Rows = totalRowsOtherOrientation - this.HeaderRows - this.FooterRows
                    this.Columns = totalColsOtherOrientation
                end
                else
                begin
                    this.Height = totalHeightDefaultOrientation
                    this.Width = totalWidthDefaultOrientation
                    this.Rows = totalRowsDefaultOrientation - this.HeaderRows - this.FooterRows
                    this.Columns = totalColsDefaultOrientation
                end
            end
            else
            begin
                if (this.Orientation != this.DefaultOrientation)
                begin
                    this.Height = totalHeightDefaultOrientation
                    this.Width = totalWidthDefaultOrientation
                    this.Rows = totalRowsDefaultOrientation - this.HeaderRows - this.FooterRows
                    this.Columns = totalColsDefaultOrientation
                end
            end

            ;;Add a new page to the PDF file
            pg = doc.AddPage((HPdfPageSizes)this.PageSize,(HPdfPageDirection)orientation)
            this.Orientation = orientation

            ;;Start a text writer with the default font and size
            pg.StartPageWithFont(fontNormal,fontSizeFloat)

            ;;If an alternate font was active then make it active for the new page
            if (this.CurrentFont != fontNormal.GetFontName())
                SelectFont(this.CurrentFont,this.CurrentFontSize)

            pg.EndText()

            ;;Make sure that text is drawn as solid letters, not an outline with a seperate fill
            pg.SetTextRenderingMode(HPdfTextRenderingMode.HPDF_FILL)

            ;;Set any custom page background color
            setBackroundColor()

            ;;Put the default colors in place for the new page
            pg.SetRGBFill(textRed,textGreen,textBlue)
            pg.SetRGBStroke(lineRed,lineGreen,lineBlue)

            ;;Record the new page number and reset the page's current row counter
            this.PageNumber = this.PageNumber + 1

            ;;Add any BeginPage auto items
            printBeginPageItems()

            this.Row = 1
            this.Column = 1

            ;;If this is the first page, and we're creating an outline, create the root outline object
            if ((this.PageNumber==1) && (this.CreateOutline == true))
            begin
                ol = doc.CreateOutline(^null,this.OutlineRootText,^null)
                ol.SetOpened(true)
            end

            ;;Add the outline item for the page
            if (this.CreateOutline && ((!^passed(aOutlineText)) || aOutlineText))
            begin
                ;;Define the text to use for the page outline
                data outlineText, string
                if (^passed(aOutlineText) && aOutlineText) then
                    outlineText = %atrim(aOutlineText)
                else
                    outlineText = "Page " + %string(this.PageNumber)
                ;;Create a new destination object as the target for an outline object
                pageDestination = pg.CreateDestination()
                pageDestination.SetXYZ(0,pg.GetHeight(),1)
                ;;Add a new outline object for the page
                pageOutLine = doc.CreateOutline(ol,outlineText,^null)
                pageOutLine.SetDestination(pageDestination)
            end

            mreturn this.PageNumber

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Displays the PDF file using the default application that is registered to handle
        ;;; PDF files. The Dispose method is automatically called so after calling this method
        ;;; the PdfFile object is no longer valid.
        ;;; </summary>
        ;;; <returns>Returns true if the PDF file was saved and launched.</returns>
        public method Preview, boolean
            optional out aErrorMessage, a
            endparams
            record
                ok,             boolean
                errorMessage,   a256
            endrecord
        proc
.ifndef D_GUI
            ;;Preview is Windows only; best we can do is save the file.
            if (this.Save(errorMessage)) then
                errorMessage = "Preview is not supported on this system. The PDF file was saved."
            else
                errorMessage = "Preview is not supported on this system and there was a problem saving the PDF file. The error was " + errorMessage
            ok = false
.else
            if (this.Save(errorMessage)) then
            begin
                ;;And launch the associated application
                xcall shell(,'"'+this.FileLocation+this.FileName+'"',D_NOCONSOLE|D_NOWAIT)
                ok = true
            end
            else
            begin
                ;;Error message has already been set by Save()
                ok = false
            end
.endc
            if (^passed(aErrorMessage))
                aErrorMessage = errorMessage

            mreturn ok

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Displays the PDF file using the default application that is registered to handle
        ;;; PDF files. The Dispose method is automatically called so after calling this method
        ;;; the PdfFile object is no longer valid.
        ;;; </summary>
        ;;; <returns>Returns true if the PDF file was saved and launched.</returns>
        public static method PreviewFile, boolean
            required in  aPdfFileSpec, string
            optional out aErrorMessage, a
            endparams
            record
                ok, boolean
                pdfFileSpec, string
                errorMessage, string
            endrecord
        proc

.ifndef D_GUI
            errorMessage = "PreviewFile is not supported on this system!"
            ok = false
.else
            errorMessage = ""
            pdfFileSpec = expandLogicalInFileSpec(aPdfFileSpec)

            if (fileExists(pdfFileSpec)) then
            begin
                try
                begin
                    ;;Launch the associated application
                    xcall shell(,'"'+pdfFileSpec+'"',D_NOCONSOLE|D_NOWAIT)
                    ok = true
                end
                catch (ex)
                begin
                    errorMessage = "Failed to launch PDF viewer. Error was " + ex.Message
                    ok = false
                end
                endtry
            end
            else
            begin
                errorMessage = "PDF file " + pdfFileSpec + " not found!"
                ok = false
            end
.endc
            if (^passed(aErrorMessage))
                aErrorMessage = errorMessage

            mreturn ok

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Print the PDF file to a printer.
        ;;; </summary>
        ;;; <param name="aPrinterName">Optional printer name. If not passed then the users default printer is used.</param>
        ;;; <param name="aErrorMessage">Optional returned error message.</param>
        ;;; <returns></returns>
        public method Print, boolean
            optional in  aPrinterName,  a
            optional out aErrorMessage, a
            endparams
            .define D_SUMATRA_EXE "C:\Program Files (x86)\SumatraPDF\SumatraPDF.exe"
            record
                ok,             boolean
                pdfFileSpec,    string
                command,        string
                errorMessage,   a256
            endrecord
        proc

.ifndef D_GUI
            ;;Print is Windows only; best we can do is save the file.
            if (this.Save(errorMessage)) then
                errorMessage = "Print is not supported on this system. The PDF file was saved."
            else
                errorMessage = "Print is not supported on this system and there was a problem saving the PDF file. The error was " + errorMessage
            ok = false
.else
            if (this.Save(errorMessage)) then
            begin
                pdfFileSpec = this.FileLocation + this.FileName
                if (fileExists(pdfFileSpec)) then
                begin
                    if (fileExists(D_SUMATRA_EXE)) then
                    begin
                        if (^passed(aPrinterName) && aPrinterName) then
                            command = D_SUMATRA_EXE + ' -print-to "' + %atrim(aPrinterName) + '" -silent -exit-on-print ' + '"' + pdfFileSpec + '"'
                        else
                            command = D_SUMATRA_EXE + ' -print-to-default -silent -exit-on-print ' + '"' + pdfFileSpec + '"'
                        try
                        begin
                            xcall spawn(command,D_NOCONSOLE|D_NOWINDOW)
                            ok = true
                        end
                        catch (ex)
                        begin
                            errorMessage = "Failed to launch SumatraPDF. Error was " + ex.Message
                            ok = false
                        end
                        endtry
                    end
                    else
                    begin
                        errorMessage = "SumartaPDF was not found!"
                        ok = false
                    end
                end
                else
                begin
                    errorMessage = "PDF file " + pdfFileSpec + " not found!"
                    ok = false
                end
            end
            else
            begin
                ;;Error message already set by Save()
                ok = false
            end
.endc
            if (^passed(aErrorMessage))
                aErrorMessage = errorMessage

            mreturn ok

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Print a PDF file directly from disk.
        ;;; </summary>
        ;;; <param name="aPPdfFileName">Name of PDF file to be printed.</param>
        ;;; <param name="aPrinterName">Optional printer name. If not passed then the users default printer is used.</param>
        ;;; <param name="aErrorMessage">Optional returned error message.</param>
        ;;; <returns></returns>
        public static method PrintFile, boolean
            required in  aPdfFileSpec,  a
            optional in  aPrinterName,  a
            optional out aErrorMessage, a
            endparams

            .define D_SUMATRA_EXE "C:\Program Files (x86)\SumatraPDF\SumatraPDF.exe"

            record
                ok,             boolean
                pdfFileSpec,    string
                command,        string
                errorMessage,   string
            endrecord

        proc

.ifdef D_GUI
            errorMessage = "PrintFile is not supported on this system!"
            ok = false
.else
            errorMessage = ""

            pdfFileSpec = expandLogicalInFileSpec(aPdfFileSpec)

            if (fileExists(pdfFileSpec)) then
            begin
                if (fileExists(D_SUMATRA_EXE)) then
                begin
                    if (^passed(aPrinterName) && aPrinterName) then
                        command = D_SUMATRA_EXE + ' -print-to "' + %atrim(aPrinterName) + '" -silent -exit-on-print ' + '"' + pdfFileSpec + '"'
                    else
                        command = D_SUMATRA_EXE + ' -print-to-default -silent -exit-on-print ' + '"' + pdfFileSpec + '"'

                    try
                    begin
                        xcall spawn(command,D_NOCONSOLE|D_NOWINDOW)
                        ok = true
                    end
                    catch (ex)
                    begin
                        errorMessage = "Failed to launch SumatraPDF. Error was " + ex.Message
                        ok = false
                    end
                    endtry
                end
                else
                begin
                    errorMessage = "SumartaPDF was not found!"
                    ok = false
                end
            end
            else
            begin
                errorMessage = "PDF file " + pdfFileSpec + " not found!"
                ok = false
            end
.endc
            if (^passed(aErrorMessage))
                aErrorMessage = errorMessage

            mreturn ok

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Show a SumartsPDF Print Dialog to print the PDF document.
        ;;; </summary>
        ;;; <param name="aErrorMessage">Optional returned error message.</param>
        ;;; <returns></returns>
        public method PrintDialog, boolean
            optional out aErrorMessage, a
            endparams
            .define D_SUMATRA_EXE "C:\Program Files (x86)\SumatraPDF\SumatraPDF.exe"
            record
                ok,             boolean
                pdfFileSpec,    string
                command,        string
                errorMessage,   a256
            endrecord
        proc
.ifndef D_GUI
            ;;PrintDialog is Windows only; best we can do is save the file.
            if (this.Save(errorMessage)) then
                errorMessage = "PrintDialog is not supported on this system. The PDF file was saved."
            else
                errorMessage = "PrintDialog is not supported on this system and there was a problem saving the PDF file. The error was " + errorMessage
            ok = false
.else
            if (this.Save(errorMessage)) then
            begin
                pdfFileSpec = this.FileLocation + this.FileName
                if (fileExists(pdfFileSpec)) then
                begin
                    if (fileExists(D_SUMATRA_EXE)) then
                    begin
                        command = D_SUMATRA_EXE + ' -print-dialog -silent -exit-on-print ' + '"' + pdfFileSpec + '"'
                        try
                        begin
                            xcall spawn(command,D_NOCONSOLE|D_NOWINDOW)
                            ok = true
                        end
                        catch (ex)
                        begin
                            errorMessage = "Failed to launch SumatraPDF. Error was " + ex.Message
                            ok = false
                        end
                        endtry
                    end
                    else
                    begin
                        errorMessage = "SumartaPDF was not found!"
                        ok = false
                    end
                end
                else
                begin
                    errorMessage = "PDF file " + pdfFileSpec + " not found!"
                    ok = false
                end
            end
            else
            begin
                ;;Error message already set by Save()
                ok = false
            end
.endc
            if (^passed(aErrorMessage))
                aErrorMessage = errorMessage

            mreturn ok

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Resets the font to Courier and the size to that calculated during Initialize.
        ;;; Call this method to return to fixed-pitch row/column mode after woking with
        ;;; other (generally variable-pitch) fonts.
        ;;; </summary>
        public method ResetFont, void
            endparams
        proc
            SelectFont(fontNormal.GetFontName(),this.FontSize)
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Saves the PDF file to disk.
        ;;; </summary>
        ;;; <returns>Returns true if the PDF file was successfully saved.</returns>
        public method Save, boolean
            optional out aErrorMessage, a
            endparams
            record
                ok, boolean
                errorMessage, string
            endrecord
        proc
            ;;Print page level items on the last page
            printEndPageItems()

            ;;Create the PDF file on disk
            try
            begin
                doc.SaveToFile(this.FileLocation+this.FileName)
                errorMessage = ""
                ok = true
            end
            catch (ex)
            begin
                errorMessage = "Failed to save " + this.FileLocation+mFileName + ". Error was " + ex.Message
                ok = false
            end
            endtry

            ;;Clean up
            this.Dispose()

            if (^passed(aErrorMessage))
                aErrorMessage = errorMessage

            mreturn ok

        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Selects the font that will be used for subsequent text operations.
        ;;; </summary>
        ;;; <param name="aFontName">Font name as returned by LoadTrueTypeFont, or one of the native PDF font names (Courier, Courier-Bold, Courier-Oblique, Courier-BoldOblique, Helvetica, Helvetica-Bold, Helvetica-Oblique, Helvetica-BoldOblique, Times-Roman, Times-Bold, Times-Italic, Times-BoldItalic, Symbol, ZapfDingbats)</param>
        ;;; <param name="aFontSize">Point size to use.</param>
        public method SelectFont, void
            required in aFontName, string
            required in aFontSize, int
            endparams
            record
                fontSize, float
                newFont, @HPdfFont
                fontName, string
                found, boolean
            endrecord
        proc
            ;;If the font is available then switch to it
            if (FontAvailable(aFontName))
            begin
                newFont = doc.GetFont(aFontName, ^null)
                pg.SetFontAndSize(newFont,fontSize = aFontSize)
                this.CurrentFont = aFontName
                this.CurrentFontSize = aFontSize
                this.FixedPitchFont = (pg.TextWidth("W") == pg.TextWidth("|"))
            end
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Sets the current position within the current page.
        ;;; </summary>
        ;;; <param name="aRow">Row position, between 1 and Rows.</param>
        ;;; <param name="aColumn">Column position, between 1 and Columns.</param>
        public method SetPosition,  void
            optional in aRow,       n
            optional in aColumn,    n
            endparams
        proc
            ;;If we don't have a first page then add one
            if (this.PageNumber==0)
                NewPage()

            if (^passed(aRow))
            begin
                if (aRow < 1) then
                    this.Row = 1
                else if (aRow > this.Rows) then
                    this.Row = this.Rows
                else
                    this.Row = aRow
            end

            if (^passed(aColumn))
            begin
                if (aColumn < 1) then
                    this.Column = 1
                else if (aColumn > this.Columns) then
                    this.Column = this.Columns
                else
                    this.Column = aColumn
            end

        endmethod

        ;;---------------------------------------------------------------------
        ;;

        ;;; <summary>
        ;;; Converts a column number to an X coordinate.
        ;;; </summary>
        ;;; <param name="aCol"></param>
        ;;; <returns></returns>
        public method XfromColumn, float
            required in aColumn, int
            endparams
        proc
            mreturn leftOffset + ((aColumn-1) * this.ColumnWidth)
        endmethod

        ;;---------------------------------------------------------------------
        ;;

        ;;; <summary>
        ;;; Converts a body row number to a Y coordinate.
        ;;; </summary>
        ;;; <param name="aRow"></param>
        ;;; <returns></returns>
        public method YfromBodyRow, float
            required in aBodyRow, int
            endparams
        proc
            mreturn this.Height - topOffset - (this.HeaderRows * this.RowHeight) - (aBodyRow * this.RowHeight) + this.ExtraRowSpacing
        endmethod

        ;;---------------------------------------------------------------------
        ;;

        ;;; <summary>
        ;;; Converts a footer row number to a Y coordinate.
        ;;; </summary>
        ;;; <param name="aFooterRow"></param>
        ;;; <returns></returns>
        public method YfromFooterRow, float
            required in aFooterRow, int
            endparams
        proc
            mreturn mHeight - topOffset - (mHeaderRows * mRowHeight) - (mRows * mRowHeight) - (aFooterRow * mRowHeight) + this.ExtraRowSpacing
        endmethod

        ;;---------------------------------------------------------------------
        ;;

        ;;; <summary>
        ;;; Converts a header row number to a Y coordinate.
        ;;; </summary>
        ;;; <param name="aHeaderRow"></param>
        ;;; <returns></returns>
        public method YfromHeaderRow, float
            required in aHeaderRow, int
            endparams
        proc
            mreturn this.Height - topOffset - (aHeaderRow * this.RowHeight) + this.ExtraRowSpacing
        endmethod

        ;;*********************************************************************
        ;;PUBLIC PROPERTIES

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Gets or sets the name of the author of the PDF document.
        ;;; </summary>
        public property Author, string
            method get
            proc
                mreturn doc.GetInfoAttr(HPdfInfoType.HPDF_INFO_AUTHOR)
            endmethod
            method set
            proc
                doc.SetInfoAttr(HPdfInfoType.HPDF_INFO_AUTHOR,value)
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mAutoItems, @ArrayList

        ;;; <summary>
        ;;; Gets or sets a collection of auto objects to be drawn on each page.
        ;;; </summary>
        public property AutoItems, @ArrayList
            method get
            proc
                mreturn mAutoItems
            endmethod
            method set
            proc
                mAutoItems = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mAvailableFonts, @ArrayList

        ;;; <summary>
        ;;; Gets or sets a collection of available font names.
        ;;; </summary>
        public property AvailableFonts, @ArrayList
            method get
            proc
                mreturn mAvailableFonts
            endmethod
            private method set
            proc
                mAvailableFonts = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mBackgroundColor, PdfColor
        private backgroundRed,    float
        private backgroundGreen,  float
        private backgroundBlue,   float

        ;;; <summary>
        ;;; Gets or sets the page background color. A custom value for page background color can be established via an optional parameter passed to the constructor method, and will be used for the first page. Subsequently changing the page background color will affect only new pages that are created after the background color is changed. There is no way to change the background color of a page after the page has been created. The default page background color is white.
        ;;; </summary>
        public property BackgroundColor, PdfColor
            method get
            proc
                mreturn mBackgroundColor
            endmethod
            method set
            proc
                mBackgroundColor = value
                rgbFromPdfColor(mBackgroundColor,backgroundRed,backgroundGreen,backgroundBlue)
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mBottomMargin, float

        ;;; <summary>
        ;;; Gets the height of the bottom margin in inches. Page margins are determined by parameters that are passed to the constructor and once defined cannot be changed. Margins only affect row and column based access to the document and do not affect absolute positioning access.
        ;;; </summary>
        public property BottomMargin, float
            method get
            proc
                mreturn mBottomMargin
            endmethod
            private method set
            proc
                mBottomMargin = value
                bottomOffset = mBottomMargin * 72
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mCenterBodyInPage, boolean

        ;;; <summary>
        ;;; Gets whether the main page body (the printable area inside any specified margins) will be centered horizontally. The default value is true, and this can be overridden via a parameter passed to the Initialize method. When true, after an appropriate font size has been calculated in order to facilitate the required column width of the document, the left and right margins are altered in order to ensure than content is centered horizontally within each page. Page margins and body only affect row / column based access to the document and do not affect absolute positioning access.
        ;;; </summary>
        public property CenterBodyInPage, int
            method get
            proc
                mreturn mCenterBodyInPage
            endmethod
            private method set
            proc
                mCenterBodyInPage = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mColumn, int

        ;;; <summary>
        ;;; Gets or sets the current column number. The concept of a current row and column is used when accessing the document by row and column, and is similar to the concept of current cursor position on the screen of a character based application. Generally, when displaying text to the document via the various methods that address row and column, the current position in the document moves either immediately after the printed text, or to the first column of the next row. Current row and column do not affect absolute positioning access to the document.
        ;;; </summary>
        public property Column, int
            method get
            proc
                mreturn mColumn
            endmethod
            method set
            proc
                mColumn = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mColumns, int

        ;;; <summary>
        ;;; Gets the number of columns that are available, based on the requested margins and page width, at the selected font size. The number of columns actually available will generally to be equal to or greater to the number of columns requested via the optional "minimum columns" parameter passed to the Initialize method. The number of available columns is only applicable when accessing the document by row and column, and does not affect absolute positioning access to the document.
        ;;; </summary>
        public property Columns, int
            method get
            proc
                mreturn mColumns
            endmethod
            private method set
            proc
                mColumns = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mColumnWidth, float

        ;;; <summary>
        ;;; Gets the width of a single column in device independent pixels (1/72 inch). The width is based on the font that was selected in order to achieve the number of columns required for the page. Column width is only applicable to row/column based access to the document using the default Courier font and has no significance when addressing the document via absolute positioning or alternate fonts.
        ;;; </summary>
        public property ColumnWidth, float
            method get
            proc
                mreturn mColumnWidth
            endmethod
            private method set
            proc
                mColumnWidth = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        ;;; <summary>
        ;;; Gets the absolute coordinate system X coordinate that corresponds to the row/column coordinate system current column number.
        ;;; </summary>
        public property ColumnX, float
            method get
            proc
                mreturn XfromColumn(mColumn)
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Gets or sets whether a document outline is created and whether default outline items are automatically added for each page.
        ;;; </summary>

        private mCreateOutline, boolean, true

        public property CreateOutline, boolean
            method get
            proc
                mreturn mCreateOutline
            endmethod
            method set
            proc
                mCreateOutline = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Gets the creation date of the document.
        ;;; </summary>
        public property CreationDate, string
            method get
            proc
                mreturn doc.GetInfoAttr(HPdfInfoType.HPDF_INFO_CREATION_DATE)
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Gets or sets the name of the creator of the PDF document. By default this property is set to "Synergex PSG PdfFile Class".
        ;;; </summary>
        public property Creator, string
            method get
            proc
                mreturn doc.GetInfoAttr(HPdfInfoType.HPDF_INFO_CREATOR)
            endmethod
            method set
            proc
                doc.SetInfoAttr(HPdfInfoType.HPDF_INFO_CREATOR,value)
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Gets the name of the currently selected font.
        ;;; </summary>

        private mCurrentFont, string

        public property CurrentFont, string
            method get
            proc
                mreturn mCurrentFont
            endmethod
            private method set
            proc
                mCurrentFont = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Gets the currently selected font size.
        ;;; </summary>

        private mCurrentFontSize, int

        public property CurrentFontSize, int
            method get
            proc
                mreturn mCurrentFontSize
            endmethod
            private method set
            proc
                mCurrentFontSize = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mDefaultOrientation, PdfOrientation

        ;;; <summary>
        ;;; Gets the default page orientation (portrait or landscape) of the PDF document. The deafult page orientation is defined for the document when calling the constructor method and cannot be changed.
        ;;; </summary>
        public property DefaultOrientation, PdfOrientation
            method get
            proc
                mreturn mDefaultOrientation
            endmethod
            private method set
            proc
                mDefaultOrientation = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mExtraRowSpacing, float

        ;;; <summary>
        ;;; Gets the amount of additional space that was requested between rows in device independent pixels.
        ;;; </summary>
        public property ExtraRowSpacing, float
            method get
            proc
                mreturn mExtraRowSpacing
            endmethod
            private method set
            proc
                mExtraRowSpacing = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mFileLocation, string

        ;;; <summary>
        ;;; Gets the location where the output file will be created as a full windows path including a trailing \.
        ;;; </summary>
        public property FileLocation, string
            method get
            proc
                mreturn mFileLocation
            endmethod
            private method set
            proc
                mFileLocation = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mFileName, string

        ;;; <summary>
        ;;; Gets the name of the PDF file being created. The default name of the file will be in the format "YYYY-MM-DD HH.MM.SS <name> .pdf" where the value of <name> can be supplied via the optional "partial file name" parameter to the Initialize method. The name of the file is not used until you call either the Print, Preview or Save methods, so you may update the value of the property in order to override the default name until that time.
        ;;; </summary>
        public property FileName, string
            method get
            proc
                mreturn mFileName
            endmethod
            public method set
            proc
                mFileName = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;
        ;;; <summary>
        ;;; Gets the full file spec of the PDF file being created.
        ;;; </summary>

        public property FileSpec, string
            method get
            proc
                mreturn mFileLocation + mFileName
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mFillColor, PdfColor
        private textRed,    float
        private textGreen,  float
        private textBlue,   float

        ;;; <summary>
        ;;; Gets or sets the current fill color, which is the colur used to paint the internal areas of both text and lines, and boxes if the optional "fill" parameter is passed and true. The default fill color is black. The default fill color can be overridden when printing or drawing individual text, line or box items.
        ;;; </summary>
        public property FillColor, PdfColor
            method get
            proc
                mreturn mFillColor
            endmethod
            method set
            proc
                mFillColor = value
                rgbFromPdfColor(mFillColor,textRed,textGreen,textBlue)
                pg.SetRGBFill(textRed,textGreen,textBlue)
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mFixedPitchFont, boolean

        ;;; <summary>
        ;;; Gets whether the currently selected font is a fixed-pitch font.
        ;;; </summary>
        public property FixedPitchFont, boolean
            method get
            proc
                mreturn mFixedPitchFont
            endmethod
            private method set
            proc
                mFixedPitchFont = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mFontSize, int
        private fontSizeFloat, float

        ;;; <summary>
        ;;; Gets the height of the default (automatically selected) font in device independent pixels (1/72 inch). The FontSize only has relevance when addressing the document using the default (Coruier) font.
        ;;; </summary>
        public property FontSize, int
            method get
            proc
                mreturn mFontSize
            endmethod
            private method set
            proc
                mFontSize = value
                fontSizeFloat = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mFooterRows, int

        ;;; <summary>
        ;;; Gets the number of footer rows that were reserved when the document was created. Footer rows are only relevant when using the FooterText property, and have no affect when accessing the document via absolute positioning mechanisms.
        ;;; </summary>
        public property FooterRows, int
            method get
            proc
                mreturn mFooterRows
            endmethod
            private method set
            proc
                mFooterRows = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mFooterText, [#]string

        ;;; <summary>
        ;;; Gets or sets the array of strings to be displayed in the reserved page footer rows of pages that use the default page orientation. The array is initialized based on the number of footer rows requested when calling the constructor, and can subsequently be populated with the data to be displayed in the reserved footer area of each page.
        ;;; </summary>
        public property FooterText, [#]string
            method get
            proc
                mreturn mFooterText
            endmethod
            private method set
            proc
                mFooterText = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mFooterTextAlternate, [#]string

        ;;; <summary>
        ;;; Gets or sets the array of strings to be displayed in the reserved page footer rows of pages with the alternate orientation. The array is initialized based on the number of footer rows requested when calling the constructor, and can subsequently be populated with the data to be displayed in the reserved footer area of each page.
        ;;; </summary>
        public property FooterTextAlternate, [#]string
            method get
            proc
                mreturn mFooterTextAlternate
            endmethod
            private method set
            proc
                mFooterTextAlternate = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;
        ;;; <summary>
        ;;; Exposes the underlying HaruPDF document so that PDFDBL can be used to implement functionality not directly supported by this class.
        ;;; </summary>
        public property HaruDocument, @HPdfDoc
            method get
            proc
                mreturn doc
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mHeaderRows, int

        ;;; <summary>
        ;;; Gets the number of header rows that were reserved when the document was created. Header rows are only relevant when using the FooterText property, and have no affect when accessing the document via absolute positioning mechanisms.
        ;;; </summary>
        public property HeaderRows, int
            method get
            proc
                mreturn mHeaderRows
            endmethod
            private method set
            proc
                mHeaderRows = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mHeaderText, [#]string

        ;;; <summary>
        ;;; Gets or sets the array of strings to be displayed in the reserved page header rows of pages that use the default page orientation. The array is initialized based on the number of header rows requested when calling the constructor, and can subsequently be populated with the data to be displayed in the reserved header area of each page.
        ;;; </summary>
        public property HeaderText, [#]string
            method get
            proc
                mreturn mHeaderText
            endmethod
            private method set
            proc
                mHeaderText = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mHeaderTextAlternate, [#]string

        ;;; <summary>
        ;;; Gets or sets the array of strings to be displayed in the reserved page header rows. The array is initialized based on the number of header rows requested when calling the constructor, and can subsequently be populated with the data to be displayed in the reserved header area of each page.
        ;;; </summary>
        public property HeaderTextAlternate, [#]string
            method get
            proc
                mreturn mHeaderTextAlternate
            endmethod
            private method set
            proc
                mHeaderTextAlternate = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mHeight, float

        ;;; <summary>
        ;;; Gets the height of the page in device independent pixels (1/72 inch). The height of the page is based on the paper size and orientation and defines the maximum value for Y coordinates when addressing the document via absolute positioning mechanisms.
        ;;; </summary>
        public property Height, float
            method get
            proc
                mreturn mHeight
            endmethod
            private method set
            proc
                mHeight = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Gets or sets the keywords of the PDF document.
        ;;; </summary>
        public property Keywords, string
            method get
            proc
                mreturn doc.GetInfoAttr(HPdfInfoType.HPDF_INFO_KEYWORDS)
            endmethod
            method set
            proc
                doc.SetInfoAttr(HPdfInfoType.HPDF_INFO_KEYWORDS,value)
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mLeftMargin, float

        ;;; <summary>
        ;;; Gets the width of the left margin in inches. Page margins are determined by parameters that are passed to the constructor and once defined cannot be changed. Margins only affect row and column based access to the document and do not affect absolute positioning access.
        ;;; </summary>
        public property LeftMargin, float
            method get
            proc
                mreturn mLeftMargin
            endmethod
            private method set
            proc
                mLeftMargin = value
                leftOffset = mLeftMargin * 72
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Gets the modification date attribute of the PDF document.
        ;;; </summary>
        public property ModificationDate, string
            method get
            proc
                mreturn doc.GetInfoAttr(HPdfInfoType.HPDF_INFO_MOD_DATE)
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mOrientation, PdfOrientation

        ;;; <summary>
        ;;; Gets the page orientation (portrait or landscape) of the current page. The page orientation is defined when a new page is added to the document.
        ;;; </summary>
        public property Orientation, PdfOrientation
            method get
            proc
                mreturn mOrientation
            endmethod
            private method set
            proc
                mOrientation = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mOutlineRootText, string

        ;;; <summary>
        ;;; Gets the page orientation (portrait or landscape) of the current page. The page orientation is defined when a new page is added to the document.
        ;;; </summary>
        public property OutlineRootText, string
            method get
            proc
                mreturn mOutlineRootText
            endmethod
            public method set
            proc
                mOutlineRootText = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        ;;; <summary>
        ;;; Gets or sets the suggested page layout to be used by PDF reader applications when viewing the PDF document being created. Note that setting this property does not guarantee a particular page layout mode being used because some PDF reader applications allow the user to override the setting specified by the PDF document.
        ;;; </summary>
        public property PageLayout, PdfPageLayout
            method get
            proc
                mreturn (PdfPageLayout)doc.GetPageLayout()
            endmethod
            method set
            proc
                doc.SetPageLayout((HPdfPageLayout)value)
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        ;;; <summary>
        ;;; Gets or sets the suggested page mode to be used by PDF reader applications when viewing the PDF document being created. Note that setting this property does not guarantee a particular page mode being used because some PDF reader applications allow the user to override the setting specified by the PDF document.
        ;;; </summary>
        public property PageMode, PdfPageMode
            method get
            proc
                mreturn (PdfPageMode)doc.GetPageMode()
            endmethod
            method set
            proc
                doc.SetPageMode((HPdfPageMode)value)
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mPageNumber, int

        ;;; <summary>
        ;;; Gets the current page number. New pages can be created implicitly if performing "sequential writes" to the document, or explicitly by calling the the NewPage method. Once the document advances to a new page there is no way to go back to address earlier pages.
        ;;; </summary>
        public property PageNumber, int
            method get
            proc
                mreturn mPageNumber
            endmethod
            private method set
            proc
                mPageNumber = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mPageSize, PdfPageSize

        ;;; <summary>
        ;;; Gets the page size used within the document.
        ;;; </summary>
        public property PageSize, PdfPageSize
            method get
            proc
                mreturn mPageSize
            endmethod
            private method set
            proc
                mPageSize = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mRequestedColumns, int

        ;;; <summary>
        ;;; Number of columns originally requested by the consuler.
        ;;; </summary>
        public property RequestedColumns, int
            method get
            proc
                mreturn mRequestedColumns
            endmethod
            private method set
            proc
                mRequestedColumns = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mRightMargin, float

        ;;; <summary>
        ;;; Gets the width of the right margin in inches. Page margins are determined by parameters that are passed to the constructor and once defined cannot be changed. Margins only affect row and column based access to the document and do not affect absolute positioning access.
        ;;; </summary>
        public property RightMargin, float
            method get
            proc
                mreturn mRightMargin
            endmethod
            private method set
            proc
                mRightMargin = value
                rightOffset = mRightMargin * 72
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mRow, int

        ;;; <summary>
        ;;; Gets or sets the current row number. The concept of a current row and column is used when accessing the document by row and column, and is similar to the concept of current cursor position on the screen of a character based application. Generally, when displaying text to the document via the various methods that address row and column, the current position in the document moves either immediately after the printed text, or to the first column of the next row. Current row and column do not affect absolute positioning access to the document.
        ;;; </summary>
        public property Row, int
            method get
            proc
                mreturn mRow
            endmethod
            method set
            proc
                mRow = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mRowHeight, float

        ;;; <summary>
        ;;; Height of a row in device independent pixels (1/72 inch). This INCLUDES any additional row spacing that was requested.
        ;;; </summary>
        public property RowHeight, float
            method get
            proc
                mreturn mRowHeight
            endmethod
            private method set
            proc
                mRowHeight = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mRows, int

        ;;; <summary>
        ;;; Gets the number of rows that are available within the page body (i.e. between any top margin, header rows, footer rows and bottom margin), based on the page height, the requested top and bottom margins, and the number and height of any page header and footer rows, at the selected font size. The number of available rows is only applicable when accessing the document by row and column mechanisms and has no effect when accessing to the document via absolute positioning mechanisms.
        ;;; </summary>
        public property Rows, int
            method get
            proc
                mreturn mRows
            endmethod
            private method set
            proc
                mRows = value
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        ;;; <summary>
        ;;; Gets the absolute coordinate system Y coordinate that corresponds to the row/column coordinate system current row number.
        ;;; </summary>
        public property RowY, float
            method get
            proc
                mreturn YfromBodyRow(mRow)
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mStrokeColor,   PdfColor
        private lineRed,    float
        private lineGreen,  float
        private lineBlue,   float

        ;;; <summary>
        ;;; Gets or sets the current stroke color, which is the color used to paint the outside edge of lines, boxes and text. The default stroke color is black. The default stroke color can be overridden when printing or drawing individual text, line or box items.
        ;;; </summary>
        public property StrokeColor, PdfColor
            method get
            proc
                mreturn mStrokeColor
            endmethod
            method set
            proc
                mStrokeColor = value
                rgbFromPdfColor(mStrokeColor,lineRed,lineGreen,lineBlue)
                pg.SetRGBStroke(lineRed,lineGreen,lineBlue)
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Gets or sets the subject attribute of the PDF document.
        ;;; </summary>
        public property Subject, string
            method get
            proc
                mreturn doc.GetInfoAttr(HPdfInfoType.HPDF_INFO_SUBJECT)
            endmethod
            method set
            proc
                doc.SetInfoAttr(HPdfInfoType.HPDF_INFO_SUBJECT,value)
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Gets or sets the title attribute of the PDF document.
        ;;; </summary>
        public property Title, string
            method get
            proc
                mreturn doc.GetInfoAttr(HPdfInfoType.HPDF_INFO_TITLE)
            endmethod
            method set
            proc
                doc.SetInfoAttr(HPdfInfoType.HPDF_INFO_TITLE,value)
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mTopMargin, float

        ;;; <summary>
        ;;; Gets the height of the top margin in inches. Page margins are determined by parameters that are passed to the constructor and once defined cannot be changed. Margins only affect row and column based access to the document and do not affect absolute positioning access.
        ;;; </summary>
        public property TopMargin, float
            method get
            proc
                mreturn mTopMargin
            endmethod
            private method set
            proc
                mTopMargin = value
                topOffset = mTopMargin * 72
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mUseAlternateFooters, boolean, false

        ;;; <summary>
        ;;; Gets or sets whether alternate text should be displayed in the page footers of pages that use the opposite orientation to the document default orientation. The default is that the same footer text is used for all pages. If this property is set to true then the alternative footer text should then be specified via the FooterTextAlternate property.
        ;;; </summary>
        public property UseAlternateFooters, boolean
            method get
            proc
                mreturn mUseAlternateFooters
            endmethod
            method set
            proc
                ;;We can only enable this if there are footer rows
                if (this.FooterRows > 0) then
                    mUseAlternateFooters = value
                else
                    mUseAlternateFooters = false

                ;;Initialize the array of alternate footer items
                if (mUseAlternateFooters) then
                begin
                    data ix, int
                    this.FooterTextAlternate = new string[this.FooterRows]
                    for ix from 1 thru this.FooterRows
                        this.FooterTextAlternate[ix] = ""
                end
                else
                    this.FooterTextAlternate = ^null
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mUseAlternateHeaders, boolean, false

        ;;; <summary>
        ;;; Gets or sets whether alternate text should be displayed in the page headers of pages that use the opposite orientation to the document default orientation. The default is that the same header text is used for all pages. If this property is set to true then the alternative headter text should then be specified via the HeaderTextAlternate property.
        ;;; </summary>
        public property UseAlternateHeaders, boolean
            method get
            proc
                mreturn mUseAlternateHeaders
            endmethod
            method set
            proc
                ;;We can only enable this if there are header rows
                if (this.HeaderRows > 0) then
                    mUseAlternateHeaders = value
                else
                    mUseAlternateHeaders = false

                ;;Initialize the array of alternate header items
                if (mUseAlternateHeaders) then
                begin
                    data ix, int
                    this.HeaderTextAlternate = new string[this.HeaderRows]
                    for ix from 1 thru this.HeaderRows
                        this.HeaderTextAlternate[ix] = ""
                end
                else
                    this.HeaderTextAlternate = ^null
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;

        private mWidth, float

        ;;; <summary>
        ;;; Gets the width of the page in device independent pixels (1/72 inch). The width of the page is based on the paper size and orientation and defines the maximum value for X coordinates when addressing the document via absolute positioning mechanisms.
        ;;; </summary>
        public property Width, float
            method get
            proc
                mreturn mWidth
            endmethod
            private method set
            proc
                mWidth = value
            endmethod
        endproperty

        ;;*********************************************************************
        ;;PRIVATE METHODS

.ifdef D_GUI
        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Determines whether the given path refers to an existing directory on disk.
        ;;; </summary>
        ;;; <param name="path">The path to test. </param>
        ;;; <returns>true if path refers to an existing directory; false if the directory does not exist or an error occurs when trying to determine if the specified file exists.</returns>
        private method directoryExists, boolean
            required in path, string
            endparams
            stack record
                dll         ,D_ADDR ;;DLL Handle
                folder      ,a260   ;;Null terminated folder spec
                attributes  ,i4
            endrecord
.define INVALID_FILE_ATTRIBUTES     -1
.define FILE_ATTRIBUTE_DIRECTORY    %x(10)
        proc
            dll = %dll_open("kernel32.dll")
            xcall fill(char(0),folder)
            folder(1,path.Trim().Length) = path.Trim()
            attributes = %dll_call(dll,DLL_TYPE_WINAPI,"GetFileAttributesA",^addr(folder))
            dll = dll_close(dll)
            if (attributes == INVALID_FILE_ATTRIBUTES)
                mreturn false
            mreturn (attributes & FILE_ATTRIBUTE_DIRECTORY)
        endmethod
.else
        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Determines whether the given path refers to an existing directory on disk.
        ;;; </summary>
        ;;; <param name="path">The path to test. </param>
        ;;; <returns>true if path refers to an existing directory; false if the directory does not exist or an error occurs when trying to determine if the specified file exists.</returns>
        private method directoryExists, boolean
            required in path, string
            endparams
        proc
            ;;Try to open a temp file there!
            try
            begin
                data ch, i4, 0
                open(ch=0,o:s,path.Trim()+"TMP"+%datetime+".TMP")
                purge ch
                mreturn true
            end
            catch (ex)
            begin
                mreturn false
            end
            endtry
        endmethod
.endc

        ;;---------------------------------------------------------------------
        ;;
.ifdef D_GUI
        private static method expandLogicalInFileSpec, string
            required in fileSpec,               string
            endparams
            stack record
                colon,                          int
                file,                           string
                path,                           string
                translation,                    a256
                length,                         i4
            endrecord
        proc
            ;;This routine assumes a file spec like LOGICAL:file.ext
            ;;and returns D:\path\to\file.ext
            if ((colon=%instr(1,fileSpec,":")) && (!%instr(1,fileSpec,"\"))) then
            begin
                ;;We have a : and no \

                xcall getlog(fileSpec(1:colon-1),translation,length)
                path = %atrim(translation)

                ;;Looks like we have a logical name, but is it JUST a logical name, or is there also a file name?
                if (colon==%trim(fileSpec)) then
                begin
                    ;;Just a logical, just return the translation
                    mreturn path
                end
                else
                begin
                    ;;Also a file spec
                    if ((path.Length>0) && (path(%trim(path):1)!="\"))
                        path = path + "\"
                    file = fileSpec(colon+1,%trim(fileSpec))
                    mreturn path + file
                end
            end
            else
            begin
                ;;No : or both : and \
                ;;Don't mess with it!
                mreturn fileSpec.Trim()
            end
        endmethod
.else
.ifdef OS_VMS
        ;VMS
        private static method expandLogicalInFileSpec, string
            required in fileSpec,               string
            endparams
            stack record
                expandedFileSpec, a256
                tmpFileSpec, string
            endrecord
        proc
            xcall setdfn(".",0)
            xcall parse(fileSpec,,,,,,,,expandedFileSpec)
            tmpFileSpec = %atrim(expandedFileSpec)
            if (tmpFileSpec.EndsWith(".;")) then
                tmpFileSpec = tmpFileSpec.Replace(".;","")
            else if (tmpFileSpec.EndsWith(";")) then
                tmpFileSpec = tmpFileSpec.Replace(";","")
            else if (tmpFileSpec.Contains(";"))
                tmpFileSpec = tmpFileSpec(1:%instr(1,tmpFileSpec,";")-1)
            mreturn %atrim(tmpFileSpec)
        endmethod
.else
        ;Unix or Linux
        private static method expandLogicalInFileSpec, string
            required in fileSpec,               string
            endparams
            stack record
                colon,                          int
                file,                           string
                path,                           string
                translation,                    a256
                length,                         i4
            endrecord
        proc
            ;;This routine assumes a file spec like LOGICAL:file.ext
            ;;and returns /path/to/file.ext
            if ((colon=%instr(1,fileSpec,":")) && (!%instr(1,fileSpec,"/"))) then
            begin
                ;;We have a : and no \

                xcall getlog(fileSpec(1:colon-1),translation,length)
                path = %atrim(translation)

                ;;Looks like we have a logical name, but is it JUST a logical name, or is there also a file name?
                if (colon==%trim(fileSpec)) then
                begin
                    ;;Just a logical, just return the translation
                    mreturn path
                end
                else
                begin
                    ;;Also a file spec
                    if (path(%trim(path):1)!="/")
                        path = path + "/"
                    file = fileSpec(colon+1,%trim(fileSpec))
                    mreturn path + file
                end
            end
            else
            begin
                ;;No : or both : and /
                ;;Don't mess with it!
                mreturn fileSpec.Trim()
            end
        endmethod
.endc
.endc
        ;;---------------------------------------------------------------------
        ;;

        private method expandTokens, string
            required in aBuffer, string
            record
                tmpbuf, string
            endrecord
        proc
            if ((aBuffer==^null) || (aBuffer.Trim().Length==0))
                mreturn ""

            tmpbuf = aBuffer

            if (tmpbuf.Contains("MM/DD/YYYY"))
                tmpbuf = tmpbuf.Replace("MM/DD/YYYY",getFormattedDateMMDDYYYY())
            if (tmpbuf.Contains("DD/MM/YYYY"))
                tmpbuf = tmpbuf.Replace("MM/DD/YYYY",getFormattedDateDDMMYYYY())
            if (tmpbuf.Contains("HH:MM"))
                tmpbuf = tmpbuf.Replace("HH:MM",getFormattedTimeHHMM())
            if (tmpbuf.Contains("HH:MM:SS"))
                tmpbuf = tmpbuf.Replace("HH:MM",getFormattedTimeHHMMSS())
            if (tmpbuf.Contains("[PAGE#]"))
                tmpbuf = tmpbuf.Replace("[PAGE#]",%string(this.PageNumber))
            if (tmpbuf.Contains("[LOCATION]"))
                tmpbuf = tmpbuf.Replace("[LOCATION]",this.FileLocation)
            if (tmpbuf.Contains("[FILE]"))
                tmpbuf = tmpbuf.Replace("[FILE]",this.FileName)
            if (tmpbuf.Contains("[FONT_SIZE]"))
                tmpbuf = tmpbuf.Replace("[FONT_SIZE]",%string(this.FontSize))

            mreturn tmpbuf

        endmethod

        ;;---------------------------------------------------------------------
        ;;

        private static method fileExists, boolean
            required in path, string
            endparams
        proc
            try
            begin
                data ch, int, 0
                open(ch,i,path)
                close ch
                mreturn true
            end
            catch (e)
            begin
                mreturn false
            end
            endtry
        endmethod

        ;;---------------------------------------------------------------------
        ;; <summary>
        ;;; Returns the date in MM/DD/YYYY format
        ;;; </summary>
        private method getFormattedDateMMDDYYYY, string
            record
                now, a20
            endrecord
        proc
            now = %datetime
            mreturn now(5:2)+"/"+now(7:2)+"/"+now(1:4)
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Returns the date in DD/MM/YYYY format
        ;;; </summary>
        private method getFormattedDateDDMMYYYY, string
            record
                now, a20
            endrecord
        proc
            now = %datetime
            mreturn now(7:2)+"/"+now(5:2)+"/"+now(1:4)
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Returns the time in HH:MM format
        ;;; </summary>
        private method getFormattedTimeHHMM, string
            record
                now, a20
            endrecord
        proc
            now = %datetime
            mreturn now(9:2)+":"+now(11:2)
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Returns the time in HH:MM:SS format
        ;;; </summary>
        private method getFormattedTimeHHMMSS, string
            record
                now, a20
            endrecord
        proc
            now = %datetime
            mreturn now(9:2)+":"+now(11:2)+":"+now(13:2)
        endmethod

        ;;---------------------------------------------------------------------
        ;;; <summary>
        ;;; Returns the date and time in time in XXXX-XX-XX XX.XX.XX format
        ;;; </summary>
        private method getTempFilePrefix, string
            record
                now, a20
            endrecord
        proc
            now = %datetime
            mreturn %string(^d(now(1:14)),"XXXX-XX-XX_XX-XX-XX")
        endmethod

        ;;---------------------------------------------------------------------
        ;;

        private method printAutoItem, void
            required in aItem, @AutoItem
        proc

            if (aItem.is.AutoTextAbsolute) then
                DrawTextObject((AutoTextAbsolute)aItem)

            else if (aItem.is.AutoTextRowCol) then
                DrawTextObjectRC((AutoTextRowCol)aItem)

            else if (aItem.is.AutoLineAbsolute) then
                DrawLineObject((AutoLineAbsolute)aItem)

            else if (aItem.is.AutoLineRowCol) then
                DrawLineObjectRC((AutoLineRowCol)aItem)

            else if (aItem.is.AutoBoxAbsolute) then
                DrawBoxObject((AutoBoxAbsolute)aItem)

            else if (aItem.is.AutoBoxRowCol) then
                DrawBoxObjectRC((AutoBoxRowCol)aItem)

            else if (aItem.is.AutoImage)
                DrawImageObject((AutoImage)aItem)

        endmethod

        ;;---------------------------------------------------------------------
        ;;

        private method printBeginPageItems, void
        proc
            if (this.AutoItems.Count > 0)
            begin
                data item, @Object
                foreach item in this.AutoItems
                begin
                    ;;Only print the "end of page" auto items
                    if (((AutoItem)item).Mode == AutoItemMode.BeginPage)
                        printAutoItem((AutoItem)item)
                end
            end
        endmethod

        ;;---------------------------------------------------------------------
        ;;

        private method printEndPageItems, void
        proc
            ;;Print headers and footers on the current page
            printPageHeaders()
            printPageFooters()

            ;;Then auto items
            if (this.AutoItems.Count > 0)
            begin
                data item, @Object
                foreach item in this.AutoItems
                begin
                    ;;Only print the "end of page" auto items
                    if (((AutoItem)item).Mode == AutoItemMode.EndPage)
                        printAutoItem((AutoItem)item)
                end
            end

        endmethod

        ;;---------------------------------------------------------------------
        ;;

        private method printPageFooters, void
        proc
            if (this.FooterRows)
            begin
                data ix, int
                for ix from 1 thru this.FooterRows
                begin
                    data footer, string
                    if ((this.Orientation==this.DefaultOrientation) || (this.UseAlternateFooters==false)) then
                    begin
                        ;;Default orientation page or alternate orientation page using default footers
                        footer = this.FooterText[ix]
                    end
                    else
                    begin
                        ;;Alternate orientation page
                        footer = this.FooterTextAlternate[ix]
                    end

                    if (footer.Trim().Length==0) then
                        nop
                    else if (footer=="[LINE]") then
                    begin
                        ;;Calculate the start and end points for a full width line
                        data penWidth, float, 1.0
                        data start_x,  float, XfromColumn(1)
                        data start_y,  float, YfromFooterRow(ix) + (((this.RowHeight-this.ExtraRowSpacing)-penWidth)/2)
                        data end_x,    float, XfromColumn(this.Columns) + this.ColumnWidth
                        data end_y,    float, start_y

                        ;;Draw the line
                        pg.SetLineWidth(penWidth)
                        pg.MoveTo(start_x,start_y)
                        pg.LineTo(end_x,end_y)
                        pg.Stroke()
                    end
                    else
                    begin
                        pg.BeginText()
                        pg.MoveTextPos(XfromColumn(1),YfromFooterRow(ix))
                        pg.ShowText(expandTokens(footer))
                        pg.EndText()
                    end
                end
            end
        endmethod

        ;;---------------------------------------------------------------------
        ;;

        private method printPageHeaders, void
        proc
            if (this.HeaderRows)
            begin
                data ix, int
                for ix from 1 thru this.HeaderRows
                begin
                    data header, string
                    if ((this.Orientation==this.DefaultOrientation) || (this.UseAlternateHeaders==false)) then
                    begin
                        ;;Default orientation page or alternate orientation page using default headers
                        header = this.HeaderText[ix]
                    end
                    else
                    begin
                        ;;Alternate orientation page
                        header = this.HeaderTextAlternate[ix]
                    end

                    if (header.Trim().Length==0) then
                        nop
                    else if (header=="[LINE]") then
                    begin
                        ;;Calculate the start and end points for a full width line
                        data penWidth, float, 1.0
                        data start_x,  float, XfromColumn(1)
                        data start_y,  float, YfromHeaderRow(ix) + (((this.RowHeight-this.ExtraRowSpacing)-penWidth)/2)
                        data end_x,    float, XfromColumn(this.Columns) + this.ColumnWidth
                        data end_y,    float, start_y

                        ;;Draw the line
                        pg.SetLineWidth(penWidth)
                        pg.MoveTo(start_x,start_y)
                        pg.LineTo(end_x,end_y)
                        pg.Stroke()
                    end
                    else
                    begin
                        pg.BeginText()
                        pg.MoveTextPos(XfromColumn(1),YfromHeaderRow(ix))
                        pg.ShowText(expandTokens(header))
                        pg.EndText()
                    end
                end
            end
        endmethod

        ;;---------------------------------------------------------------------
        ;;

        private method resetFillColor , void
        proc
            pg.SetRGBFill(textRed,textGreen,textBlue)
        endmethod

        ;;---------------------------------------------------------------------
        ;;

        private method resetFontAttributes, void
.ifdef DBLNET
            default  in aBold,      boolean, false
            default  in aItalic,    boolean, false
.else
            optional in aBold,      boolean
            optional in aItalic,    boolean
.endc
        proc
.ifdef DBLNET
            if (aBold || aItalic)
.else
            if ((^passed(aBold) && aBold) || (^passed(aItalic) && aItalic))
.endc
                resetFont()
        endmethod

        ;;---------------------------------------------------------------------
        ;;

        private method resetStrokeColor, void
        proc
            pg.SetRGBStroke(lineRed,lineGreen,lineBlue)
        endmethod

        ;;---------------------------------------------------------------------
        ;;

        private method rgbFromPdfColor, void
            required in  aColor, PdfColor
            required out aRed, float
            required out aGreen, float
            required out aBlue, float
        proc

            using aColor select
            (PdfColor.AirForceblue),
            begin
                aRed = 93 / 255.0
                aGreen = 138 / 255.0
                aBlue = 168 / 255.0
            end
            (PdfColor.AliceBlue),
            begin
                aRed = 240 / 255.0
                aGreen = 248 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.AlizarinCrimson),
            begin
                aRed = 227 / 255.0
                aGreen = 38 / 255.0
                aBlue = 54 / 255.0
            end
            (PdfColor.Almond),
            begin
                aRed = 239 / 255.0
                aGreen = 222 / 255.0
                aBlue = 205 / 255.0
            end
            (PdfColor.Amaranth),
            begin
                aRed = 229 / 255.0
                aGreen = 43 / 255.0
                aBlue = 80 / 255.0
            end
            (PdfColor.Amber),
            begin
                aRed = 255 / 255.0
                aGreen = 191 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.AmericanRose),
            begin
                aRed = 255 / 255.0
                aGreen = 3 / 255.0
                aBlue = 62 / 255.0
            end
            (PdfColor.Amethyst),
            begin
                aRed = 153 / 255.0
                aGreen = 102 / 255.0
                aBlue = 204 / 255.0
            end
            (PdfColor.AndroidGreen),
            begin
                aRed = 164 / 255.0
                aGreen = 198 / 255.0
                aBlue = 57 / 255.0
            end
            (PdfColor.AntiFlashWhite),
            begin
                aRed = 242 / 255.0
                aGreen = 243 / 255.0
                aBlue = 244 / 255.0
            end
            (PdfColor.AntiqueBrass),
            begin
                aRed = 205 / 255.0
                aGreen = 149 / 255.0
                aBlue = 117 / 255.0
            end
            (PdfColor.AntiqueFuchsia),
            begin
                aRed = 145 / 255.0
                aGreen = 92 / 255.0
                aBlue = 131 / 255.0
            end
            (PdfColor.AntiqueWhite),
            begin
                aRed = 250 / 255.0
                aGreen = 235 / 255.0
                aBlue = 215 / 255.0
            end
            (PdfColor.Ao),
            begin
                aRed = 0 / 255.0
                aGreen = 128 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.AppleGreen),
            begin
                aRed = 141 / 255.0
                aGreen = 182 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.Apricot),
            begin
                aRed = 251 / 255.0
                aGreen = 206 / 255.0
                aBlue = 177 / 255.0
            end
            (PdfColor.Aqua),
            begin
                aRed = 0 / 255.0
                aGreen = 255 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.Aquamarine),
            begin
                aRed = 127 / 255.0
                aGreen = 255 / 255.0
                aBlue = 212 / 255.0
            end
            (PdfColor.ArmyGreen),
            begin
                aRed = 75 / 255.0
                aGreen = 83 / 255.0
                aBlue = 32 / 255.0
            end
            (PdfColor.Arsenic),
            begin
                aRed = 59 / 255.0
                aGreen = 68 / 255.0
                aBlue = 75 / 255.0
            end
            (PdfColor.ArylideYellow),
            begin
                aRed = 233 / 255.0
                aGreen = 214 / 255.0
                aBlue = 107 / 255.0
            end
            (PdfColor.AshGray),
            begin
                aRed = 178 / 255.0
                aGreen = 190 / 255.0
                aBlue = 181 / 255.0
            end
            (PdfColor.Asparagus),
            begin
                aRed = 135 / 255.0
                aGreen = 169 / 255.0
                aBlue = 107 / 255.0
            end
            (PdfColor.AtomicTangerine),
            begin
                aRed = 255 / 255.0
                aGreen = 153 / 255.0
                aBlue = 102 / 255.0
            end
            (PdfColor.Auburn),
            begin
                aRed = 165 / 255.0
                aGreen = 42 / 255.0
                aBlue = 42 / 255.0
            end
            (PdfColor.Aureolin),
            begin
                aRed = 253 / 255.0
                aGreen = 238 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.AuroMetalSaurus),
            begin
                aRed = 110 / 255.0
                aGreen = 127 / 255.0
                aBlue = 128 / 255.0
            end
            (PdfColor.Awesome),
            begin
                aRed = 255 / 255.0
                aGreen = 32 / 255.0
                aBlue = 82 / 255.0
            end
            (PdfColor.Azure),
            begin
                aRed = 0 / 255.0
                aGreen = 127 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.AzureMist),
            begin
                aRed = 240 / 255.0
                aGreen = 255 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.BabyBlue),
            begin
                aRed = 137 / 255.0
                aGreen = 207 / 255.0
                aBlue = 240 / 255.0
            end
            (PdfColor.BabyBlueEyes),
            begin
                aRed = 161 / 255.0
                aGreen = 202 / 255.0
                aBlue = 241 / 255.0
            end
            (PdfColor.BabyPink),
            begin
                aRed = 244 / 255.0
                aGreen = 194 / 255.0
                aBlue = 194 / 255.0
            end
            (PdfColor.BallBlue),
            begin
                aRed = 33 / 255.0
                aGreen = 171 / 255.0
                aBlue = 205 / 255.0
            end
            (PdfColor.BananaMania),
            begin
                aRed = 250 / 255.0
                aGreen = 231 / 255.0
                aBlue = 181 / 255.0
            end
            (PdfColor.BananaYellow),
            begin
                aRed = 255 / 255.0
                aGreen = 225 / 255.0
                aBlue = 53 / 255.0
            end
            (PdfColor.BattleShipGray),
            begin
                aRed = 132 / 255.0
                aGreen = 132 / 255.0
                aBlue = 130 / 255.0
            end
            (PdfColor.Bazaar),
            begin
                aRed = 152 / 255.0
                aGreen = 119 / 255.0
                aBlue = 123 / 255.0
            end
            (PdfColor.BeauBlue),
            begin
                aRed = 188 / 255.0
                aGreen = 212 / 255.0
                aBlue = 230 / 255.0
            end
            (PdfColor.Beaver),
            begin
                aRed = 159 / 255.0
                aGreen = 129 / 255.0
                aBlue = 112 / 255.0
            end
            (PdfColor.Beige),
            begin
                aRed = 245 / 255.0
                aGreen = 245 / 255.0
                aBlue = 220 / 255.0
            end
            (PdfColor.Bisque),
            begin
                aRed = 255 / 255.0
                aGreen = 228 / 255.0
                aBlue = 196 / 255.0
            end
            (PdfColor.Bistre),
            begin
                aRed = 61 / 255.0
                aGreen = 43 / 255.0
                aBlue = 31 / 255.0
            end
            (PdfColor.BitterSweet),
            begin
                aRed = 254 / 255.0
                aGreen = 111 / 255.0
                aBlue = 94 / 255.0
            end
            (PdfColor.Black),
            begin
                aRed = 0 / 255.0
                aGreen = 0 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.BlanchedAlmond),
            begin
                aRed = 255 / 255.0
                aGreen = 235 / 255.0
                aBlue = 205 / 255.0
            end
            (PdfColor.BleudeFrance),
            begin
                aRed = 49 / 255.0
                aGreen = 140 / 255.0
                aBlue = 231 / 255.0
            end
            (PdfColor.BlizzardBlue),
            begin
                aRed = 172 / 255.0
                aGreen = 229 / 255.0
                aBlue = 238 / 255.0
            end
            (PdfColor.Blond),
            begin
                aRed = 250 / 255.0
                aGreen = 240 / 255.0
                aBlue = 190 / 255.0
            end
            (PdfColor.Blue),
            begin
                aRed = 0 / 255.0
                aGreen = 0 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.BlueBell),
            begin
                aRed = 162 / 255.0
                aGreen = 162 / 255.0
                aBlue = 208 / 255.0
            end
            (PdfColor.BlueGray),
            begin
                aRed = 102 / 255.0
                aGreen = 153 / 255.0
                aBlue = 204 / 255.0
            end
            (PdfColor.BlueGreen),
            begin
                aRed = 0 / 255.0
                aGreen = 221 / 255.0
                aBlue = 221 / 255.0
            end
            (PdfColor.BlueViolet),
            begin
                aRed = 138 / 255.0
                aGreen = 43 / 255.0
                aBlue = 226 / 255.0
            end
            (PdfColor.Blush),
            begin
                aRed = 222 / 255.0
                aGreen = 93 / 255.0
                aBlue = 131 / 255.0
            end
            (PdfColor.Bole),
            begin
                aRed = 121 / 255.0
                aGreen = 68 / 255.0
                aBlue = 59 / 255.0
            end
            (PdfColor.BondiBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 149 / 255.0
                aBlue = 182 / 255.0
            end
            (PdfColor.BostonUniversityRed),
            begin
                aRed = 204 / 255.0
                aGreen = 0 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.BrandeisBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 112 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.Brass),
            begin
                aRed = 181 / 255.0
                aGreen = 166 / 255.0
                aBlue = 66 / 255.0
            end
            (PdfColor.BrickRed),
            begin
                aRed = 203 / 255.0
                aGreen = 65 / 255.0
                aBlue = 84 / 255.0
            end
            (PdfColor.BrightCerulean),
            begin
                aRed = 29 / 255.0
                aGreen = 172 / 255.0
                aBlue = 214 / 255.0
            end
            (PdfColor.BrightGreen),
            begin
                aRed = 102 / 255.0
                aGreen = 255 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.BrightLavender),
            begin
                aRed = 191 / 255.0
                aGreen = 148 / 255.0
                aBlue = 228 / 255.0
            end
            (PdfColor.BrightMaroon),
            begin
                aRed = 195 / 255.0
                aGreen = 33 / 255.0
                aBlue = 72 / 255.0
            end
            (PdfColor.BrightPink),
            begin
                aRed = 255 / 255.0
                aGreen = 0 / 255.0
                aBlue = 127 / 255.0
            end
            (PdfColor.BrightTurquoise),
            begin
                aRed = 8 / 255.0
                aGreen = 232 / 255.0
                aBlue = 222 / 255.0
            end
            (PdfColor.BrightUbe),
            begin
                aRed = 209 / 255.0
                aGreen = 159 / 255.0
                aBlue = 232 / 255.0
            end
            (PdfColor.BrilliantLavender),
            begin
                aRed = 244 / 255.0
                aGreen = 187 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.BrillianRrose),
            begin
                aRed = 255 / 255.0
                aGreen = 85 / 255.0
                aBlue = 163 / 255.0
            end
            (PdfColor.BrinkPink),
            begin
                aRed = 251 / 255.0
                aGreen = 96 / 255.0
                aBlue = 127 / 255.0
            end
            (PdfColor.BritishRacingGreen),
            begin
                aRed = 0 / 255.0
                aGreen = 66 / 255.0
                aBlue = 37 / 255.0
            end
            (PdfColor.Bronze),
            begin
                aRed = 205 / 255.0
                aGreen = 127 / 255.0
                aBlue = 50 / 255.0
            end
            (PdfColor.Brown),
            begin
                aRed = 150 / 255.0
                aGreen = 75 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.BubbleGum),
            begin
                aRed = 255 / 255.0
                aGreen = 193 / 255.0
                aBlue = 204 / 255.0
            end
            (PdfColor.Bubbles),
            begin
                aRed = 231 / 255.0
                aGreen = 254 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.Buff),
            begin
                aRed = 240 / 255.0
                aGreen = 220 / 255.0
                aBlue = 130 / 255.0
            end
            (PdfColor.BulgarianRose),
            begin
                aRed = 72 / 255.0
                aGreen = 6 / 255.0
                aBlue = 7 / 255.0
            end
            (PdfColor.Burgundy),
            begin
                aRed = 128 / 255.0
                aGreen = 0 / 255.0
                aBlue = 32 / 255.0
            end
            (PdfColor.Burlywood),
            begin
                aRed = 222 / 255.0
                aGreen = 184 / 255.0
                aBlue = 135 / 255.0
            end
            (PdfColor.BurntOrange),
            begin
                aRed = 204 / 255.0
                aGreen = 85 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.BurntSienna),
            begin
                aRed = 233 / 255.0
                aGreen = 116 / 255.0
                aBlue = 81 / 255.0
            end
            (PdfColor.BurntUmber),
            begin
                aRed = 138 / 255.0
                aGreen = 51 / 255.0
                aBlue = 36 / 255.0
            end
            (PdfColor.Byzantine),
            begin
                aRed = 189 / 255.0
                aGreen = 51 / 255.0
                aBlue = 164 / 255.0
            end
            (PdfColor.Byzantium),
            begin
                aRed = 112 / 255.0
                aGreen = 41 / 255.0
                aBlue = 99 / 255.0
            end
            (PdfColor.Cadet),
            begin
                aRed = 83 / 255.0
                aGreen = 104 / 255.0
                aBlue = 114 / 255.0
            end
            (PdfColor.CadetBlue),
            begin
                aRed = 95 / 255.0
                aGreen = 158 / 255.0
                aBlue = 160 / 255.0
            end
            (PdfColor.CadetGray),
            begin
                aRed = 145 / 255.0
                aGreen = 163 / 255.0
                aBlue = 176 / 255.0
            end
            (PdfColor.CadmiumGreen),
            begin
                aRed = 0 / 255.0
                aGreen = 107 / 255.0
                aBlue = 60 / 255.0
            end
            (PdfColor.CadmiumOrange),
            begin
                aRed = 237 / 255.0
                aGreen = 135 / 255.0
                aBlue = 45 / 255.0
            end
            (PdfColor.CadmiumRed),
            begin
                aRed = 227 / 255.0
                aGreen = 0 / 255.0
                aBlue = 34 / 255.0
            end
            (PdfColor.CadmiumYellow),
            begin
                aRed = 255 / 255.0
                aGreen = 246 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.CalPolyPomonaGreen),
            begin
                aRed = 30 / 255.0
                aGreen = 77 / 255.0
                aBlue = 43 / 255.0
            end
            (PdfColor.CambridgeBlue),
            begin
                aRed = 163 / 255.0
                aGreen = 193 / 255.0
                aBlue = 173 / 255.0
            end
            (PdfColor.Camel),
            begin
                aRed = 193 / 255.0
                aGreen = 154 / 255.0
                aBlue = 107 / 255.0
            end
            (PdfColor.CamouflageGreen),
            begin
                aRed = 120 / 255.0
                aGreen = 134 / 255.0
                aBlue = 107 / 255.0
            end
            (PdfColor.CanaryYellow),
            begin
                aRed = 255 / 255.0
                aGreen = 239 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.CandyAppleRed),
            begin
                aRed = 255 / 255.0
                aGreen = 8 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.CandyPink),
            begin
                aRed = 228 / 255.0
                aGreen = 113 / 255.0
                aBlue = 122 / 255.0
            end
            (PdfColor.Capri),
            begin
                aRed = 0 / 255.0
                aGreen = 191 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.CaputMortuum),
            begin
                aRed = 89 / 255.0
                aGreen = 39 / 255.0
                aBlue = 32 / 255.0
            end
            (PdfColor.Cardinal),
            begin
                aRed = 196 / 255.0
                aGreen = 30 / 255.0
                aBlue = 58 / 255.0
            end
            (PdfColor.CaribbeanGreen),
            begin
                aRed = 0 / 255.0
                aGreen = 204 / 255.0
                aBlue = 153 / 255.0
            end
            (PdfColor.Carmine),
            begin
                aRed = 150 / 255.0
                aGreen = 0 / 255.0
                aBlue = 24 / 255.0
            end
            (PdfColor.CarminePink),
            begin
                aRed = 235 / 255.0
                aGreen = 76 / 255.0
                aBlue = 66 / 255.0
            end
            (PdfColor.CarmineRed),
            begin
                aRed = 255 / 255.0
                aGreen = 0 / 255.0
                aBlue = 56 / 255.0
            end
            (PdfColor.CarnationPink),
            begin
                aRed = 255 / 255.0
                aGreen = 166 / 255.0
                aBlue = 201 / 255.0
            end
            (PdfColor.Carnelian),
            begin
                aRed = 179 / 255.0
                aGreen = 27 / 255.0
                aBlue = 27 / 255.0
            end
            (PdfColor.CarolinaBlue),
            begin
                aRed = 153 / 255.0
                aGreen = 186 / 255.0
                aBlue = 221 / 255.0
            end
            (PdfColor.CarrotOrange),
            begin
                aRed = 237 / 255.0
                aGreen = 145 / 255.0
                aBlue = 33 / 255.0
            end
            (PdfColor.Ceil),
            begin
                aRed = 146 / 255.0
                aGreen = 161 / 255.0
                aBlue = 207 / 255.0
            end
            (PdfColor.Celadon),
            begin
                aRed = 172 / 255.0
                aGreen = 225 / 255.0
                aBlue = 175 / 255.0
            end
            (PdfColor.CelestialBlue),
            begin
                aRed = 73 / 255.0
                aGreen = 151 / 255.0
                aBlue = 208 / 255.0
            end
            (PdfColor.Cerise),
            begin
                aRed = 222 / 255.0
                aGreen = 49 / 255.0
                aBlue = 99 / 255.0
            end
            (PdfColor.CerisePink),
            begin
                aRed = 236 / 255.0
                aGreen = 59 / 255.0
                aBlue = 131 / 255.0
            end
            (PdfColor.Cerulean),
            begin
                aRed = 0 / 255.0
                aGreen = 123 / 255.0
                aBlue = 167 / 255.0
            end
            (PdfColor.CeruleanBlue),
            begin
                aRed = 42 / 255.0
                aGreen = 82 / 255.0
                aBlue = 190 / 255.0
            end
            (PdfColor.CGBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 122 / 255.0
                aBlue = 165 / 255.0
            end
            (PdfColor.CGRed),
            begin
                aRed = 224 / 255.0
                aGreen = 60 / 255.0
                aBlue = 49 / 255.0
            end
            (PdfColor.Chamoisee),
            begin
                aRed = 160 / 255.0
                aGreen = 120 / 255.0
                aBlue = 90 / 255.0
            end
            (PdfColor.Champagne),
            begin
                aRed = 247 / 255.0
                aGreen = 231 / 255.0
                aBlue = 206 / 255.0
            end
            (PdfColor.Charcoal),
            begin
                aRed = 54 / 255.0
                aGreen = 69 / 255.0
                aBlue = 79 / 255.0
            end
            (PdfColor.Chartreuse),
            begin
                aRed = 223 / 255.0
                aGreen = 255 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.CherryBlossomPink),
            begin
                aRed = 255 / 255.0
                aGreen = 183 / 255.0
                aBlue = 197 / 255.0
            end
            (PdfColor.Chestnut),
            begin
                aRed = 205 / 255.0
                aGreen = 92 / 255.0
                aBlue = 92 / 255.0
            end
            (PdfColor.Chocolate),
            begin
                aRed = 123 / 255.0
                aGreen = 63 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.ChromeYellow),
            begin
                aRed = 255 / 255.0
                aGreen = 167 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.Cinereous),
            begin
                aRed = 152 / 255.0
                aGreen = 129 / 255.0
                aBlue = 123 / 255.0
            end
            (PdfColor.Cinnabar),
            begin
                aRed = 227 / 255.0
                aGreen = 66 / 255.0
                aBlue = 52 / 255.0
            end
            (PdfColor.Cinnamon),
            begin
                aRed = 210 / 255.0
                aGreen = 105 / 255.0
                aBlue = 30 / 255.0
            end
            (PdfColor.Citrine),
            begin
                aRed = 228 / 255.0
                aGreen = 208 / 255.0
                aBlue = 10 / 255.0
            end
            (PdfColor.ClassicRose),
            begin
                aRed = 251 / 255.0
                aGreen = 204 / 255.0
                aBlue = 231 / 255.0
            end
            (PdfColor.Cobalt),
            begin
                aRed = 0 / 255.0
                aGreen = 71 / 255.0
                aBlue = 171 / 255.0
            end
            (PdfColor.Coffee),
            begin
                aRed = 200 / 255.0
                aGreen = 100 / 255.0
                aBlue = 40 / 255.0
            end
            (PdfColor.ColumbiaBlue),
            begin
                aRed = 155 / 255.0
                aGreen = 221 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.CoolBlack),
            begin
                aRed = 0 / 255.0
                aGreen = 46 / 255.0
                aBlue = 99 / 255.0
            end
            (PdfColor.CoolGray),
            begin
                aRed = 140 / 255.0
                aGreen = 146 / 255.0
                aBlue = 172 / 255.0
            end
            (PdfColor.Copper),
            begin
                aRed = 184 / 255.0
                aGreen = 115 / 255.0
                aBlue = 51 / 255.0
            end
            (PdfColor.CopperRose),
            begin
                aRed = 153 / 255.0
                aGreen = 102 / 255.0
                aBlue = 102 / 255.0
            end
            (PdfColor.Coquelicot),
            begin
                aRed = 255 / 255.0
                aGreen = 56 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.Coral),
            begin
                aRed = 255 / 255.0
                aGreen = 127 / 255.0
                aBlue = 80 / 255.0
            end
            (PdfColor.CoralPink),
            begin
                aRed = 248 / 255.0
                aGreen = 131 / 255.0
                aBlue = 121 / 255.0
            end
            (PdfColor.CoralRed),
            begin
                aRed = 255 / 255.0
                aGreen = 64 / 255.0
                aBlue = 64 / 255.0
            end
            (PdfColor.Cordovan),
            begin
                aRed = 137 / 255.0
                aGreen = 63 / 255.0
                aBlue = 69 / 255.0
            end
            (PdfColor.Corn),
            begin
                aRed = 251 / 255.0
                aGreen = 236 / 255.0
                aBlue = 93 / 255.0
            end
            (PdfColor.CornFlowerBlue),
            begin
                aRed = 100 / 255.0
                aGreen = 149 / 255.0
                aBlue = 237 / 255.0
            end
            (PdfColor.CornSilk),
            begin
                aRed = 255 / 255.0
                aGreen = 248 / 255.0
                aBlue = 220 / 255.0
            end
            (PdfColor.CosmicLatte),
            begin
                aRed = 255 / 255.0
                aGreen = 248 / 255.0
                aBlue = 231 / 255.0
            end
            (PdfColor.CottonCandy),
            begin
                aRed = 255 / 255.0
                aGreen = 188 / 255.0
                aBlue = 217 / 255.0
            end
            (PdfColor.Cream),
            begin
                aRed = 255 / 255.0
                aGreen = 253 / 255.0
                aBlue = 208 / 255.0
            end
            (PdfColor.Crimson),
            begin
                aRed = 220 / 255.0
                aGreen = 20 / 255.0
                aBlue = 60 / 255.0
            end
            (PdfColor.CrimsonGlory),
            begin
                aRed = 190 / 255.0
                aGreen = 0 / 255.0
                aBlue = 50 / 255.0
            end
            (PdfColor.Cyan),
            begin
                aRed = 0 / 255.0
                aGreen = 183 / 255.0
                aBlue = 235 / 255.0
            end
            (PdfColor.Daffodil),
            begin
                aRed = 255 / 255.0
                aGreen = 255 / 255.0
                aBlue = 49 / 255.0
            end
            (PdfColor.Dandelion),
            begin
                aRed = 240 / 255.0
                aGreen = 225 / 255.0
                aBlue = 48 / 255.0
            end
            (PdfColor.DarkBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 0 / 255.0
                aBlue = 139 / 255.0
            end
            (PdfColor.DarkBrown),
            begin
                aRed = 101 / 255.0
                aGreen = 67 / 255.0
                aBlue = 33 / 255.0
            end
            (PdfColor.DarkByzantium),
            begin
                aRed = 93 / 255.0
                aGreen = 57 / 255.0
                aBlue = 84 / 255.0
            end
            (PdfColor.DarkCandyapplered),
            begin
                aRed = 164 / 255.0
                aGreen = 0 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.DarkCerulean),
            begin
                aRed = 8 / 255.0
                aGreen = 69 / 255.0
                aBlue = 126 / 255.0
            end
            (PdfColor.DarkChampagne),
            begin
                aRed = 194 / 255.0
                aGreen = 178 / 255.0
                aBlue = 128 / 255.0
            end
            (PdfColor.DarkChestnut),
            begin
                aRed = 152 / 255.0
                aGreen = 105 / 255.0
                aBlue = 96 / 255.0
            end
            (PdfColor.DarkCoral),
            begin
                aRed = 205 / 255.0
                aGreen = 91 / 255.0
                aBlue = 69 / 255.0
            end
            (PdfColor.DarkCyan),
            begin
                aRed = 0 / 255.0
                aGreen = 139 / 255.0
                aBlue = 139 / 255.0
            end
            (PdfColor.DarkElectricBlue),
            begin
                aRed = 83 / 255.0
                aGreen = 104 / 255.0
                aBlue = 120 / 255.0
            end
            (PdfColor.DarkGoldenRod),
            begin
                aRed = 184 / 255.0
                aGreen = 134 / 255.0
                aBlue = 11 / 255.0
            end
            (PdfColor.DarkGray),
            begin
                aRed = 169 / 255.0
                aGreen = 169 / 255.0
                aBlue = 169 / 255.0
            end
            (PdfColor.DarkGreen),
            begin
                aRed = 1 / 255.0
                aGreen = 50 / 255.0
                aBlue = 32 / 255.0
            end
            (PdfColor.DarkJungleGreen),
            begin
                aRed = 26 / 255.0
                aGreen = 36 / 255.0
                aBlue = 33 / 255.0
            end
            (PdfColor.DarkKhaki),
            begin
                aRed = 189 / 255.0
                aGreen = 183 / 255.0
                aBlue = 107 / 255.0
            end
            (PdfColor.DarkLava),
            begin
                aRed = 72 / 255.0
                aGreen = 60 / 255.0
                aBlue = 50 / 255.0
            end
            (PdfColor.DarkLavender),
            begin
                aRed = 115 / 255.0
                aGreen = 79 / 255.0
                aBlue = 150 / 255.0
            end
            (PdfColor.DarkMagenta),
            begin
                aRed = 139 / 255.0
                aGreen = 0 / 255.0
                aBlue = 139 / 255.0
            end
            (PdfColor.DarkMidnightBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 51 / 255.0
                aBlue = 102 / 255.0
            end
            (PdfColor.DarkOliveGreen),
            begin
                aRed = 85 / 255.0
                aGreen = 107 / 255.0
                aBlue = 47 / 255.0
            end
            (PdfColor.DarkOrange),
            begin
                aRed = 255 / 255.0
                aGreen = 140 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.DarkOrchid),
            begin
                aRed = 153 / 255.0
                aGreen = 50 / 255.0
                aBlue = 204 / 255.0
            end
            (PdfColor.DarkPastelBlue),
            begin
                aRed = 119 / 255.0
                aGreen = 158 / 255.0
                aBlue = 203 / 255.0
            end
            (PdfColor.DarkPastelGreen),
            begin
                aRed = 3 / 255.0
                aGreen = 192 / 255.0
                aBlue = 60 / 255.0
            end
            (PdfColor.DarkPastelPurple),
            begin
                aRed = 150 / 255.0
                aGreen = 111 / 255.0
                aBlue = 214 / 255.0
            end
            (PdfColor.DarkPastelRed),
            begin
                aRed = 194 / 255.0
                aGreen = 59 / 255.0
                aBlue = 34 / 255.0
            end
            (PdfColor.DarkPink),
            begin
                aRed = 231 / 255.0
                aGreen = 84 / 255.0
                aBlue = 128 / 255.0
            end
            (PdfColor.DarkPowderBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 51 / 255.0
                aBlue = 153 / 255.0
            end
            (PdfColor.DarkRaspberry),
            begin
                aRed = 135 / 255.0
                aGreen = 38 / 255.0
                aBlue = 87 / 255.0
            end
            (PdfColor.DarkRed),
            begin
                aRed = 139 / 255.0
                aGreen = 0 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.DarkSalmon),
            begin
                aRed = 233 / 255.0
                aGreen = 150 / 255.0
                aBlue = 122 / 255.0
            end
            (PdfColor.DarkScarlet),
            begin
                aRed = 86 / 255.0
                aGreen = 3 / 255.0
                aBlue = 25 / 255.0
            end
            (PdfColor.DarkSeaGreen),
            begin
                aRed = 143 / 255.0
                aGreen = 188 / 255.0
                aBlue = 143 / 255.0
            end
            (PdfColor.DarkSienna),
            begin
                aRed = 60 / 255.0
                aGreen = 20 / 255.0
                aBlue = 20 / 255.0
            end
            (PdfColor.DarkSlateBlue),
            begin
                aRed = 72 / 255.0
                aGreen = 61 / 255.0
                aBlue = 139 / 255.0
            end
            (PdfColor.DarkSlateGray),
            begin
                aRed = 47 / 255.0
                aGreen = 79 / 255.0
                aBlue = 79 / 255.0
            end
            (PdfColor.DarkspringGreen),
            begin
                aRed = 23 / 255.0
                aGreen = 114 / 255.0
                aBlue = 69 / 255.0
            end
            (PdfColor.DarkTan),
            begin
                aRed = 145 / 255.0
                aGreen = 129 / 255.0
                aBlue = 81 / 255.0
            end
            (PdfColor.DarkTangerine),
            begin
                aRed = 255 / 255.0
                aGreen = 168 / 255.0
                aBlue = 18 / 255.0
            end
            (PdfColor.DarkTerracotta),
            begin
                aRed = 204 / 255.0
                aGreen = 78 / 255.0
                aBlue = 92 / 255.0
            end
            (PdfColor.DarkTurquoise),
            begin
                aRed = 0 / 255.0
                aGreen = 206 / 255.0
                aBlue = 209 / 255.0
            end
            (PdfColor.DarkViolet),
            begin
                aRed = 148 / 255.0
                aGreen = 0 / 255.0
                aBlue = 211 / 255.0
            end
            (PdfColor.DartMouthGreen),
            begin
                aRed = 0 / 255.0
                aGreen = 105 / 255.0
                aBlue = 62 / 255.0
            end
            (PdfColor.DavysGray),
            begin
                aRed = 85 / 255.0
                aGreen = 85 / 255.0
                aBlue = 85 / 255.0
            end
            (PdfColor.DebianRed),
            begin
                aRed = 215 / 255.0
                aGreen = 10 / 255.0
                aBlue = 83 / 255.0
            end
            (PdfColor.DeepCarmine),
            begin
                aRed = 169 / 255.0
                aGreen = 32 / 255.0
                aBlue = 62 / 255.0
            end
            (PdfColor.DeepCarminepink),
            begin
                aRed = 239 / 255.0
                aGreen = 48 / 255.0
                aBlue = 56 / 255.0
            end
            (PdfColor.DeepcarrotOrange),
            begin
                aRed = 233 / 255.0
                aGreen = 105 / 255.0
                aBlue = 44 / 255.0
            end
            (PdfColor.Deepcerise),
            begin
                aRed = 218 / 255.0
                aGreen = 50 / 255.0
                aBlue = 135 / 255.0
            end
            (PdfColor.Deepchampagne),
            begin
                aRed = 250 / 255.0
                aGreen = 214 / 255.0
                aBlue = 165 / 255.0
            end
            (PdfColor.Deepchestnut),
            begin
                aRed = 185 / 255.0
                aGreen = 78 / 255.0
                aBlue = 72 / 255.0
            end
            (PdfColor.DeepFuchsia),
            begin
                aRed = 193 / 255.0
                aGreen = 84 / 255.0
                aBlue = 193 / 255.0
            end
            (PdfColor.DeepJunglegreen),
            begin
                aRed = 0 / 255.0
                aGreen = 75 / 255.0
                aBlue = 73 / 255.0
            end
            (PdfColor.DeepLilac),
            begin
                aRed = 153 / 255.0
                aGreen = 85 / 255.0
                aBlue = 187 / 255.0
            end
            (PdfColor.DeepMagenta),
            begin
                aRed = 204 / 255.0
                aGreen = 0 / 255.0
                aBlue = 204 / 255.0
            end
            (PdfColor.DeepPeach),
            begin
                aRed = 255 / 255.0
                aGreen = 203 / 255.0
                aBlue = 164 / 255.0
            end
            (PdfColor.DeepPink),
            begin
                aRed = 255 / 255.0
                aGreen = 20 / 255.0
                aBlue = 147 / 255.0
            end
            (PdfColor.Deepsaffron),
            begin
                aRed = 255 / 255.0
                aGreen = 153 / 255.0
                aBlue = 51 / 255.0
            end
            (PdfColor.Denim),
            begin
                aRed = 21 / 255.0
                aGreen = 96 / 255.0
                aBlue = 189 / 255.0
            end
            (PdfColor.DesertSand),
            begin
                aRed = 237 / 255.0
                aGreen = 201 / 255.0
                aBlue = 175 / 255.0
            end
            (PdfColor.DimGray),
            begin
                aRed = 105 / 255.0
                aGreen = 105 / 255.0
                aBlue = 105 / 255.0
            end
            (PdfColor.DodgerBlue),
            begin
                aRed = 30 / 255.0
                aGreen = 144 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.DogWoodRose),
            begin
                aRed = 215 / 255.0
                aGreen = 24 / 255.0
                aBlue = 104 / 255.0
            end
            (PdfColor.DollarBill),
            begin
                aRed = 133 / 255.0
                aGreen = 187 / 255.0
                aBlue = 101 / 255.0
            end
            (PdfColor.Drab),
            begin
                aRed = 150 / 255.0
                aGreen = 113 / 255.0
                aBlue = 23 / 255.0
            end
            (PdfColor.DukeBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 0 / 255.0
                aBlue = 156 / 255.0
            end
            (PdfColor.EarthYellow),
            begin
                aRed = 225 / 255.0
                aGreen = 169 / 255.0
                aBlue = 95 / 255.0
            end
            (PdfColor.EggPlant),
            begin
                aRed = 97 / 255.0
                aGreen = 64 / 255.0
                aBlue = 81 / 255.0
            end
            (PdfColor.EggShell),
            begin
                aRed = 240 / 255.0
                aGreen = 234 / 255.0
                aBlue = 214 / 255.0
            end
            (PdfColor.EgyptianBlue),
            begin
                aRed = 16 / 255.0
                aGreen = 52 / 255.0
                aBlue = 166 / 255.0
            end
            (PdfColor.ElectricBlue),
            begin
                aRed = 125 / 255.0
                aGreen = 249 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.ElectricCrimson),
            begin
                aRed = 255 / 255.0
                aGreen = 0 / 255.0
                aBlue = 63 / 255.0
            end
            (PdfColor.ElectricGreen),
            begin
                aRed = 0 / 255.0
                aGreen = 254 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.ElectricIndigo),
            begin
                aRed = 111 / 255.0
                aGreen = 0 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.ElectricLime),
            begin
                aRed = 204 / 255.0
                aGreen = 255 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.ElectricPurple),
            begin
                aRed = 191 / 255.0
                aGreen = 0 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.ElectricUltraMarine),
            begin
                aRed = 63 / 255.0
                aGreen = 0 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.ElectricViolet),
            begin
                aRed = 143 / 255.0
                aGreen = 0 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.ElectricYellow),
            begin
                aRed = 255 / 255.0
                aGreen = 254 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.Emerald),
            begin
                aRed = 80 / 255.0
                aGreen = 200 / 255.0
                aBlue = 120 / 255.0
            end
            (PdfColor.EtonBlue),
            begin
                aRed = 150 / 255.0
                aGreen = 200 / 255.0
                aBlue = 162 / 255.0
            end
            (PdfColor.FaluRed),
            begin
                aRed = 128 / 255.0
                aGreen = 24 / 255.0
                aBlue = 24 / 255.0
            end
            (PdfColor.Fandango),
            begin
                aRed = 181 / 255.0
                aGreen = 51 / 255.0
                aBlue = 137 / 255.0
            end
            (PdfColor.FashionFuchsia),
            begin
                aRed = 244 / 255.0
                aGreen = 0 / 255.0
                aBlue = 161 / 255.0
            end
            (PdfColor.Fawn),
            begin
                aRed = 229 / 255.0
                aGreen = 170 / 255.0
                aBlue = 112 / 255.0
            end
            (PdfColor.Feldgrau),
            begin
                aRed = 77 / 255.0
                aGreen = 93 / 255.0
                aBlue = 83 / 255.0
            end
            (PdfColor.FernGreen),
            begin
                aRed = 79 / 255.0
                aGreen = 121 / 255.0
                aBlue = 66 / 255.0
            end
            (PdfColor.FerrariRed),
            begin
                aRed = 255 / 255.0
                aGreen = 40 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.FieldDrab),
            begin
                aRed = 108 / 255.0
                aGreen = 84 / 255.0
                aBlue = 30 / 255.0
            end
            (PdfColor.FireBrick),
            begin
                aRed = 178 / 255.0
                aGreen = 34 / 255.0
                aBlue = 34 / 255.0
            end
            (PdfColor.FireEngineRed),
            begin
                aRed = 206 / 255.0
                aGreen = 32 / 255.0
                aBlue = 41 / 255.0
            end
            (PdfColor.Flame),
            begin
                aRed = 226 / 255.0
                aGreen = 88 / 255.0
                aBlue = 34 / 255.0
            end
            (PdfColor.FlamingoPink),
            begin
                aRed = 252 / 255.0
                aGreen = 142 / 255.0
                aBlue = 172 / 255.0
            end
            (PdfColor.Flavescent),
            begin
                aRed = 247 / 255.0
                aGreen = 233 / 255.0
                aBlue = 142 / 255.0
            end
            (PdfColor.Flax),
            begin
                aRed = 238 / 255.0
                aGreen = 220 / 255.0
                aBlue = 130 / 255.0
            end
            (PdfColor.FloralWhite),
            begin
                aRed = 255 / 255.0
                aGreen = 250 / 255.0
                aBlue = 240 / 255.0
            end
            (PdfColor.Folly),
            begin
                aRed = 255 / 255.0
                aGreen = 0 / 255.0
                aBlue = 79 / 255.0
            end
            (PdfColor.ForestGreen),
            begin
                aRed = 1 / 255.0
                aGreen = 68 / 255.0
                aBlue = 33 / 255.0
            end
            (PdfColor.FrenchBeige),
            begin
                aRed = 166 / 255.0
                aGreen = 123 / 255.0
                aBlue = 91 / 255.0
            end
            (PdfColor.FrenchBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 114 / 255.0
                aBlue = 187 / 255.0
            end
            (PdfColor.FrenchLilac),
            begin
                aRed = 134 / 255.0
                aGreen = 96 / 255.0
                aBlue = 142 / 255.0
            end
            (PdfColor.FrenchRose),
            begin
                aRed = 246 / 255.0
                aGreen = 74 / 255.0
                aBlue = 138 / 255.0
            end
            (PdfColor.Fuchsia),
            begin
                aRed = 255 / 255.0
                aGreen = 0 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.FuchsiaPink),
            begin
                aRed = 255 / 255.0
                aGreen = 119 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.Fulvous),
            begin
                aRed = 228 / 255.0
                aGreen = 132 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.FuzzyWuzzy),
            begin
                aRed = 204 / 255.0
                aGreen = 102 / 255.0
                aBlue = 102 / 255.0
            end
            (PdfColor.Gainsboro),
            begin
                aRed = 220 / 255.0
                aGreen = 220 / 255.0
                aBlue = 220 / 255.0
            end
            (PdfColor.Gamboge),
            begin
                aRed = 228 / 255.0
                aGreen = 155 / 255.0
                aBlue = 15 / 255.0
            end
            (PdfColor.GhostWhite),
            begin
                aRed = 248 / 255.0
                aGreen = 248 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.Ginger),
            begin
                aRed = 176 / 255.0
                aGreen = 101 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.Glaucous),
            begin
                aRed = 96 / 255.0
                aGreen = 130 / 255.0
                aBlue = 182 / 255.0
            end
            (PdfColor.Gold),
            begin
                aRed = 212 / 255.0
                aGreen = 175 / 255.0
                aBlue = 55 / 255.0
            end
            (PdfColor.GoldenBrown),
            begin
                aRed = 153 / 255.0
                aGreen = 101 / 255.0
                aBlue = 21 / 255.0
            end
            (PdfColor.GoldenPoppy),
            begin
                aRed = 252 / 255.0
                aGreen = 194 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.GoldenRod),
            begin
                aRed = 218 / 255.0
                aGreen = 165 / 255.0
                aBlue = 32 / 255.0
            end
            (PdfColor.GoldenYellow),
            begin
                aRed = 255 / 255.0
                aGreen = 223 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.GrannySmithApple),
            begin
                aRed = 168 / 255.0
                aGreen = 228 / 255.0
                aBlue = 160 / 255.0
            end
            (PdfColor.Gray),
            begin
                aRed = 128 / 255.0
                aGreen = 128 / 255.0
                aBlue = 128 / 255.0
            end
            (PdfColor.GrayAsparagus),
            begin
                aRed = 70 / 255.0
                aGreen = 89 / 255.0
                aBlue = 69 / 255.0
            end
            (PdfColor.Green),
            begin
                aRed = 0 / 255.0
                aGreen = 255 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.GreenYellow),
            begin
                aRed = 173 / 255.0
                aGreen = 255 / 255.0
                aBlue = 47 / 255.0
            end
            (PdfColor.Grullo),
            begin
                aRed = 169 / 255.0
                aGreen = 154 / 255.0
                aBlue = 134 / 255.0
            end
            (PdfColor.GuppieGreen),
            begin
                aRed = 0 / 255.0
                aGreen = 255 / 255.0
                aBlue = 127 / 255.0
            end
            (PdfColor.Halayaube),
            begin
                aRed = 102 / 255.0
                aGreen = 56 / 255.0
                aBlue = 84 / 255.0
            end
            (PdfColor.HanBlue),
            begin
                aRed = 68 / 255.0
                aGreen = 108 / 255.0
                aBlue = 207 / 255.0
            end
            (PdfColor.HanPurple),
            begin
                aRed = 82 / 255.0
                aGreen = 24 / 255.0
                aBlue = 250 / 255.0
            end
            (PdfColor.Harlequin),
            begin
                aRed = 63 / 255.0
                aGreen = 255 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.HarvardCrimson),
            begin
                aRed = 201 / 255.0
                aGreen = 0 / 255.0
                aBlue = 22 / 255.0
            end
            (PdfColor.HarvestGold),
            begin
                aRed = 218 / 255.0
                aGreen = 145 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.Heliotrope),
            begin
                aRed = 223 / 255.0
                aGreen = 115 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.Honeydew),
            begin
                aRed = 240 / 255.0
                aGreen = 255 / 255.0
                aBlue = 240 / 255.0
            end
            (PdfColor.HookersGreen),
            begin
                aRed = 0 / 255.0
                aGreen = 112 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.HotMagenta),
            begin
                aRed = 255 / 255.0
                aGreen = 29 / 255.0
                aBlue = 206 / 255.0
            end
            (PdfColor.HotPink),
            begin
                aRed = 255 / 255.0
                aGreen = 105 / 255.0
                aBlue = 180 / 255.0
            end
            (PdfColor.HunterGreen),
            begin
                aRed = 53 / 255.0
                aGreen = 94 / 255.0
                aBlue = 59 / 255.0
            end
            (PdfColor.Iceberg),
            begin
                aRed = 113 / 255.0
                aGreen = 166 / 255.0
                aBlue = 210 / 255.0
            end
            (PdfColor.Icterine),
            begin
                aRed = 252 / 255.0
                aGreen = 247 / 255.0
                aBlue = 94 / 255.0
            end
            (PdfColor.Inchworm),
            begin
                aRed = 178 / 255.0
                aGreen = 236 / 255.0
                aBlue = 93 / 255.0
            end
            (PdfColor.IndiaGreen),
            begin
                aRed = 19 / 255.0
                aGreen = 136 / 255.0
                aBlue = 8 / 255.0
            end
            (PdfColor.IndianYellow),
            begin
                aRed = 227 / 255.0
                aGreen = 168 / 255.0
                aBlue = 87 / 255.0
            end
            (PdfColor.Indigo),
            begin
                aRed = 0 / 255.0
                aGreen = 65 / 255.0
                aBlue = 106 / 255.0
            end
            (PdfColor.InternationalKleinBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 47 / 255.0
                aBlue = 167 / 255.0
            end
            (PdfColor.InternationalOrange),
            begin
                aRed = 255 / 255.0
                aGreen = 79 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.Iris),
            begin
                aRed = 90 / 255.0
                aGreen = 79 / 255.0
                aBlue = 207 / 255.0
            end
            (PdfColor.Isabelline),
            begin
                aRed = 244 / 255.0
                aGreen = 240 / 255.0
                aBlue = 236 / 255.0
            end
            (PdfColor.IslamicGreen),
            begin
                aRed = 0 / 255.0
                aGreen = 144 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.Ivory),
            begin
                aRed = 255 / 255.0
                aGreen = 255 / 255.0
                aBlue = 240 / 255.0
            end
            (PdfColor.Jade),
            begin
                aRed = 0 / 255.0
                aGreen = 168 / 255.0
                aBlue = 107 / 255.0
            end
            (PdfColor.Jasmine),
            begin
                aRed = 248 / 255.0
                aGreen = 222 / 255.0
                aBlue = 126 / 255.0
            end
            (PdfColor.Jasper),
            begin
                aRed = 215 / 255.0
                aGreen = 59 / 255.0
                aBlue = 62 / 255.0
            end
            (PdfColor.JazzberryJam),
            begin
                aRed = 165 / 255.0
                aGreen = 11 / 255.0
                aBlue = 94 / 255.0
            end
            (PdfColor.Jonquil),
            begin
                aRed = 250 / 255.0
                aGreen = 218 / 255.0
                aBlue = 94 / 255.0
            end
            (PdfColor.Junebud),
            begin
                aRed = 189 / 255.0
                aGreen = 218 / 255.0
                aBlue = 87 / 255.0
            end
            (PdfColor.JungleGreen),
            begin
                aRed = 41 / 255.0
                aGreen = 171 / 255.0
                aBlue = 135 / 255.0
            end
            (PdfColor.KellyGreen),
            begin
                aRed = 76 / 255.0
                aGreen = 187 / 255.0
                aBlue = 23 / 255.0
            end
            (PdfColor.Khaki),
            begin
                aRed = 195 / 255.0
                aGreen = 176 / 255.0
                aBlue = 145 / 255.0
            end
            (PdfColor.KUCrimson),
            begin
                aRed = 232 / 255.0
                aGreen = 0 / 255.0
                aBlue = 13 / 255.0
            end
            (PdfColor.LanguidLavender),
            begin
                aRed = 214 / 255.0
                aGreen = 202 / 255.0
                aBlue = 221 / 255.0
            end
            (PdfColor.Lapislazuli),
            begin
                aRed = 38 / 255.0
                aGreen = 97 / 255.0
                aBlue = 156 / 255.0
            end
            (PdfColor.LaSalleGreen),
            begin
                aRed = 8 / 255.0
                aGreen = 120 / 255.0
                aBlue = 48 / 255.0
            end
            (PdfColor.LaserLemon),
            begin
                aRed = 254 / 255.0
                aGreen = 254 / 255.0
                aBlue = 34 / 255.0
            end
            (PdfColor.Lava),
            begin
                aRed = 207 / 255.0
                aGreen = 16 / 255.0
                aBlue = 32 / 255.0
            end
            (PdfColor.Lavender),
            begin
                aRed = 181 / 255.0
                aGreen = 126 / 255.0
                aBlue = 220 / 255.0
            end
            (PdfColor.LavenderBlue),
            begin
                aRed = 204 / 255.0
                aGreen = 204 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.LavenderBlush),
            begin
                aRed = 255 / 255.0
                aGreen = 240 / 255.0
                aBlue = 245 / 255.0
            end
            (PdfColor.LavenderGray),
            begin
                aRed = 196 / 255.0
                aGreen = 195 / 255.0
                aBlue = 208 / 255.0
            end
            (PdfColor.LavenderIndigo),
            begin
                aRed = 148 / 255.0
                aGreen = 87 / 255.0
                aBlue = 235 / 255.0
            end
            (PdfColor.LavenderMagenta),
            begin
                aRed = 238 / 255.0
                aGreen = 130 / 255.0
                aBlue = 238 / 255.0
            end
            (PdfColor.LavenderMist),
            begin
                aRed = 230 / 255.0
                aGreen = 230 / 255.0
                aBlue = 250 / 255.0
            end
            (PdfColor.LavenderPink),
            begin
                aRed = 251 / 255.0
                aGreen = 174 / 255.0
                aBlue = 210 / 255.0
            end
            (PdfColor.LavenderPurple),
            begin
                aRed = 150 / 255.0
                aGreen = 123 / 255.0
                aBlue = 182 / 255.0
            end
            (PdfColor.LavenderRose),
            begin
                aRed = 251 / 255.0
                aGreen = 160 / 255.0
                aBlue = 227 / 255.0
            end
            (PdfColor.LawnGreen),
            begin
                aRed = 124 / 255.0
                aGreen = 252 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.Lemon),
            begin
                aRed = 255 / 255.0
                aGreen = 247 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.LemonChiffon),
            begin
                aRed = 255 / 255.0
                aGreen = 250 / 255.0
                aBlue = 205 / 255.0
            end
            (PdfColor.LightApricot),
            begin
                aRed = 253 / 255.0
                aGreen = 213 / 255.0
                aBlue = 177 / 255.0
            end
            (PdfColor.LightBlue),
            begin
                aRed = 173 / 255.0
                aGreen = 216 / 255.0
                aBlue = 230 / 255.0
            end
            (PdfColor.LightBrown),
            begin
                aRed = 181 / 255.0
                aGreen = 101 / 255.0
                aBlue = 29 / 255.0
            end
            (PdfColor.LightCarminePink),
            begin
                aRed = 230 / 255.0
                aGreen = 103 / 255.0
                aBlue = 113 / 255.0
            end
            (PdfColor.LightCoral),
            begin
                aRed = 240 / 255.0
                aGreen = 128 / 255.0
                aBlue = 128 / 255.0
            end
            (PdfColor.LightCornFlowerBlue),
            begin
                aRed = 147 / 255.0
                aGreen = 204 / 255.0
                aBlue = 234 / 255.0
            end
            (PdfColor.LightCrimson),
            begin
                aRed = 245 / 255.0
                aGreen = 105 / 255.0
                aBlue = 145 / 255.0
            end
            (PdfColor.LightCyan),
            begin
                aRed = 224 / 255.0
                aGreen = 255 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.LightFuchsiaPink),
            begin
                aRed = 249 / 255.0
                aGreen = 132 / 255.0
                aBlue = 239 / 255.0
            end
            (PdfColor.LightGoldenrodYellow),
            begin
                aRed = 250 / 255.0
                aGreen = 250 / 255.0
                aBlue = 210 / 255.0
            end
            (PdfColor.LightGray),
            begin
                aRed = 211 / 255.0
                aGreen = 211 / 255.0
                aBlue = 211 / 255.0
            end
            (PdfColor.LightGreen),
            begin
                aRed = 144 / 255.0
                aGreen = 238 / 255.0
                aBlue = 144 / 255.0
            end
            (PdfColor.LightKhaki),
            begin
                aRed = 240 / 255.0
                aGreen = 230 / 255.0
                aBlue = 140 / 255.0
            end
            (PdfColor.LightMauve),
            begin
                aRed = 220 / 255.0
                aGreen = 208 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.LightPastelPurple),
            begin
                aRed = 177 / 255.0
                aGreen = 156 / 255.0
                aBlue = 217 / 255.0
            end
            (PdfColor.LightPink),
            begin
                aRed = 255 / 255.0
                aGreen = 182 / 255.0
                aBlue = 193 / 255.0
            end
            (PdfColor.LightSalmon),
            begin
                aRed = 255 / 255.0
                aGreen = 160 / 255.0
                aBlue = 122 / 255.0
            end
            (PdfColor.LightSalmonPink),
            begin
                aRed = 255 / 255.0
                aGreen = 153 / 255.0
                aBlue = 153 / 255.0
            end
            (PdfColor.LightSeaGreen),
            begin
                aRed = 32 / 255.0
                aGreen = 178 / 255.0
                aBlue = 170 / 255.0
            end
            (PdfColor.LightSkyBlue),
            begin
                aRed = 135 / 255.0
                aGreen = 206 / 255.0
                aBlue = 250 / 255.0
            end
            (PdfColor.LightSlateGray),
            begin
                aRed = 119 / 255.0
                aGreen = 136 / 255.0
                aBlue = 153 / 255.0
            end
            (PdfColor.LightTaupe),
            begin
                aRed = 179 / 255.0
                aGreen = 139 / 255.0
                aBlue = 109 / 255.0
            end
            (PdfColor.LightThulianPink),
            begin
                aRed = 230 / 255.0
                aGreen = 143 / 255.0
                aBlue = 172 / 255.0
            end
            (PdfColor.LightYellow),
            begin
                aRed = 255 / 255.0
                aGreen = 255 / 255.0
                aBlue = 237 / 255.0
            end
            (PdfColor.Lilac),
            begin
                aRed = 200 / 255.0
                aGreen = 162 / 255.0
                aBlue = 200 / 255.0
            end
            (PdfColor.Lime),
            begin
                aRed = 191 / 255.0
                aGreen = 255 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.LimeGreen),
            begin
                aRed = 50 / 255.0
                aGreen = 205 / 255.0
                aBlue = 50 / 255.0
            end
            (PdfColor.LincolnGreen),
            begin
                aRed = 25 / 255.0
                aGreen = 89 / 255.0
                aBlue = 5 / 255.0
            end
            (PdfColor.Linen),
            begin
                aRed = 250 / 255.0
                aGreen = 240 / 255.0
                aBlue = 230 / 255.0
            end
            (PdfColor.Liver),
            begin
                aRed = 83 / 255.0
                aGreen = 75 / 255.0
                aBlue = 79 / 255.0
            end
            (PdfColor.Lust),
            begin
                aRed = 230 / 255.0
                aGreen = 32 / 255.0
                aBlue = 32 / 255.0
            end
            (PdfColor.Magenta),
            begin
                aRed = 202 / 255.0
                aGreen = 31 / 255.0
                aBlue = 123 / 255.0
            end
            (PdfColor.Magicmint),
            begin
                aRed = 170 / 255.0
                aGreen = 240 / 255.0
                aBlue = 209 / 255.0
            end
            (PdfColor.Magnolia),
            begin
                aRed = 248 / 255.0
                aGreen = 244 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.Mahogany),
            begin
                aRed = 192 / 255.0
                aGreen = 64 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.MajorelleBlue),
            begin
                aRed = 96 / 255.0
                aGreen = 80 / 255.0
                aBlue = 220 / 255.0
            end
            (PdfColor.Malachite),
            begin
                aRed = 11 / 255.0
                aGreen = 218 / 255.0
                aBlue = 81 / 255.0
            end
            (PdfColor.Manatee),
            begin
                aRed = 151 / 255.0
                aGreen = 154 / 255.0
                aBlue = 170 / 255.0
            end
            (PdfColor.MangoTango),
            begin
                aRed = 255 / 255.0
                aGreen = 130 / 255.0
                aBlue = 67 / 255.0
            end
            (PdfColor.Maroon),
            begin
                aRed = 128 / 255.0
                aGreen = 0 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.Mauve),
            begin
                aRed = 224 / 255.0
                aGreen = 176 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.Mauvelous),
            begin
                aRed = 239 / 255.0
                aGreen = 152 / 255.0
                aBlue = 170 / 255.0
            end
            (PdfColor.Mauvetaupe),
            begin
                aRed = 145 / 255.0
                aGreen = 95 / 255.0
                aBlue = 109 / 255.0
            end
            (PdfColor.MayaBlue),
            begin
                aRed = 115 / 255.0
                aGreen = 194 / 255.0
                aBlue = 251 / 255.0
            end
            (PdfColor.MeatBrown),
            begin
                aRed = 229 / 255.0
                aGreen = 183 / 255.0
                aBlue = 59 / 255.0
            end
            (PdfColor.MediumAquaMarine),
            begin
                aRed = 102 / 255.0
                aGreen = 221 / 255.0
                aBlue = 170 / 255.0
            end
            (PdfColor.MediumMlue),
            begin
                aRed = 0 / 255.0
                aGreen = 0 / 255.0
                aBlue = 205 / 255.0
            end
            (PdfColor.MediumCandyAppleRed),
            begin
                aRed = 226 / 255.0
                aGreen = 6 / 255.0
                aBlue = 44 / 255.0
            end
            (PdfColor.MediumCarmine),
            begin
                aRed = 175 / 255.0
                aGreen = 64 / 255.0
                aBlue = 53 / 255.0
            end
            (PdfColor.MediumChampagne),
            begin
                aRed = 243 / 255.0
                aGreen = 229 / 255.0
                aBlue = 171 / 255.0
            end
            (PdfColor.MediumElectricBlue),
            begin
                aRed = 3 / 255.0
                aGreen = 80 / 255.0
                aBlue = 150 / 255.0
            end
            (PdfColor.MediumJungleGreen),
            begin
                aRed = 28 / 255.0
                aGreen = 53 / 255.0
                aBlue = 45 / 255.0
            end
            (PdfColor.MediumLavenderMagenta),
            begin
                aRed = 221 / 255.0
                aGreen = 160 / 255.0
                aBlue = 221 / 255.0
            end
            (PdfColor.MediumOrchid),
            begin
                aRed = 186 / 255.0
                aGreen = 85 / 255.0
                aBlue = 211 / 255.0
            end
            (PdfColor.MediumPersianBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 103 / 255.0
                aBlue = 165 / 255.0
            end
            (PdfColor.MediumPurple),
            begin
                aRed = 147 / 255.0
                aGreen = 112 / 255.0
                aBlue = 219 / 255.0
            end
            (PdfColor.MediumRedViolet),
            begin
                aRed = 187 / 255.0
                aGreen = 51 / 255.0
                aBlue = 133 / 255.0
            end
            (PdfColor.MediumSeaGreen),
            begin
                aRed = 60 / 255.0
                aGreen = 179 / 255.0
                aBlue = 113 / 255.0
            end
            (PdfColor.MediumSlateBlue),
            begin
                aRed = 123 / 255.0
                aGreen = 104 / 255.0
                aBlue = 238 / 255.0
            end
            (PdfColor.MediumSpringBud),
            begin
                aRed = 201 / 255.0
                aGreen = 220 / 255.0
                aBlue = 135 / 255.0
            end
            (PdfColor.MediumSpringGreen),
            begin
                aRed = 0 / 255.0
                aGreen = 250 / 255.0
                aBlue = 154 / 255.0
            end
            (PdfColor.MediumTaupe),
            begin
                aRed = 103 / 255.0
                aGreen = 76 / 255.0
                aBlue = 71 / 255.0
            end
            (PdfColor.MediumTealBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 84 / 255.0
                aBlue = 180 / 255.0
            end
            (PdfColor.MediumTurquoise),
            begin
                aRed = 72 / 255.0
                aGreen = 209 / 255.0
                aBlue = 204 / 255.0
            end
            (PdfColor.MediumVioletRed),
            begin
                aRed = 199 / 255.0
                aGreen = 21 / 255.0
                aBlue = 133 / 255.0
            end
            (PdfColor.Melon),
            begin
                aRed = 253 / 255.0
                aGreen = 188 / 255.0
                aBlue = 180 / 255.0
            end
            (PdfColor.MidnightBlue),
            begin
                aRed = 25 / 255.0
                aGreen = 25 / 255.0
                aBlue = 112 / 255.0
            end
            (PdfColor.MidnightGreen),
            begin
                aRed = 0 / 255.0
                aGreen = 73 / 255.0
                aBlue = 83 / 255.0
            end
            (PdfColor.MikadoYellow),
            begin
                aRed = 255 / 255.0
                aGreen = 196 / 255.0
                aBlue = 12 / 255.0
            end
            (PdfColor.Mint),
            begin
                aRed = 62 / 255.0
                aGreen = 180 / 255.0
                aBlue = 137 / 255.0
            end
            (PdfColor.MintCream),
            begin
                aRed = 245 / 255.0
                aGreen = 255 / 255.0
                aBlue = 250 / 255.0
            end
            (PdfColor.MintGreen),
            begin
                aRed = 152 / 255.0
                aGreen = 255 / 255.0
                aBlue = 152 / 255.0
            end
            (PdfColor.MistyRose),
            begin
                aRed = 255 / 255.0
                aGreen = 228 / 255.0
                aBlue = 225 / 255.0
            end
            (PdfColor.MoonStoneBlue),
            begin
                aRed = 115 / 255.0
                aGreen = 169 / 255.0
                aBlue = 194 / 255.0
            end
            (PdfColor.MordantRed19),
            begin
                aRed = 174 / 255.0
                aGreen = 12 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.MossGreen),
            begin
                aRed = 173 / 255.0
                aGreen = 223 / 255.0
                aBlue = 173 / 255.0
            end
            (PdfColor.MountainMeadow),
            begin
                aRed = 48 / 255.0
                aGreen = 186 / 255.0
                aBlue = 143 / 255.0
            end
            (PdfColor.MountBattenPink),
            begin
                aRed = 153 / 255.0
                aGreen = 122 / 255.0
                aBlue = 141 / 255.0
            end
            (PdfColor.MSUGreen),
            begin
                aRed = 24 / 255.0
                aGreen = 69 / 255.0
                aBlue = 59 / 255.0
            end
            (PdfColor.Mulberry),
            begin
                aRed = 197 / 255.0
                aGreen = 75 / 255.0
                aBlue = 140 / 255.0
            end
            (PdfColor.Mustard),
            begin
                aRed = 255 / 255.0
                aGreen = 219 / 255.0
                aBlue = 88 / 255.0
            end
            (PdfColor.Myrtle),
            begin
                aRed = 33 / 255.0
                aGreen = 66 / 255.0
                aBlue = 30 / 255.0
            end
            (PdfColor.NadeshikoPink),
            begin
                aRed = 246 / 255.0
                aGreen = 173 / 255.0
                aBlue = 198 / 255.0
            end
            (PdfColor.NapierGreen),
            begin
                aRed = 42 / 255.0
                aGreen = 128 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.NavajoWhite),
            begin
                aRed = 255 / 255.0
                aGreen = 222 / 255.0
                aBlue = 173 / 255.0
            end
            (PdfColor.Navy),
            begin
                aRed = 0 / 255.0
                aGreen = 0 / 255.0
                aBlue = 128 / 255.0
            end
            (PdfColor.NeonCarrot),
            begin
                aRed = 255 / 255.0
                aGreen = 163 / 255.0
                aBlue = 67 / 255.0
            end
            (PdfColor.NeonFuchsia),
            begin
                aRed = 254 / 255.0
                aGreen = 89 / 255.0
                aBlue = 194 / 255.0
            end
            (PdfColor.NeonGreen),
            begin
                aRed = 57 / 255.0
                aGreen = 255 / 255.0
                aBlue = 20 / 255.0
            end
            (PdfColor.NonPhotoBlue),
            begin
                aRed = 164 / 255.0
                aGreen = 221 / 255.0
                aBlue = 237 / 255.0
            end
            (PdfColor.OceanBoatBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 119 / 255.0
                aBlue = 190 / 255.0
            end
            (PdfColor.Ochre),
            begin
                aRed = 204 / 255.0
                aGreen = 119 / 255.0
                aBlue = 34 / 255.0
            end
            (PdfColor.OldGold),
            begin
                aRed = 207 / 255.0
                aGreen = 181 / 255.0
                aBlue = 59 / 255.0
            end
            (PdfColor.OldLace),
            begin
                aRed = 253 / 255.0
                aGreen = 245 / 255.0
                aBlue = 230 / 255.0
            end
            (PdfColor.OldLavender),
            begin
                aRed = 121 / 255.0
                aGreen = 104 / 255.0
                aBlue = 120 / 255.0
            end
            (PdfColor.OldMauve),
            begin
                aRed = 103 / 255.0
                aGreen = 49 / 255.0
                aBlue = 71 / 255.0
            end
            (PdfColor.OldRose),
            begin
                aRed = 192 / 255.0
                aGreen = 128 / 255.0
                aBlue = 129 / 255.0
            end
            (PdfColor.Olive),
            begin
                aRed = 128 / 255.0
                aGreen = 128 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.OliveDrab),
            begin
                aRed = 107 / 255.0
                aGreen = 142 / 255.0
                aBlue = 35 / 255.0
            end
            (PdfColor.OliveDrab7),
            begin
                aRed = 60 / 255.0
                aGreen = 52 / 255.0
                aBlue = 31 / 255.0
            end
            (PdfColor.Olivine),
            begin
                aRed = 154 / 255.0
                aGreen = 185 / 255.0
                aBlue = 115 / 255.0
            end
            (PdfColor.Onyx),
            begin
                aRed = 15 / 255.0
                aGreen = 15 / 255.0
                aBlue = 15 / 255.0
            end
            (PdfColor.OperaNauve),
            begin
                aRed = 183 / 255.0
                aGreen = 132 / 255.0
                aBlue = 167 / 255.0
            end
            (PdfColor.Orange),
            begin
                aRed = 255 / 255.0
                aGreen = 127 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.OrangePeel),
            begin
                aRed = 255 / 255.0
                aGreen = 159 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.OrangeRed),
            begin
                aRed = 255 / 255.0
                aGreen = 69 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.Orchid),
            begin
                aRed = 218 / 255.0
                aGreen = 112 / 255.0
                aBlue = 214 / 255.0
            end
            (PdfColor.OUCrimsonRed),
            begin
                aRed = 153 / 255.0
                aGreen = 0 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.OuterSpace),
            begin
                aRed = 65 / 255.0
                aGreen = 74 / 255.0
                aBlue = 76 / 255.0
            end
            (PdfColor.OutrageousOrange),
            begin
                aRed = 255 / 255.0
                aGreen = 110 / 255.0
                aBlue = 74 / 255.0
            end
            (PdfColor.OxfordBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 33 / 255.0
                aBlue = 71 / 255.0
            end
            (PdfColor.PakistanGreen),
            begin
                aRed = 0 / 255.0
                aGreen = 102 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.PalatinateBlue),
            begin
                aRed = 39 / 255.0
                aGreen = 59 / 255.0
                aBlue = 226 / 255.0
            end
            (PdfColor.PalatinatePurple),
            begin
                aRed = 104 / 255.0
                aGreen = 40 / 255.0
                aBlue = 96 / 255.0
            end
            (PdfColor.PaleBlue),
            begin
                aRed = 175 / 255.0
                aGreen = 238 / 255.0
                aBlue = 238 / 255.0
            end
            (PdfColor.PaleBrown),
            begin
                aRed = 152 / 255.0
                aGreen = 118 / 255.0
                aBlue = 84 / 255.0
            end
            (PdfColor.PaleCerulean),
            begin
                aRed = 155 / 255.0
                aGreen = 196 / 255.0
                aBlue = 226 / 255.0
            end
            (PdfColor.PaleChestnut),
            begin
                aRed = 221 / 255.0
                aGreen = 173 / 255.0
                aBlue = 175 / 255.0
            end
            (PdfColor.PaleCopper),
            begin
                aRed = 218 / 255.0
                aGreen = 138 / 255.0
                aBlue = 103 / 255.0
            end
            (PdfColor.PaleCornFlowerBlue),
            begin
                aRed = 171 / 255.0
                aGreen = 205 / 255.0
                aBlue = 239 / 255.0
            end
            (PdfColor.PaleGold),
            begin
                aRed = 230 / 255.0
                aGreen = 190 / 255.0
                aBlue = 138 / 255.0
            end
            (PdfColor.PaleGoldenRod),
            begin
                aRed = 238 / 255.0
                aGreen = 232 / 255.0
                aBlue = 170 / 255.0
            end
            (PdfColor.PaleGreen),
            begin
                aRed = 152 / 255.0
                aGreen = 251 / 255.0
                aBlue = 152 / 255.0
            end
            (PdfColor.PaleMagenta),
            begin
                aRed = 249 / 255.0
                aGreen = 132 / 255.0
                aBlue = 229 / 255.0
            end
            (PdfColor.PalePink),
            begin
                aRed = 250 / 255.0
                aGreen = 218 / 255.0
                aBlue = 221 / 255.0
            end
            (PdfColor.PaleRedViolet),
            begin
                aRed = 219 / 255.0
                aGreen = 112 / 255.0
                aBlue = 147 / 255.0
            end
            (PdfColor.PaleRobinEggBlue),
            begin
                aRed = 150 / 255.0
                aGreen = 222 / 255.0
                aBlue = 209 / 255.0
            end
            (PdfColor.PaleSilver),
            begin
                aRed = 201 / 255.0
                aGreen = 192 / 255.0
                aBlue = 187 / 255.0
            end
            (PdfColor.PaleSpringBud),
            begin
                aRed = 236 / 255.0
                aGreen = 235 / 255.0
                aBlue = 189 / 255.0
            end
            (PdfColor.PaleTaupe),
            begin
                aRed = 188 / 255.0
                aGreen = 152 / 255.0
                aBlue = 126 / 255.0
            end
            (PdfColor.PansyPurple),
            begin
                aRed = 120 / 255.0
                aGreen = 24 / 255.0
                aBlue = 74 / 255.0
            end
            (PdfColor.PapayaWhip),
            begin
                aRed = 255 / 255.0
                aGreen = 239 / 255.0
                aBlue = 213 / 255.0
            end
            (PdfColor.PastelBlue),
            begin
                aRed = 174 / 255.0
                aGreen = 198 / 255.0
                aBlue = 207 / 255.0
            end
            (PdfColor.PastelBrown),
            begin
                aRed = 131 / 255.0
                aGreen = 105 / 255.0
                aBlue = 83 / 255.0
            end
            (PdfColor.PastelGray),
            begin
                aRed = 207 / 255.0
                aGreen = 207 / 255.0
                aBlue = 196 / 255.0
            end
            (PdfColor.PastelGreen),
            begin
                aRed = 119 / 255.0
                aGreen = 221 / 255.0
                aBlue = 119 / 255.0
            end
            (PdfColor.PastelMagenta),
            begin
                aRed = 244 / 255.0
                aGreen = 154 / 255.0
                aBlue = 194 / 255.0
            end
            (PdfColor.PastelOrange),
            begin
                aRed = 255 / 255.0
                aGreen = 179 / 255.0
                aBlue = 71 / 255.0
            end
            (PdfColor.PastelPink),
            begin
                aRed = 255 / 255.0
                aGreen = 209 / 255.0
                aBlue = 220 / 255.0
            end
            (PdfColor.PastelPurple),
            begin
                aRed = 179 / 255.0
                aGreen = 158 / 255.0
                aBlue = 181 / 255.0
            end
            (PdfColor.PastelRed),
            begin
                aRed = 255 / 255.0
                aGreen = 105 / 255.0
                aBlue = 97 / 255.0
            end
            (PdfColor.PastelViolet),
            begin
                aRed = 203 / 255.0
                aGreen = 153 / 255.0
                aBlue = 201 / 255.0
            end
            (PdfColor.PastelYellow),
            begin
                aRed = 253 / 255.0
                aGreen = 253 / 255.0
                aBlue = 150 / 255.0
            end
            (PdfColor.Patriarch),
            begin
                aRed = 128 / 255.0
                aGreen = 0 / 255.0
                aBlue = 128 / 255.0
            end
            (PdfColor.PaynesGray),
            begin
                aRed = 64 / 255.0
                aGreen = 64 / 255.0
                aBlue = 79 / 255.0
            end
            (PdfColor.Peach),
            begin
                aRed = 255 / 255.0
                aGreen = 229 / 255.0
                aBlue = 180 / 255.0
            end
            (PdfColor.PeachOrange),
            begin
                aRed = 255 / 255.0
                aGreen = 204 / 255.0
                aBlue = 153 / 255.0
            end
            (PdfColor.PeachPuff),
            begin
                aRed = 255 / 255.0
                aGreen = 218 / 255.0
                aBlue = 185 / 255.0
            end
            (PdfColor.PeachYellow),
            begin
                aRed = 250 / 255.0
                aGreen = 223 / 255.0
                aBlue = 173 / 255.0
            end
            (PdfColor.Pear),
            begin
                aRed = 209 / 255.0
                aGreen = 226 / 255.0
                aBlue = 49 / 255.0
            end
            (PdfColor.PearlAqua),
            begin
                aRed = 136 / 255.0
                aGreen = 216 / 255.0
                aBlue = 192 / 255.0
            end
            (PdfColor.Peridot),
            begin
                aRed = 230 / 255.0
                aGreen = 226 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.PersianBlue),
            begin
                aRed = 28 / 255.0
                aGreen = 57 / 255.0
                aBlue = 187 / 255.0
            end
            (PdfColor.PersianGreen),
            begin
                aRed = 0 / 255.0
                aGreen = 166 / 255.0
                aBlue = 147 / 255.0
            end
            (PdfColor.PersianIndigo),
            begin
                aRed = 50 / 255.0
                aGreen = 18 / 255.0
                aBlue = 122 / 255.0
            end
            (PdfColor.PersianOrange),
            begin
                aRed = 217 / 255.0
                aGreen = 144 / 255.0
                aBlue = 88 / 255.0
            end
            (PdfColor.PersianPink),
            begin
                aRed = 247 / 255.0
                aGreen = 127 / 255.0
                aBlue = 190 / 255.0
            end
            (PdfColor.PersianPlum),
            begin
                aRed = 112 / 255.0
                aGreen = 28 / 255.0
                aBlue = 28 / 255.0
            end
            (PdfColor.PersianRed),
            begin
                aRed = 204 / 255.0
                aGreen = 51 / 255.0
                aBlue = 51 / 255.0
            end
            (PdfColor.PersianRose),
            begin
                aRed = 254 / 255.0
                aGreen = 40 / 255.0
                aBlue = 162 / 255.0
            end
            (PdfColor.Persimmon),
            begin
                aRed = 236 / 255.0
                aGreen = 88 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.Phlox),
            begin
                aRed = 223 / 255.0
                aGreen = 0 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.PhthaloBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 15 / 255.0
                aBlue = 137 / 255.0
            end
            (PdfColor.PhthaloGreen),
            begin
                aRed = 18 / 255.0
                aGreen = 53 / 255.0
                aBlue = 36 / 255.0
            end
            (PdfColor.PiggyPink),
            begin
                aRed = 253 / 255.0
                aGreen = 221 / 255.0
                aBlue = 230 / 255.0
            end
            (PdfColor.PineGreen),
            begin
                aRed = 1 / 255.0
                aGreen = 121 / 255.0
                aBlue = 111 / 255.0
            end
            (PdfColor.Pink),
            begin
                aRed = 255 / 255.0
                aGreen = 192 / 255.0
                aBlue = 203 / 255.0
            end
            (PdfColor.PinkPearl),
            begin
                aRed = 231 / 255.0
                aGreen = 172 / 255.0
                aBlue = 207 / 255.0
            end
            (PdfColor.PinkSherbet),
            begin
                aRed = 247 / 255.0
                aGreen = 143 / 255.0
                aBlue = 167 / 255.0
            end
            (PdfColor.Pistachio),
            begin
                aRed = 147 / 255.0
                aGreen = 197 / 255.0
                aBlue = 114 / 255.0
            end
            (PdfColor.Platinum),
            begin
                aRed = 229 / 255.0
                aGreen = 228 / 255.0
                aBlue = 226 / 255.0
            end
            (PdfColor.Plum),
            begin
                aRed = 142 / 255.0
                aGreen = 69 / 255.0
                aBlue = 133 / 255.0
            end
            (PdfColor.PortlandOrange),
            begin
                aRed = 255 / 255.0
                aGreen = 90 / 255.0
                aBlue = 54 / 255.0
            end
            (PdfColor.PowderBlue),
            begin
                aRed = 176 / 255.0
                aGreen = 224 / 255.0
                aBlue = 230 / 255.0
            end
            (PdfColor.PrincetonOrange),
            begin
                aRed = 255 / 255.0
                aGreen = 143 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.PrussianBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 49 / 255.0
                aBlue = 83 / 255.0
            end
            (PdfColor.Puce),
            begin
                aRed = 204 / 255.0
                aGreen = 136 / 255.0
                aBlue = 153 / 255.0
            end
            (PdfColor.Pumpkin),
            begin
                aRed = 255 / 255.0
                aGreen = 117 / 255.0
                aBlue = 24 / 255.0
            end
            (PdfColor.Purple),
            begin
                aRed = 159 / 255.0
                aGreen = 0 / 255.0
                aBlue = 197 / 255.0
            end
            (PdfColor.PurpleHeart),
            begin
                aRed = 105 / 255.0
                aGreen = 53 / 255.0
                aBlue = 156 / 255.0
            end
            (PdfColor.PurpleMountainMajesty),
            begin
                aRed = 150 / 255.0
                aGreen = 120 / 255.0
                aBlue = 182 / 255.0
            end
            (PdfColor.PurplePizzazz),
            begin
                aRed = 254 / 255.0
                aGreen = 78 / 255.0
                aBlue = 218 / 255.0
            end
            (PdfColor.PurpleTaupe),
            begin
                aRed = 80 / 255.0
                aGreen = 64 / 255.0
                aBlue = 77 / 255.0
            end
            (PdfColor.Quartz),
            begin
                aRed = 81 / 255.0
                aGreen = 72 / 255.0
                aBlue = 79 / 255.0
            end
            (PdfColor.RadicalRed),
            begin
                aRed = 255 / 255.0
                aGreen = 53 / 255.0
                aBlue = 94 / 255.0
            end
            (PdfColor.Raspberry),
            begin
                aRed = 227 / 255.0
                aGreen = 11 / 255.0
                aBlue = 93 / 255.0
            end
            (PdfColor.RaspberryPink),
            begin
                aRed = 226 / 255.0
                aGreen = 80 / 255.0
                aBlue = 152 / 255.0
            end
            (PdfColor.RaspberryRose),
            begin
                aRed = 179 / 255.0
                aGreen = 68 / 255.0
                aBlue = 108 / 255.0
            end
            (PdfColor.RawUmber),
            begin
                aRed = 130 / 255.0
                aGreen = 102 / 255.0
                aBlue = 68 / 255.0
            end
            (PdfColor.RazzleDazzleRose),
            begin
                aRed = 255 / 255.0
                aGreen = 51 / 255.0
                aBlue = 204 / 255.0
            end
            (PdfColor.Razzmatazz),
            begin
                aRed = 227 / 255.0
                aGreen = 37 / 255.0
                aBlue = 107 / 255.0
            end
            (PdfColor.Red),
            begin
                aRed = 255 / 255.0
                aGreen = 0 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.Redwood),
            begin
                aRed = 171 / 255.0
                aGreen = 78 / 255.0
                aBlue = 82 / 255.0
            end
            (PdfColor.Regalia),
            begin
                aRed = 82 / 255.0
                aGreen = 45 / 255.0
                aBlue = 128 / 255.0
            end
            (PdfColor.RichBlack),
            begin
                aRed = 0 / 255.0
                aGreen = 64 / 255.0
                aBlue = 64 / 255.0
            end
            (PdfColor.RichBrilliantLavender),
            begin
                aRed = 241 / 255.0
                aGreen = 167 / 255.0
                aBlue = 254 / 255.0
            end
            (PdfColor.RichCarmine),
            begin
                aRed = 215 / 255.0
                aGreen = 0 / 255.0
                aBlue = 64 / 255.0
            end
            (PdfColor.RichElectricBlue),
            begin
                aRed = 8 / 255.0
                aGreen = 146 / 255.0
                aBlue = 208 / 255.0
            end
            (PdfColor.RichLavender),
            begin
                aRed = 167 / 255.0
                aGreen = 107 / 255.0
                aBlue = 207 / 255.0
            end
            (PdfColor.RichLilac),
            begin
                aRed = 182 / 255.0
                aGreen = 102 / 255.0
                aBlue = 210 / 255.0
            end
            (PdfColor.RichMaroon),
            begin
                aRed = 176 / 255.0
                aGreen = 48 / 255.0
                aBlue = 96 / 255.0
            end
            (PdfColor.RifleGreen),
            begin
                aRed = 65 / 255.0
                aGreen = 72 / 255.0
                aBlue = 51 / 255.0
            end
            (PdfColor.RobinEggBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 204 / 255.0
                aBlue = 204 / 255.0
            end
            (PdfColor.RoseBonBon),
            begin
                aRed = 249 / 255.0
                aGreen = 66 / 255.0
                aBlue = 158 / 255.0
            end
            (PdfColor.RoseEbony),
            begin
                aRed = 103 / 255.0
                aGreen = 72 / 255.0
                aBlue = 70 / 255.0
            end
            (PdfColor.RoseGold),
            begin
                aRed = 183 / 255.0
                aGreen = 110 / 255.0
                aBlue = 121 / 255.0
            end
            (PdfColor.RosePink),
            begin
                aRed = 255 / 255.0
                aGreen = 102 / 255.0
                aBlue = 204 / 255.0
            end
            (PdfColor.RoseQuartz),
            begin
                aRed = 170 / 255.0
                aGreen = 152 / 255.0
                aBlue = 169 / 255.0
            end
            (PdfColor.RoseTaupe),
            begin
                aRed = 144 / 255.0
                aGreen = 93 / 255.0
                aBlue = 93 / 255.0
            end
            (PdfColor.RoseWood),
            begin
                aRed = 101 / 255.0
                aGreen = 0 / 255.0
                aBlue = 11 / 255.0
            end
            (PdfColor.RossoCorsa),
            begin
                aRed = 212 / 255.0
                aGreen = 0 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.RosyBrown),
            begin
                aRed = 188 / 255.0
                aGreen = 143 / 255.0
                aBlue = 143 / 255.0
            end
            (PdfColor.RoyalAzure),
            begin
                aRed = 0 / 255.0
                aGreen = 56 / 255.0
                aBlue = 168 / 255.0
            end
            (PdfColor.RoyalBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 35 / 255.0
                aBlue = 102 / 255.0
            end
            (PdfColor.RoyalFuchsia),
            begin
                aRed = 202 / 255.0
                aGreen = 44 / 255.0
                aBlue = 146 / 255.0
            end
            (PdfColor.RoyalPurple),
            begin
                aRed = 120 / 255.0
                aGreen = 81 / 255.0
                aBlue = 169 / 255.0
            end
            (PdfColor.Ruby),
            begin
                aRed = 224 / 255.0
                aGreen = 17 / 255.0
                aBlue = 95 / 255.0
            end
            (PdfColor.Ruddy),
            begin
                aRed = 255 / 255.0
                aGreen = 0 / 255.0
                aBlue = 40 / 255.0
            end
            (PdfColor.RuddyBrown),
            begin
                aRed = 187 / 255.0
                aGreen = 101 / 255.0
                aBlue = 40 / 255.0
            end
            (PdfColor.RuddyPink),
            begin
                aRed = 225 / 255.0
                aGreen = 142 / 255.0
                aBlue = 150 / 255.0
            end
            (PdfColor.Rufous),
            begin
                aRed = 168 / 255.0
                aGreen = 28 / 255.0
                aBlue = 7 / 255.0
            end
            (PdfColor.Russet),
            begin
                aRed = 128 / 255.0
                aGreen = 70 / 255.0
                aBlue = 27 / 255.0
            end
            (PdfColor.Rust),
            begin
                aRed = 183 / 255.0
                aGreen = 65 / 255.0
                aBlue = 14 / 255.0
            end
            (PdfColor.SacramentoStateGreen),
            begin
                aRed = 0 / 255.0
                aGreen = 86 / 255.0
                aBlue = 63 / 255.0
            end
            (PdfColor.SaddleBrown),
            begin
                aRed = 139 / 255.0
                aGreen = 69 / 255.0
                aBlue = 19 / 255.0
            end
            (PdfColor.SafetyOrange),
            begin
                aRed = 255 / 255.0
                aGreen = 103 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.Saffron),
            begin
                aRed = 244 / 255.0
                aGreen = 196 / 255.0
                aBlue = 48 / 255.0
            end
            (PdfColor.Salmon),
            begin
                aRed = 255 / 255.0
                aGreen = 140 / 255.0
                aBlue = 105 / 255.0
            end
            (PdfColor.SalmonPink),
            begin
                aRed = 255 / 255.0
                aGreen = 145 / 255.0
                aBlue = 164 / 255.0
            end
            (PdfColor.SandStorm),
            begin
                aRed = 236 / 255.0
                aGreen = 213 / 255.0
                aBlue = 64 / 255.0
            end
            (PdfColor.SandyBrown),
            begin
                aRed = 244 / 255.0
                aGreen = 164 / 255.0
                aBlue = 96 / 255.0
            end
            (PdfColor.Sangria),
            begin
                aRed = 146 / 255.0
                aGreen = 0 / 255.0
                aBlue = 10 / 255.0
            end
            (PdfColor.SapGreen),
            begin
                aRed = 80 / 255.0
                aGreen = 125 / 255.0
                aBlue = 42 / 255.0
            end
            (PdfColor.Sapphire),
            begin
                aRed = 8 / 255.0
                aGreen = 37 / 255.0
                aBlue = 103 / 255.0
            end
            (PdfColor.SatinSheenGold),
            begin
                aRed = 203 / 255.0
                aGreen = 161 / 255.0
                aBlue = 53 / 255.0
            end
            (PdfColor.Scarlet),
            begin
                aRed = 255 / 255.0
                aGreen = 36 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.SchoolBusYellow),
            begin
                aRed = 255 / 255.0
                aGreen = 216 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.ScreaminGreen),
            begin
                aRed = 118 / 255.0
                aGreen = 255 / 255.0
                aBlue = 122 / 255.0
            end
            (PdfColor.SeaGreen),
            begin
                aRed = 46 / 255.0
                aGreen = 139 / 255.0
                aBlue = 87 / 255.0
            end
            (PdfColor.SealBrown),
            begin
                aRed = 50 / 255.0
                aGreen = 20 / 255.0
                aBlue = 20 / 255.0
            end
            (PdfColor.SeaShell),
            begin
                aRed = 255 / 255.0
                aGreen = 245 / 255.0
                aBlue = 238 / 255.0
            end
            (PdfColor.SelectiveYellow),
            begin
                aRed = 255 / 255.0
                aGreen = 186 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.Sepia),
            begin
                aRed = 112 / 255.0
                aGreen = 66 / 255.0
                aBlue = 20 / 255.0
            end
            (PdfColor.Shadow),
            begin
                aRed = 138 / 255.0
                aGreen = 121 / 255.0
                aBlue = 93 / 255.0
            end
            (PdfColor.ShamrockGreen),
            begin
                aRed = 0 / 255.0
                aGreen = 158 / 255.0
                aBlue = 96 / 255.0
            end
            (PdfColor.ShockingPink),
            begin
                aRed = 252 / 255.0
                aGreen = 15 / 255.0
                aBlue = 192 / 255.0
            end
            (PdfColor.Sienna),
            begin
                aRed = 136 / 255.0
                aGreen = 45 / 255.0
                aBlue = 23 / 255.0
            end
            (PdfColor.Silver),
            begin
                aRed = 192 / 255.0
                aGreen = 192 / 255.0
                aBlue = 192 / 255.0
            end
            (PdfColor.Sinopia),
            begin
                aRed = 203 / 255.0
                aGreen = 65 / 255.0
                aBlue = 11 / 255.0
            end
            (PdfColor.Skobeloff),
            begin
                aRed = 0 / 255.0
                aGreen = 116 / 255.0
                aBlue = 116 / 255.0
            end
            (PdfColor.SkyBlue),
            begin
                aRed = 135 / 255.0
                aGreen = 206 / 255.0
                aBlue = 235 / 255.0
            end
            (PdfColor.SkyMagenta),
            begin
                aRed = 207 / 255.0
                aGreen = 113 / 255.0
                aBlue = 175 / 255.0
            end
            (PdfColor.SlateBlue),
            begin
                aRed = 106 / 255.0
                aGreen = 90 / 255.0
                aBlue = 205 / 255.0
            end
            (PdfColor.SlateGray),
            begin
                aRed = 112 / 255.0
                aGreen = 128 / 255.0
                aBlue = 144 / 255.0
            end
            (PdfColor.SmokeyTopaz),
            begin
                aRed = 147 / 255.0
                aGreen = 61 / 255.0
                aBlue = 65 / 255.0
            end
            (PdfColor.SmokyBlack),
            begin
                aRed = 16 / 255.0
                aGreen = 12 / 255.0
                aBlue = 8 / 255.0
            end
            (PdfColor.Snow),
            begin
                aRed = 255 / 255.0
                aGreen = 250 / 255.0
                aBlue = 250 / 255.0
            end
            (PdfColor.SpiroDiscoBall),
            begin
                aRed = 15 / 255.0
                aGreen = 192 / 255.0
                aBlue = 252 / 255.0
            end
            (PdfColor.SplashedWhite),
            begin
                aRed = 254 / 255.0
                aGreen = 253 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.SpringBud),
            begin
                aRed = 167 / 255.0
                aGreen = 252 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.SteelBlue),
            begin
                aRed = 70 / 255.0
                aGreen = 130 / 255.0
                aBlue = 180 / 255.0
            end
            (PdfColor.SaintPatricksBlue),
            begin
                aRed = 35 / 255.0
                aGreen = 41 / 255.0
                aBlue = 122 / 255.0
            end
            (PdfColor.Straw),
            begin
                aRed = 228 / 255.0
                aGreen = 217 / 255.0
                aBlue = 111 / 255.0
            end
            (PdfColor.Sunglow),
            begin
                aRed = 255 / 255.0
                aGreen = 204 / 255.0
                aBlue = 51 / 255.0
            end
            (PdfColor.Tan),
            begin
                aRed = 210 / 255.0
                aGreen = 180 / 255.0
                aBlue = 140 / 255.0
            end
            (PdfColor.Tangelo),
            begin
                aRed = 249 / 255.0
                aGreen = 77 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.Tangerine),
            begin
                aRed = 242 / 255.0
                aGreen = 133 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.TangerineYellow),
            begin
                aRed = 255 / 255.0
                aGreen = 204 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.TaupeGray),
            begin
                aRed = 139 / 255.0
                aGreen = 133 / 255.0
                aBlue = 137 / 255.0
            end
            (PdfColor.TeaGreen),
            begin
                aRed = 208 / 255.0
                aGreen = 240 / 255.0
                aBlue = 192 / 255.0
            end
            (PdfColor.Teal),
            begin
                aRed = 0 / 255.0
                aGreen = 128 / 255.0
                aBlue = 128 / 255.0
            end
            (PdfColor.TealBlue),
            begin
                aRed = 54 / 255.0
                aGreen = 117 / 255.0
                aBlue = 136 / 255.0
            end
            (PdfColor.TealGreen),
            begin
                aRed = 0 / 255.0
                aGreen = 109 / 255.0
                aBlue = 91 / 255.0
            end
            (PdfColor.Tenne),
            begin
                aRed = 205 / 255.0
                aGreen = 87 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.Terracotta),
            begin
                aRed = 226 / 255.0
                aGreen = 114 / 255.0
                aBlue = 91 / 255.0
            end
            (PdfColor.Thistle),
            begin
                aRed = 216 / 255.0
                aGreen = 191 / 255.0
                aBlue = 216 / 255.0
            end
            (PdfColor.ThulianPink),
            begin
                aRed = 222 / 255.0
                aGreen = 111 / 255.0
                aBlue = 161 / 255.0
            end
            (PdfColor.TickleMePink),
            begin
                aRed = 252 / 255.0
                aGreen = 137 / 255.0
                aBlue = 172 / 255.0
            end
            (PdfColor.TiffanyBlue),
            begin
                aRed = 10 / 255.0
                aGreen = 186 / 255.0
                aBlue = 181 / 255.0
            end
            (PdfColor.TigersEye),
            begin
                aRed = 224 / 255.0
                aGreen = 141 / 255.0
                aBlue = 60 / 255.0
            end
            (PdfColor.TimberWolf),
            begin
                aRed = 219 / 255.0
                aGreen = 215 / 255.0
                aBlue = 210 / 255.0
            end
            (PdfColor.TitaniumYellow),
            begin
                aRed = 238 / 255.0
                aGreen = 230 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.Tomato),
            begin
                aRed = 255 / 255.0
                aGreen = 99 / 255.0
                aBlue = 71 / 255.0
            end
            (PdfColor.Toolbox),
            begin
                aRed = 116 / 255.0
                aGreen = 108 / 255.0
                aBlue = 192 / 255.0
            end
            (PdfColor.Topaz),
            begin
                aRed = 255 / 255.0
                aGreen = 200 / 255.0
                aBlue = 124 / 255.0
            end
            (PdfColor.TractorRed),
            begin
                aRed = 253 / 255.0
                aGreen = 14 / 255.0
                aBlue = 53 / 255.0
            end
            (PdfColor.TropicalRainForest),
            begin
                aRed = 0 / 255.0
                aGreen = 117 / 255.0
                aBlue = 94 / 255.0
            end
            (PdfColor.TrueBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 115 / 255.0
                aBlue = 207 / 255.0
            end
            (PdfColor.TuftsBlue),
            begin
                aRed = 65 / 255.0
                aGreen = 125 / 255.0
                aBlue = 193 / 255.0
            end
            (PdfColor.Tumbleweed),
            begin
                aRed = 222 / 255.0
                aGreen = 170 / 255.0
                aBlue = 136 / 255.0
            end
            (PdfColor.TurkishRose),
            begin
                aRed = 181 / 255.0
                aGreen = 114 / 255.0
                aBlue = 129 / 255.0
            end
            (PdfColor.Turquoise),
            begin
                aRed = 48 / 255.0
                aGreen = 213 / 255.0
                aBlue = 200 / 255.0
            end
            (PdfColor.TurquoiseBlue),
            begin
                aRed = 0 / 255.0
                aGreen = 255 / 255.0
                aBlue = 239 / 255.0
            end
            (PdfColor.TurquoiseGreen),
            begin
                aRed = 160 / 255.0
                aGreen = 214 / 255.0
                aBlue = 180 / 255.0
            end
            (PdfColor.TuscanRed),
            begin
                aRed = 102 / 255.0
                aGreen = 66 / 255.0
                aBlue = 77 / 255.0
            end
            (PdfColor.TwilightLavender),
            begin
                aRed = 138 / 255.0
                aGreen = 73 / 255.0
                aBlue = 107 / 255.0
            end
            (PdfColor.TyrianPurple),
            begin
                aRed = 102 / 255.0
                aGreen = 2 / 255.0
                aBlue = 60 / 255.0
            end
            (PdfColor.UABlue),
            begin
                aRed = 0 / 255.0
                aGreen = 51 / 255.0
                aBlue = 170 / 255.0
            end
            (PdfColor.UARed),
            begin
                aRed = 217 / 255.0
                aGreen = 0 / 255.0
                aBlue = 76 / 255.0
            end
            (PdfColor.Ube),
            begin
                aRed = 136 / 255.0
                aGreen = 120 / 255.0
                aBlue = 195 / 255.0
            end
            (PdfColor.UCLABlue),
            begin
                aRed = 83 / 255.0
                aGreen = 104 / 255.0
                aBlue = 149 / 255.0
            end
            (PdfColor.UCLAGold),
            begin
                aRed = 255 / 255.0
                aGreen = 179 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.UFOGreen),
            begin
                aRed = 60 / 255.0
                aGreen = 208 / 255.0
                aBlue = 112 / 255.0
            end
            (PdfColor.UltraMarine),
            begin
                aRed = 18 / 255.0
                aGreen = 10 / 255.0
                aBlue = 143 / 255.0
            end
            (PdfColor.UltraMarineBlue),
            begin
                aRed = 65 / 255.0
                aGreen = 102 / 255.0
                aBlue = 245 / 255.0
            end
            (PdfColor.UltraPink),
            begin
                aRed = 255 / 255.0
                aGreen = 111 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.Umber),
            begin
                aRed = 99 / 255.0
                aGreen = 81 / 255.0
                aBlue = 71 / 255.0
            end
            (PdfColor.UnitedNationsBlue),
            begin
                aRed = 91 / 255.0
                aGreen = 146 / 255.0
                aBlue = 229 / 255.0
            end
            (PdfColor.UniversityOfCaliforniaGold),
            begin
                aRed = 183 / 255.0
                aGreen = 135 / 255.0
                aBlue = 39 / 255.0
            end
            (PdfColor.UnmellowYellow),
            begin
                aRed = 255 / 255.0
                aGreen = 255 / 255.0
                aBlue = 102 / 255.0
            end
            (PdfColor.UPMaroon),
            begin
                aRed = 123 / 255.0
                aGreen = 17 / 255.0
                aBlue = 19 / 255.0
            end
            (PdfColor.UpsdellRed),
            begin
                aRed = 174 / 255.0
                aGreen = 32 / 255.0
                aBlue = 41 / 255.0
            end
            (PdfColor.Urobilin),
            begin
                aRed = 225 / 255.0
                aGreen = 173 / 255.0
                aBlue = 33 / 255.0
            end
            (PdfColor.UtahCrimson),
            begin
                aRed = 211 / 255.0
                aGreen = 0 / 255.0
                aBlue = 63 / 255.0
            end
            (PdfColor.VegasGold),
            begin
                aRed = 197 / 255.0
                aGreen = 179 / 255.0
                aBlue = 88 / 255.0
            end
            (PdfColor.VenetianRed),
            begin
                aRed = 200 / 255.0
                aGreen = 8 / 255.0
                aBlue = 21 / 255.0
            end
            (PdfColor.Verdigris),
            begin
                aRed = 67 / 255.0
                aGreen = 179 / 255.0
                aBlue = 174 / 255.0
            end
            (PdfColor.Veronica),
            begin
                aRed = 160 / 255.0
                aGreen = 32 / 255.0
                aBlue = 240 / 255.0
            end
            (PdfColor.Violet),
            begin
                aRed = 127 / 255.0
                aGreen = 0 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.Viridian),
            begin
                aRed = 64 / 255.0
                aGreen = 130 / 255.0
                aBlue = 109 / 255.0
            end
            (PdfColor.VividAuburn),
            begin
                aRed = 146 / 255.0
                aGreen = 39 / 255.0
                aBlue = 36 / 255.0
            end
            (PdfColor.VividBurgundy),
            begin
                aRed = 159 / 255.0
                aGreen = 29 / 255.0
                aBlue = 53 / 255.0
            end
            (PdfColor.VividCerise),
            begin
                aRed = 218 / 255.0
                aGreen = 29 / 255.0
                aBlue = 129 / 255.0
            end
            (PdfColor.VividTangerine),
            begin
                aRed = 255 / 255.0
                aGreen = 160 / 255.0
                aBlue = 137 / 255.0
            end
            (PdfColor.VividViolet),
            begin
                aRed = 159 / 255.0
                aGreen = 0 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.WarmBlack),
            begin
                aRed = 0 / 255.0
                aGreen = 66 / 255.0
                aBlue = 66 / 255.0
            end
            (PdfColor.Wenge),
            begin
                aRed = 100 / 255.0
                aGreen = 84 / 255.0
                aBlue = 82 / 255.0
            end
            (PdfColor.Wheat),
            begin
                aRed = 245 / 255.0
                aGreen = 222 / 255.0
                aBlue = 179 / 255.0
            end
            (PdfColor.White),
            begin
                aRed = 255 / 255.0
                aGreen = 255 / 255.0
                aBlue = 255 / 255.0
            end
            (PdfColor.WhiteSmoke),
            begin
                aRed = 245 / 255.0
                aGreen = 245 / 255.0
                aBlue = 245 / 255.0
            end
            (PdfColor.WildBlueYonder),
            begin
                aRed = 162 / 255.0
                aGreen = 173 / 255.0
                aBlue = 208 / 255.0
            end
            (PdfColor.WildStrawberry),
            begin
                aRed = 255 / 255.0
                aGreen = 67 / 255.0
                aBlue = 164 / 255.0
            end
            (PdfColor.WildWatermelon),
            begin
                aRed = 252 / 255.0
                aGreen = 108 / 255.0
                aBlue = 133 / 255.0
            end
            (PdfColor.Wine),
            begin
                aRed = 114 / 255.0
                aGreen = 47 / 255.0
                aBlue = 55 / 255.0
            end
            (PdfColor.Wisteria),
            begin
                aRed = 201 / 255.0
                aGreen = 160 / 255.0
                aBlue = 220 / 255.0
            end
            (PdfColor.Xanadu),
            begin
                aRed = 115 / 255.0
                aGreen = 134 / 255.0
                aBlue = 120 / 255.0
            end
            (PdfColor.YaleBlue),
            begin
                aRed = 15 / 255.0
                aGreen = 77 / 255.0
                aBlue = 146 / 255.0
            end
            (PdfColor.Yellow),
            begin
                aRed = 255 / 255.0
                aGreen = 255 / 255.0
                aBlue = 0 / 255.0
            end
            (PdfColor.YellowGreen),
            begin
                aRed = 154 / 255.0
                aGreen = 205 / 255.0
                aBlue = 50 / 255.0
            end
            (PdfColor.YellowOrange),
            begin
                aRed = 255 / 255.0
                aGreen = 239 / 255.0
                aBlue = 2 / 255.0
            end
            (PdfColor.Zaffre),
            begin
                aRed = 0 / 255.0
                aGreen = 20 / 255.0
                aBlue = 168 / 255.0
            end
            (PdfColor.ZinnwalditeBrown),
            begin
                aRed = 44 / 255.0
                aGreen = 22 / 255.0
                aBlue = 8 / 255.0
            end
            endusing
        endmethod

        ;;---------------------------------------------------------------------
        ;;

        private method setBackroundColor, void
        proc
            if (BackgroundColor != PdfColor.White)
            begin
                pg.SetLineWidth(1)
                pg.SetRGBStroke(backgroundRed,backgroundGreen,backgroundBlue)
                pg.SetRGBFill(backgroundRed,backgroundGreen,backgroundBlue)
                pg.Rectangle((float)0,(float)0,(float)(this.Width*1.0),(float)(this.Height*1.0))
                pg.FillStroke()
                resetFillColor()
                resetStrokeColor()
            end
        endmethod

        ;;---------------------------------------------------------------------
        ;;

        private method setCustomFillColor, void
            required in aColor, PdfColor
            record
                tmpRed, float
                tmpGreen, float
                tmpBlue, float
            endrecord
        proc
            rgbFromPdfColor(aColor,tmpRed,tmpGreen,tmpBlue)
            pg.SetRGBFill(tmpRed,tmpGreen,tmpBlue)
        endmethod

        ;;---------------------------------------------------------------------
        ;;

        private method setCustomStrokeColor, void
            required in aColor, PdfColor
            record
                tmpRed, float
                tmpGreen, float
                tmpBlue, float
            endrecord
        proc
            rgbFromPdfColor(aColor,tmpRed,tmpGreen,tmpBlue)
            pg.SetRGBStroke(tmpRed,tmpGreen,tmpBlue)
        endmethod

        ;;---------------------------------------------------------------------
        ;;

        private method setFontAttributes, void
.ifdef DBLNET
            default  in aBold,      boolean, false
            default  in aItalic,    boolean, false
.else
            optional in aBold,      boolean
            optional in aItalic,    boolean
.endc
        proc
.ifdef DBLNET
            if (aBold && aItalic) then
            begin
                pg.SetFontAndSize(fontBoldItalic,fontSizeFloat)
                this.CurrentFont = fontBoldItalic.GetFontName()
            end
            else if (aBold) then
            begin
                pg.SetFontAndSize(fontBold,fontSizeFloat)
                this.CurrentFont = fontBoldItalic.GetFontName()
            end
            else if (aItalic)
            begin
                pg.SetFontAndSize(fontItalic,fontSizeFloat)
                this.CurrentFont = fontBoldItalic.GetFontName()
            end
.else
            if (^passed(aBold) && aBold && ^passed(aItalic) && aItalic) then
            begin
                pg.SetFontAndSize(fontBoldItalic,fontSizeFloat)
                this.CurrentFont = fontBoldItalic.GetFontName()
            end
            else if (^passed(aBold) && aBold) then
            begin
                pg.SetFontAndSize(fontBold,fontSizeFloat)
                this.CurrentFont = fontBoldItalic.GetFontName()
            end
            else if (^passed(aItalic) && aItalic)
            begin
                pg.SetFontAndSize(fontItalic,fontSizeFloat)
                this.CurrentFont = fontBoldItalic.GetFontName()
            end
.endc
        endmethod

    endclass

    ;;*********************************************************************
    ;;STRUCTURES

    public structure XYcoordinate
        X, float
        Y, float
    endstructure
    
    ;;*********************************************************************
    ;;SUPPORTING CLASSES

    ;;*********************************************************************
    ;;; <summary>
    ;;; Abstract base class for all auto item classes
    ;;; </summary>
    public abstract class AutoItem

        public method AutoItem
.ifdef DBLNET
            default  in aMode, AutoItemMode,    AutoItemMode.DefaultMode
.else
            optional in aMode, AutoItemMode
.endc
        proc
.ifdef DBLNET
            if ((aMode!=AutoItemMode.DefaultMode)) then
.else
            if (^passed(aMode)) then
.endc
            mMode = aMode
            else
                mMode = AutoItemMode.EndPage
        endmethod

        private mMode, AutoItemMode

        public property Mode, AutoItemMode
            method get
            proc
                mreturn mMode
            endmethod
            method set
            proc
                mMode = value
            endmethod
        endproperty

    endclass

    ;;*********************************************************************
    ;;; <summary>
    ;;; Abstract base class for all auto line and auto box classes
    ;;; </summary>
    public abstract class AutoLine extends AutoItem

        public method AutoLine
.ifdef DBLNET
            default  in aWidth,       float,        0
            default  in aStrokeColor, PdfColor,     PdfColor.DefaultColor
            default  in aMode,        AutoItemMode, AutoItemMode.DefaultMode
.else
            optional in aWidth,       float
            optional in aStrokeColor, PdfColor
            optional in aMode,        AutoItemMode
.endc
            endparams
            parent(aMode)
        proc
.ifdef DBLNET
            if (aWidth>0) then
.else
            if (^passed(aWidth) && (aWidth>0)) then
.endc
                Width = aWidth
            else
                Width = 1

.ifdef DBLNET
            if ((aStrokeColor!=PdfColor.DefaultColor)) then
.else
            if (^passed(aStrokeColor)) then
.endc
            StrokeColor = aStrokeColor
            else
                StrokeColor = PdfColor.Black

        endmethod

        private mWidth, float

        public property Width, float
            method get
            proc
                mreturn mWidth
            endmethod
            method set
            proc
                mWidth = value
            endmethod
        endproperty

        private mStrokeColor, PdfColor

        public property StrokeColor, PdfColor
            method get
            proc
                mreturn mStrokeColor
            endmethod
            method set
            proc
                mStrokeColor = value
            endmethod
        endproperty

    endclass

    ;;*********************************************************************
    ;;; <summary>
    ;;; Abstract base class for all auto box classes
    ;;; </summary>
    public abstract class AutoBox extends AutoLine

        public method AutoBox
.ifdef DBLNET
            default  in aWidth,       float,        1
            default  in aStrokeColor, PdfColor,     PdfColor.DefaultColor
            default  in aFill,        boolean,      false
            default  in aFillColor,   PdfColor,     PdfColor.DefaultColor
            default  in aMode,        AutoItemMode, AutoItemMode.DefaultMode
.else
            optional in aWidth,       float
            optional in aStrokeColor, PdfColor
            optional in aFill,        boolean
            optional in aFillColor,   PdfColor
            optional in aMode,        AutoItemMode
.endc
            endparams
            parent(aWidth,aStrokeColor,aMode)
        proc

.ifdef DBLNET
            mFill = aFill
.else
            if (^passed(aFill))
                mFill = aFill
.endc

.ifdef DBLNET
            if (aFillColor!=PdfColor.DefaultColor)
.else
            if (^passed(aFillColor))
.endc
                mFillColor = aFillColor

        endmethod

        private mFill, boolean, false

        public property Fill, boolean
            method get
            proc
                mreturn mFill
            endmethod
            method set
            proc
                mFill = value
            endmethod
        endproperty

        private mFillColor, PdfColor, PdfColor.Black

        public property FillColor, PdfColor
            method get
            proc
                mreturn mFillColor
            endmethod
            method set
            proc
                mFillColor = value
            endmethod
        endproperty

    endclass

    ;;*********************************************************************
    ;;; <summary>
    ;;; Abstract base class for all auto text classes
    ;;; </summary>
    public abstract class AutoText extends AutoItem

        public method AutoText
            required in aText,      string
.ifdef DBLNET
            default  in aColor,     PdfColor,       PdfColor.DefaultColor
            default  in aUnderline, boolean,        false
            default  in aMode,      AutoItemMode,   AutoItemMode.DefaultMode
.else
            optional in aColor,     PdfColor
            optional in aUnderline, boolean
            optional in aMode,      AutoItemMode
.endc
            endparams
            parent(aMode)
        proc

            mText = aText

.ifdef DBLNET
            if (aColor!=PdfColor.DefaultColor) then
.else
            if (^passed(aColor)) then
.endc
                mColor = aColor
            else
                mColor = PdfColor.Black

.ifdef DBLNET
            mUnderline = aUnderline
.else
            if (^passed(aUnderline)) then
                mUnderline = aUnderline
            else
                mUnderline = false
.endc

        endmethod

        private mText, string

        public property Text, string
            method get
            proc
                mreturn mText
            endmethod
            method set
            proc
                mText = value
            endmethod
        endproperty

        private mColor, PdfColor

        public property Color, PdfColor
            method get
            proc
                mreturn mColor
            endmethod
            method set
            proc
                mColor = value
            endmethod
        endproperty

        private mUnderline, boolean

        public property Underline, boolean
            method get
            proc
                mreturn mUnderline
            endmethod
            method set
            proc
                mUnderline = value
            endmethod
        endproperty

    endclass

    ;;*********************************************************************
    ;;; <summary>
    ;;; Represents a box that is to be drawn on the page of a PDF document using absolute coordinates.
    ;;; </summary>
    public class AutoBoxAbsolute extends AutoBox

        public method AutoBoxAbsolute
            required in aFromX,       float
            required in aFromY,       float
            required in aToX,         float
            required in aToY,         float
.ifdef DBLNET
            default  in aWidth,       float,        1
            default  in aStrokeColor, PdfColor,     PdfColor.DefaultColor
            default  in aFill,        boolean,      false
            default  in aFillColor,   PdfColor,     PdfColor.DefaultColor
            default  in aMode,        AutoItemMode, AutoItemMode.DefaultMode
.else
            optional in aWidth,       float
            optional in aStrokeColor, PdfColor
            optional in aFill,        boolean
            optional in aFillColor,   PdfColor
            optional in aMode,        AutoItemMode
.endc
            endparams
            parent(aWidth,aStrokeColor,aFill,aFillColor,aMode)
        proc
            mFromX = aFromX
            mFromY = aFromY
            mToX   = aToX
            mToY   = aToY
        endmethod

        private mFromX, float

        public property FromX, float
            method get
            proc
                mreturn mFromX
            endmethod
            method set
            proc
                mFromX = value
            endmethod
        endproperty

        private mFromY, float

        public property FromY, float
            method get
            proc
                mreturn mFromY
            endmethod
            method set
            proc
                mFromY = value
            endmethod
        endproperty

        private mToX, float

        public property ToX, float
            method get
            proc
                mreturn mToX
            endmethod
            method set
            proc
                mToX = value
            endmethod
        endproperty

        private mToY, float

        public property ToY, float
            method get
            proc
                mreturn mToY
            endmethod
            method set
            proc
                mToY = value
            endmethod
        endproperty

    endclass

    ;;*********************************************************************
    ;;; <summary>
    ;;; Represents a box that is to be drawn on the page of a PDF document using row/column coordinates.
    ;;; </summary>
    public class AutoBoxRowCol extends AutoBox

        public method AutoBoxRowCol
            optional in aFromRow,     n
            optional in aFromCol,     n
            optional in aToRow,       n
            optional in aToCol,       n
.ifdef DBLNET
            default  in aWidth,       float,        1
            default  in aStrokeColor, PdfColor,     PdfColor.DefaultColor
            default  in aFill,        boolean,      false
            default  in aFillColor,   PdfColor,     PdfColor.DefaultColor
            default  in aMode,        AutoItemMode, AutoItemMode.DefaultMode
.else
            optional in aWidth,       float
            optional in aStrokeColor, PdfColor
            optional in aFill,        boolean
            optional in aFillColor,   PdfColor
            optional in aMode,        AutoItemMode
.endc
            endparams
            parent(aWidth,aStrokeColor,aFill,aFillColor,aMode)
        proc
            if (^passed(aFromRow))
                mFromRow = aFromRow
            if (^passed(aFromCol))
                mFromCol = aFromCol
            if (^passed(aToRow))
                mToRow = aToRow
            if (^passed(aToCol))
                mToCol = aToCol
        endmethod

        private mFromRow, int, 0

        public property FromRow, int
            method get
            proc
                mreturn mFromRow
            endmethod
            method set
            proc
                mFromRow = value
            endmethod
        endproperty

        private mFromCol, int, 0

        public property FromCol, int
            method get
            proc
                mreturn mFromCol
            endmethod
            method set
            proc
                mFromCol = value
            endmethod
        endproperty

        private mToRow, int, 0

        public property ToRow, int
            method get
            proc
                mreturn mToRow
            endmethod
            method set
            proc
                mToRow = value
            endmethod
        endproperty

        private mToCol, int, 0

        public property ToCol, int
            method get
            proc
                mreturn mToCol
            endmethod
            method set
            proc
                mToCol = value
            endmethod
        endproperty

    endclass

    ;;*********************************************************************
    ;;; <summary>
    ;;; Represents an image that is to be drawn on the page of a PDF document using absolute coordinates.
    ;;; </summary>
    public class AutoImage extends AutoItem

        public method AutoImage
            required in aFileSpec, string
            required in aX, float
            required in aY, float
.ifdef DBLNET
            default  in aWidth, float,          0
            default  in aHeight, float,         0
            default  in aMode, AutoItemMode,    AutoItemMode.DefaultMode
.else
            optional in aWidth, float
            optional in aHeight, float
            optional in aMode, AutoItemMode
.endc
            endparams
            parent(aMode)
        proc
            mFileSpec = aFileSpec
            mX = aX
            mY = aY

.ifdef DBLNET
            if (aWidth>=0) then
.else
            if (^passed(aWidth) && (aWidth>=0)) then
.endc
                mWidth = aWidth
            else
                mWidth = 0

.ifdef DBLNET
            if (aHeight>=0) then
.else
            if (^passed(aHeight) && (aHeight>=0)) then
.endc
                mHeight = aHeight
            else
                mHeight = 0

        endmethod

        private mFileSpec, string

        public property FileSpec, string
            method get
            proc
                mreturn mFileSpec
            endmethod
            method set
            proc
                mFileSpec = value
            endmethod
        endproperty

        private mX, float

        public property X, float
            method get
            proc
                mreturn mX
            endmethod
            method set
            proc
                mX = value
            endmethod
        endproperty

        private mY, float

        public property Y, float
            method get
            proc
                mreturn mY
            endmethod
            method set
            proc
                mY = value
            endmethod
        endproperty

        private mWidth, float

        public property Width, float
            method get
            proc
                mreturn mWidth
            endmethod
            method set
            proc
                mWidth = value
            endmethod
        endproperty

        private mHeight, float

        public property Height, float
            method get
            proc
                mreturn mHeight
            endmethod
            method set
            proc
                mHeight = value
            endmethod
        endproperty

    endclass

    ;;*********************************************************************
    ;;; <summary>
    ;;; Represents a line that is to be drawn on the page of a PDF document using absolute coordinates.
    ;;; </summary>
    public class AutoLineAbsolute extends AutoLine

        public method AutoLineAbsolute
            required in aFromX,       float
            required in aFromY,       float
            required in aToX,         float
            required in aToY,         float
.ifdef DBLNET
            default  in aWidth,       float,        1
            default  in aStrokeColor, PdfColor,     PdfColor.DefaultColor
            default  in aMode,        AutoItemMode, AutoItemMode.DefaultMode
.else
            optional in aWidth,       float
            optional in aStrokeColor, PdfColor
            optional in aMode,        AutoItemMode
.endc
            endparams
            parent(aWidth,aStrokeColor,aMode)
        proc
            mFromX = aFromX
            mFromY = aFromY
            mToX   = aToX
            mToY   = aToY
        endmethod

        private mFromX, float

        public property FromX, float
            method get
            proc
                mreturn mFromX
            endmethod
            method set
            proc
                mFromX = value
            endmethod
        endproperty

        private mFromY, float

        public property FromY, float
            method get
            proc
                mreturn mFromY
            endmethod
            method set
            proc
                mFromY = value
            endmethod
        endproperty

        private mToX, float

        public property ToX, float
            method get
            proc
                mreturn mToX
            endmethod
            method set
            proc
                mToX = value
            endmethod
        endproperty

        private mToY, float

        public property ToY, float
            method get
            proc
                mreturn mToY
            endmethod
            method set
            proc
                mToY = value
            endmethod
        endproperty

    endclass

    ;;*********************************************************************
    ;;; <summary>
    ;;; Represents a line that is to be drawn on the page of a PDF document using row/column coordinates.
    ;;; </summary>
    public class AutoLineRowCol extends AutoLine

        public method AutoLineRowCol
            required in aFromRow,     int
            required in aFromCol,     int
            required in aToRow,       int
            required in aToCol,       int
.ifdef DBLNET
            default  in aWidth,       float,        1
            default  in aStrokeColor, PdfColor,     PdfColor.DefaultColor
            default  in aMode,        AutoItemMode, AutoItemMode.DefaultMode
.else
            optional in aWidth,       float
            optional in aStrokeColor, PdfColor
            optional in aMode,        AutoItemMode
.endc
            endparams
            parent(aWidth,aStrokeColor,aMode)
        proc
            FromRow = aFromRow
            FromCol = aFromCol
            ToRow   = aToRow
            ToCol   = aToCol
        endmethod

        private mFromRow, int

        public property FromRow, int
            method get
            proc
                mreturn mFromRow
            endmethod
            method set
            proc
                mFromRow = value
            endmethod
        endproperty

        private mFromCol, int

        public property FromCol, int
            method get
            proc
                mreturn mFromCol
            endmethod
            method set
            proc
                mFromCol = value
            endmethod
        endproperty

        private mToRow, int

        public property ToRow, int
            method get
            proc
                mreturn mToRow
            endmethod
            method set
            proc
                mToRow = value
            endmethod
        endproperty

        private mToCol, int

        public property ToCol, int
            method get
            proc
                mreturn mToCol
            endmethod
            method set
            proc
                mToCol = value
            endmethod
        endproperty

    endclass

    ;;*********************************************************************
    ;;; <summary>
    ;;; Represents text that is to be drawn on the page of a PDF document using absolute coordinates.
    ;;; </summary>
    public class AutoTextAbsolute extends AutoText

        public method AutoTextAbsolute
            required in aText,      string
            required in aX,         float
            required in aY,         float
.ifdef DBLNET
            default  in aColor,     PdfColor,       PdfColor.DefaultColor
            default  in aFontName,  string,         ^null
            default  in aFontSize,  int,            0
            default  in aMode,      AutoItemMode,   AutoItemMode.DefaultMode
            default  in aUnderline, boolean,        false
.else
            optional in aColor,     PdfColor
            optional in aFontName,  string
            optional in aFontSize,  int
            optional in aMode,      AutoItemMode
            optional in aUnderline, boolean
.endc
            endparams
            parent(aText,aColor,aUnderline,aMode)
        proc
            mX  = aX
            mY  = aY

.ifdef DBLNET
            if (!String.IsNullOrWhiteSpace(aFontName))
.else
            if (^passed(aFontName) && (afontName!=^null) && (aFontName.Trim().Length>0))
.endc
                mFontName = aFontName

.ifdef DBLNET
            if (aFontSize>0)
.else
            if (^passed(aFontSize) && (aFontSize>0))
.endc
                mFontSize = aFontSize

        endmethod

        private mX, float

        public property X, float
            method get
            proc
                mreturn mX
            endmethod
            method set
            proc
                mX = value
            endmethod
        endproperty

        private mY, float

        public property Y, float
            method get
            proc
                mreturn mY
            endmethod
            method set
            proc
                mY = value
            endmethod
        endproperty

        private mFontName, string

        public property FontName, string
            method get
            proc
                mreturn mFontName
            endmethod
            method set
            proc
                mFontName = value
            endmethod
        endproperty

        private mFontSize, int, 0

        public property FontSize, int
            method get
            proc
                mreturn mFontSize
            endmethod
            method set
            proc
                mFontSize = value
            endmethod
        endproperty

    endclass

    ;;*********************************************************************
    ;;; <summary>
    ;;; Represents text that is to be drawn on the page of a PDF document using row/column coordinates.
    ;;; </summary>
    public class AutoTextRowCol extends AutoText

        public method AutoTextRowCol
            required in aText,      string
            optional in aRow,       n
            optional in aCol,       n
.ifdef DBLNET
            default  in aBold,      boolean,        false
            default  in aItalic,    boolean,        false
            default  in aColor,     PdfColor,       PdfColor.DefaultColor
            default  in aNewLine,   boolean,        false
            default  in aMode,      AutoItemMode,   AutoItemMode.DefaultMode
            default  in aUnderline, boolean,        false
.else
            optional in aBold,      boolean
            optional in aItalic,    boolean
            optional in aColor,     PdfColor
            optional in aNewLine,   boolean
            optional in aMode,      AutoItemMode
            optional in aUnderline, boolean
.endc
            endparams
            parent(aText,aColor,aUnderline,aMode)
        proc

            if (^passed(aRow))
                mRow  = aRow

            if (^passed(aCol))
                mCol  = aCol

.ifdef DBLNET
            mBold = aBold
.else
            if (^passed(aBold))
                mBold = aBold
.endc

.ifdef DBLNET
            mItalic = aItalic
.else
            if (^passed(aItalic))
                mItalic = aItalic
.endc

.ifdef DBLNET
            mNewLine = aNewLine
.else
            if (^passed(aNewLine))
                mNewLine = aNewLine
.endc

        endmethod

        private mRow, int, 0

        public property Row, int
            method get
            proc
                mreturn mRow
            endmethod
            method set
            proc
                mRow = value
            endmethod
        endproperty

        private mCol, int, 0

        public property Col, int
            method get
            proc
                mreturn mCol
            endmethod
            method set
            proc
                mCol = value
            endmethod
        endproperty

        private mBold, boolean, false

        public property Bold, boolean
            method get
            proc
                mreturn mBold
            endmethod
            method set
            proc
                mBold = value
            endmethod
        endproperty

        private mItalic, boolean, false

        public property Italic, boolean
            method get
            proc
                mreturn mItalic
            endmethod
            method set
            proc
                mItalic = value
            endmethod
        endproperty

        private mNewLine, boolean, false

        public property NewLine, boolean
            method get
            proc
                mreturn mNewLine
            endmethod
            method set
            proc
                mNewLine = value
            endmethod
        endproperty

    endclass

    ;;*********************************************************************
    ;;; <summary>
    ;;; Represents an item of data for a chart.
    ;;; </summary>
    public class ChartItem
        
        public method ChartItem
            required in aDataValue, int
            required in aLabel, string
            endparams
        proc
            DataValue = aDataValue
            Label = aLabel
            Color = PdfColor.NotSpecified
        endmethod
        
        public method ChartItem
            required in aDataValue, int
            required in aLabel, string
            required in aColor, PdfColor
            endparams
            this(aDataValue,aLabel)
        proc
            Color = aColor
        endmethod

        public method ChartItem
            endparams
            this(0,"")
        proc
        endmethod
        
        private mDataValue, int
        
        public property DataValue, int
            method get
            proc
                mreturn mDataValue
            endmethod
            method set
            proc
                mDataValue = value
            endmethod
        endproperty
        
        private mColor, PdfColor
        
        public property Color, PdfColor
            method get
            proc
                mreturn mColor
            endmethod
            method set
            proc
                mColor = value
            endmethod
        endproperty

        private mLabel, string

        public property Label, string
            method get
            proc
                mreturn mLabel
            endmethod
            method set
            proc
                mLabel = value
            endmethod
        endproperty

    endclass
        
    ;;*********************************************************************
    ;;; <summary>
    ;;; Represents a series of data for a chart
    ;;; </summary>
    public class ChartSeries
        
        public method ChartSeries
            required in aItemCount, int
            endparams
            record 
                ix, int
            endrecord
        proc
            mItems = new ChartItem[aItemCount]
            mColor = PdfColor.NotSpecified
            for ix from 1 thru aItemCount
                mItems[ix] = new ChartItem()
        endmethod

        private mItems, [#]@ChartItem
        
        public property Items, [#]@ChartItem
            method get
            proc
                mreturn mItems
            endmethod
            method set
            proc
                mItems = value
            endmethod
        endproperty
        
        private mColor, PdfColor

        public property Color, PdfColor
            method get
            proc
                mreturn mColor
            endmethod
            method set
            proc
                mColor = value
            endmethod
        endproperty
        
        private mLabel, string
        
        public property Label, string
            method get
            proc
                mreturn mLabel
            endmethod
            method set
            proc
                mLabel = value
            endmethod
        endproperty
        
    endclass
    
    ;;*********************************************************************
    ;;; <summary>
    ;;; Represents a data set from which to draw a chart.
    ;;; </summary>
    public class ChartDataSet

        public method ChartDataSet
            required in aSeriesCount, int
            required in aItemsPerSeries, int
            endparams
            record 
                ix, int
            endrecord
        proc
            mSeries = new ChartSeries[aSeriesCount]
            mGroupLabel = new string[aItemsPerSeries]
            for ix from 1 thru aSeriesCount
                mSeries[ix] = new ChartSeries(aItemsPerSeries)
            for ix from 1 thru aItemsPerSeries
                mGroupLabel[ix] = ""
        endmethod

        private mSeries, [#]@ChartSeries

        public property Series, [#]@ChartSeries
            method get
            proc
                mreturn mSeries
            endmethod
            method set
            proc
                mSeries = value
            endmethod
        endproperty
        
        private mGroupLabel, [#]string
        
        public property GroupLabel, [#]string
            method get
            proc
                mreturn mGroupLabel
            endmethod
            method set
            proc
                mGroupLabel = value
            endmethod
        endproperty
        
    endclass

    ;;*********************************************************************
    ;;ENUMERATIONS

    public enum AutoItemMode
.ifdef DBLNET
        DefaultMode, -1
.endc
        BeginPage, 0
        EndPage
    endenum

    public enum PdfPageLayout
        Single,         0
        OneColumn
        TwoColumnLeft
        TwoColumnRight
        Eof
    endenum

    public enum PdfPageMode
        None,           0
        Outline
        Thumbs
        FullScreen
        Eof
    endenum

    public enum PdfPageSize
        LETTER,         0
        LEGAL
        A3
        A4
        A5
        B4
        B5
        EXECUTIVE
        US4x6
        US4x8
        US5x7
        COMM10
        EOF
    endenum

    public enum PdfOrientation
.ifdef DBLNET
        DefaultOrientation, -1
.endc
        Portrait,       0
        Landscape
    endenum

    public enum PdfColor
        NotSpecified,   -1
.ifdef DBLNET
        DefaultColor,   0
.endc
        AirForceblue,   1
        AliceBlue
        AlizarinCrimson
        Almond
        Amaranth
        Amber
        AmericanRose
        Amethyst
        AndroidGreen
        AntiFlashWhite
        AntiqueBrass
        AntiqueFuchsia
        AntiqueWhite
        Ao
        AppleGreen
        Apricot
        Aqua
        Aquamarine
        ArmyGreen
        Arsenic
        ArylideYellow
        AshGray
        Asparagus
        AtomicTangerine
        Auburn
        Aureolin
        AuroMetalSaurus
        Awesome
        Azure
        AzureMist
        BabyBlue
        BabyBlueEyes
        BabyPink
        BallBlue
        BananaMania
        BananaYellow
        BattleShipGray
        Bazaar
        BeauBlue
        Beaver
        Beige
        Bisque
        Bistre
        BitterSweet
        Black
        BlanchedAlmond
        BleudeFrance
        BlizzardBlue
        Blond
        Blue
        BlueBell
        BlueGray
        BlueGreen
        BlueViolet
        Blush
        Bole
        BondiBlue
        BostonUniversityRed
        BrandeisBlue
        Brass
        BrickRed
        BrightCerulean
        BrightGreen
        BrightLavender
        BrightMaroon
        BrightPink
        BrightTurquoise
        BrightUbe
        BrilliantLavender
        BrillianRrose
        BrinkPink
        BritishRacingGreen
        Bronze
        Brown
        BubbleGum
        Bubbles
        Buff
        BulgarianRose
        Burgundy
        Burlywood
        BurntOrange
        BurntSienna
        BurntUmber
        Byzantine
        Byzantium
        Cadet
        CadetBlue
        CadetGray
        CadmiumGreen
        CadmiumOrange
        CadmiumRed
        CadmiumYellow
        CalPolyPomonaGreen
        CambridgeBlue
        Camel
        CamouflageGreen
        CanaryYellow
        CandyAppleRed
        CandyPink
        Capri
        CaputMortuum
        Cardinal
        CaribbeanGreen
        Carmine
        CarminePink
        CarmineRed
        CarnationPink
        Carnelian
        CarolinaBlue
        CarrotOrange
        Ceil
        Celadon
        CelestialBlue
        Cerise
        CerisePink
        Cerulean
        CeruleanBlue
        CGBlue
        CGRed
        Chamoisee
        Champagne
        Charcoal
        Chartreuse
        CherryBlossomPink
        Chestnut
        Chocolate
        ChromeYellow
        Cinereous
        Cinnabar
        Cinnamon
        Citrine
        ClassicRose
        Cobalt
        Coffee
        ColumbiaBlue
        CoolBlack
        CoolGray
        Copper
        CopperRose
        Coquelicot
        Coral
        CoralPink
        CoralRed
        Cordovan
        Corn
        CornFlowerBlue
        CornSilk
        CosmicLatte
        CottonCandy
        Cream
        Crimson
        CrimsonGlory
        Cyan
        Daffodil
        Dandelion
        DarkBlue
        DarkBrown
        DarkByzantium
        DarkCandyapplered
        DarkCerulean
        DarkChampagne
        DarkChestnut
        DarkCoral
        DarkCyan
        DarkElectricBlue
        DarkGoldenRod
        DarkGray
        DarkGreen
        DarkJungleGreen
        DarkKhaki
        DarkLava
        DarkLavender
        DarkMagenta
        DarkMidnightBlue
        DarkOliveGreen
        DarkOrange
        DarkOrchid
        DarkPastelBlue
        DarkPastelGreen
        DarkPastelPurple
        DarkPastelRed
        DarkPink
        DarkPowderBlue
        DarkRaspberry
        DarkRed
        DarkSalmon
        DarkScarlet
        DarkSeaGreen
        DarkSienna
        DarkSlateBlue
        DarkSlateGray
        DarkspringGreen
        DarkTan
        DarkTangerine
        DarkTerracotta
        DarkTurquoise
        DarkViolet
        DartMouthGreen
        DavysGray
        DebianRed
        DeepCarmine
        DeepCarminepink
        DeepcarrotOrange
        Deepcerise
        Deepchampagne
        Deepchestnut
        DeepFuchsia
        DeepJunglegreen
        DeepLilac
        DeepMagenta
        DeepPeach
        DeepPink
        Deepsaffron
        Denim
        DesertSand
        DimGray
        DodgerBlue
        DogWoodRose
        DollarBill
        Drab
        DukeBlue
        EarthYellow
        EggPlant
        EggShell
        EgyptianBlue
        ElectricBlue
        ElectricCrimson
        ElectricGreen
        ElectricIndigo
        ElectricLime
        ElectricPurple
        ElectricUltraMarine
        ElectricViolet
        ElectricYellow
        Emerald
        EtonBlue
        FaluRed
        Fandango
        FashionFuchsia
        Fawn
        Feldgrau
        FernGreen
        FerrariRed
        FieldDrab
        FireBrick
        FireEngineRed
        Flame
        FlamingoPink
        Flavescent
        Flax
        FloralWhite
        Folly
        ForestGreen
        FrenchBeige
        FrenchBlue
        FrenchLilac
        FrenchRose
        Fuchsia
        FuchsiaPink
        Fulvous
        FuzzyWuzzy
        Gainsboro
        Gamboge
        GhostWhite
        Ginger
        Glaucous
        Gold
        GoldenBrown
        GoldenPoppy
        GoldenRod
        GoldenYellow
        GrannySmithApple
        Gray
        GrayAsparagus
        Green
        GreenYellow
        Grullo
        GuppieGreen
        Halayaube
        HanBlue
        HanPurple
        Harlequin
        HarvardCrimson
        HarvestGold
        Heliotrope
        Honeydew
        HookersGreen
        HotMagenta
        HotPink
        HunterGreen
        Iceberg
        Icterine
        Inchworm
        IndiaGreen
        IndianYellow
        Indigo
        InternationalKleinBlue
        InternationalOrange
        Iris
        Isabelline
        IslamicGreen
        Ivory
        Jade
        Jasmine
        Jasper
        JazzberryJam
        Jonquil
        Junebud
        JungleGreen
        KellyGreen
        Khaki
        KUCrimson
        LanguidLavender
        Lapislazuli
        LaSalleGreen
        LaserLemon
        Lava
        Lavender
        LavenderBlue
        LavenderBlush
        LavenderGray
        LavenderIndigo
        LavenderMagenta
        LavenderMist
        LavenderPink
        LavenderPurple
        LavenderRose
        LawnGreen
        Lemon
        LemonChiffon
        LightApricot
        LightBlue
        LightBrown
        LightCarminePink
        LightCoral
        LightCornFlowerBlue
        LightCrimson
        LightCyan
        LightFuchsiaPink
        LightGoldenrodYellow
        LightGray
        LightGreen
        LightKhaki
        LightMauve
        LightPastelPurple
        LightPink
        LightSalmon
        LightSalmonPink
        LightSeaGreen
        LightSkyBlue
        LightSlateGray
        LightTaupe
        LightThulianPink
        LightYellow
        Lilac
        Lime
        LimeGreen
        LincolnGreen
        Linen
        Liver
        Lust
        Magenta
        Magicmint
        Magnolia
        Mahogany
        MajorelleBlue
        Malachite
        Manatee
        MangoTango
        Maroon
        Mauve
        Mauvelous
        Mauvetaupe
        MayaBlue
        MeatBrown
        MediumAquaMarine
        MediumMlue
        MediumCandyAppleRed
        MediumCarmine
        MediumChampagne
        MediumElectricBlue
        MediumJungleGreen
        MediumLavenderMagenta
        MediumOrchid
        MediumPersianBlue
        MediumPurple
        MediumRedViolet
        MediumSeaGreen
        MediumSlateBlue
        MediumSpringBud
        MediumSpringGreen
        MediumTaupe
        MediumTealBlue
        MediumTurquoise
        MediumVioletRed
        Melon
        MidnightBlue
        MidnightGreen
        MikadoYellow
        Mint
        MintCream
        MintGreen
        MistyRose
        MoonStoneBlue
        MordantRed19
        MossGreen
        MountainMeadow
        MountBattenPink
        MSUGreen
        Mulberry
        Mustard
        Myrtle
        NadeshikoPink
        NapierGreen
        NavajoWhite
        Navy
        NeonCarrot
        NeonFuchsia
        NeonGreen
        NonPhotoBlue
        OceanBoatBlue
        Ochre
        OldGold
        OldLace
        OldLavender
        OldMauve
        OldRose
        Olive
        OliveDrab
        OliveDrab7
        Olivine
        Onyx
        OperaNauve
        Orange
        OrangePeel
        OrangeRed
        Orchid
        OUCrimsonRed
        OuterSpace
        OutrageousOrange
        OxfordBlue
        PakistanGreen
        PalatinateBlue
        PalatinatePurple
        PaleBlue
        PaleBrown
        PaleCerulean
        PaleChestnut
        PaleCopper
        PaleCornFlowerBlue
        PaleGold
        PaleGoldenRod
        PaleGreen
        PaleMagenta
        PalePink
        PaleRedViolet
        PaleRobinEggBlue
        PaleSilver
        PaleSpringBud
        PaleTaupe
        PansyPurple
        PapayaWhip
        PastelBlue
        PastelBrown
        PastelGray
        PastelGreen
        PastelMagenta
        PastelOrange
        PastelPink
        PastelPurple
        PastelRed
        PastelViolet
        PastelYellow
        Patriarch
        PaynesGray
        Peach
        PeachOrange
        PeachPuff
        PeachYellow
        Pear
        PearlAqua
        Peridot
        PersianBlue
        PersianGreen
        PersianIndigo
        PersianOrange
        PersianPink
        PersianPlum
        PersianRed
        PersianRose
        Persimmon
        Phlox
        PhthaloBlue
        PhthaloGreen
        PiggyPink
        PineGreen
        Pink
        PinkPearl
        PinkSherbet
        Pistachio
        Platinum
        Plum
        PortlandOrange
        PowderBlue
        PrincetonOrange
        PrussianBlue
        Puce
        Pumpkin
        Purple
        PurpleHeart
        PurpleMountainMajesty
        PurplePizzazz
        PurpleTaupe
        Quartz
        RadicalRed
        Raspberry
        RaspberryPink
        RaspberryRose
        RawUmber
        RazzleDazzleRose
        Razzmatazz
        Red
        Redwood
        Regalia
        RichBlack
        RichBrilliantLavender
        RichCarmine
        RichElectricBlue
        RichLavender
        RichLilac
        RichMaroon
        RifleGreen
        RobinEggBlue
        RoseBonBon
        RoseEbony
        RoseGold
        RosePink
        RoseQuartz
        RoseTaupe
        RoseWood
        RossoCorsa
        RosyBrown
        RoyalAzure
        RoyalBlue
        RoyalFuchsia
        RoyalPurple
        Ruby
        Ruddy
        RuddyBrown
        RuddyPink
        Rufous
        Russet
        Rust
        SacramentoStateGreen
        SaddleBrown
        SafetyOrange
        Saffron
        Salmon
        SalmonPink
        SandStorm
        SandyBrown
        Sangria
        SapGreen
        Sapphire
        SatinSheenGold
        Scarlet
        SchoolBusYellow
        ScreaminGreen
        SeaGreen
        SealBrown
        SeaShell
        SelectiveYellow
        Sepia
        Shadow
        ShamrockGreen
        ShockingPink
        Sienna
        Silver
        Sinopia
        Skobeloff
        SkyBlue
        SkyMagenta
        SlateBlue
        SlateGray
        SmokeyTopaz
        SmokyBlack
        Snow
        SpiroDiscoBall
        SplashedWhite
        SpringBud
        SteelBlue
        SaintPatricksBlue
        Straw
        Sunglow
        Tan
        Tangelo
        Tangerine
        TangerineYellow
        TaupeGray
        TeaGreen
        Teal
        TealBlue
        TealGreen
        Tenne
        Terracotta
        Thistle
        ThulianPink
        TickleMePink
        TiffanyBlue
        TigersEye
        TimberWolf
        TitaniumYellow
        Tomato
        Toolbox
        Topaz
        TractorRed
        TropicalRainForest
        TrueBlue
        TuftsBlue
        Tumbleweed
        TurkishRose
        Turquoise
        TurquoiseBlue
        TurquoiseGreen
        TuscanRed
        TwilightLavender
        TyrianPurple
        UABlue
        UARed
        Ube
        UCLABlue
        UCLAGold
        UFOGreen
        UltraMarine
        UltraMarineBlue
        UltraPink
        Umber
        UnitedNationsBlue
        UniversityOfCaliforniaGold
        UnmellowYellow
        UPMaroon
        UpsdellRed
        Urobilin
        UtahCrimson
        VegasGold
        VenetianRed
        Verdigris
        Veronica
        Violet
        Viridian
        VividAuburn
        VividBurgundy
        VividCerise
        VividTangerine
        VividViolet
        WarmBlack
        Wenge
        Wheat
        White
        WhiteSmoke
        WildBlueYonder
        WildStrawberry
        WildWatermelon
        Wine
        Wisteria
        Xanadu
        YaleBlue
        Yellow
        YellowGreen
        YellowOrange
        Zaffre
        ZinnwalditeBrown
    endenum

endnamespace

